---
sidebar: false
toc: false
---

{{< include _setup.qmd >}}

```{r}
#| include: false

library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
```

# Learners

```{r}
#| include: false

content = as.data.table(mlr_learners, objects = TRUE)
content[, base_package := map(object, function(x) strsplit(x$man, "::", TRUE)[[1]][1])]
content[, packages := pmap(list(packages, base_package), function(x, y) setdiff(x, c(y, "mlr3")))]
content[, `:=`(object = NULL, task_type = NULL)]
```

To keep the dependencies on other packages reasonable, the base package mlr3 only ships with with regression and classification trees from the `r ref_pkg("rpart")` package and some learners for debugging.
A subjective selection of implementations for essential ML algorithms can be found in `r ref_pkg("mlr3learners")` package.
Survival learners are provided by `r ref_pkg("mlr3proba")`, cluster learners via `r ref_pkg("mlr3cluster")`.
Additional learners, including some learners which are not yet to be considered stable or which are not available on CRAN, are connected via the `r ref_pkg("mlr3extralearners")` package.


```{r}
#| echo: false
#| column: page

to_list = function(value) {
  if (length(value)) {
    tags$ul(
      map(value, function(x) tags$li(x))
    )
  } else character(1)
}

reactable(content, columns = list(
  label = colDef(name = "Label"),
  key = colDef(name = "Key",
    cell = function(value) {
      mlr3book::ref(sprintf("%s_%s", "mlr_learners", value), text = value, format = "htmltools")
    }
  ),
  base_package = colDef(name = "Base Package",
    cell = function(value) {
      mlr3book::ref_pkg(sprintf("%s_%s", "mlr_learners", value), pkg = value, format = "htmltools")
    }
  ),
  feature_types = colDef(name = "Feature Types", cell = to_list),
  predict_types = colDef(name =  "Predict Types", cell = to_list),
  properties = colDef(name = "Properties", cell = to_list)
  ),
  searchable = TRUE,
  pagination = FALSE
)
```

## Example Usage

Fit a `r ref("mlr_learners_classif.rpart", text = "classification tree")` on the `r ref("mlr_tasks_breast_cancer", text = "Wisconsin Breast Cancer Data Set")` and predict on left-out observations.

```{r, echo = TRUE}
library("mlr3verse")

# retrieve the task
task = tsk("breast_cancer")

# split into two partitions
split = partition(task)

# retrieve a learner
learner = lrn("classif.rpart", keep_model = TRUE, predict_type = "prob")

# fit decision tree
learner$train(task, split$train)

# access learned model
learner$model

# predict on data frame with new data
predictions = learner$predict_newdata(task$data(split$test))

# predict on subset of the task
predictions = learner$predict(task, split$test)

# inspect predictions
predictions
predictions$score(msr("classif.auc"))
autoplot(predictions, type = "roc")
```


