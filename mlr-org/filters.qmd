---
sidebar: false
toc: false
---

# Feature Selection Filter

{{< include _setup.qmd >}}

```{r}
#| include: false

library(mlr3filters)
```

`r ref("Filter", text = "Feature Filters")` quantify the importance of each feature of a `r ref("Task")` by assigning them a numerical score.
In a second step, features can be selected by either selecting a fixed absolute or relative frequency of the best features, or by thresholding on the score value.

The `r ref("mlr_pipeops_filter", text = "Filter PipeOp")` allows to use filters as a preprocessing step.

```{r}
#| echo: false
#| column: page

content = as.data.table(mlr_filters, objects = TRUE)[, .(key, label, task_type, packages)]
content[, packages := map(packages, function(value) setdiff(value, c("mlr3", "mlr3filters")))]

ref_cell = function(value) {
  if (!length(value)) return(NULL)
  mlr3book::ref(sprintf("%s_%s", "mlr_filters", value), text = value, format = "htmltools")
}

reactable(content, columns = list(
    key = colDef(name = "Key", cell = ref_cell),
    label = colDef(name = "Label"),
    task_type = colDef(name = "Task Type", cell = list_cell),
    packages = colDef(name = "Packages", cell = package_list_cell)
  ),
  searchable = TRUE,
  pagination = FALSE,
  highlight = TRUE
)
```

## Example Usage

Use the $-\log_10()$-transformed $p$-values of a Kruskal-Wallis rank sum test (implemented in `r ref("kruskal.test()")`) for filtering features of the `r ref("mlr_tasks_pima", text = "Pima Indian Diabetes")` tasks.

```{r, echo=TRUE}
library("mlr3verse")

# retrieve a task
task = tsk("pima")

# retrieve a filter
filter = flt("kruskal_test")

# calculate scores
filter$calculate(task)

# access scores
filter$scores

# plot scores
autoplot(filter)

# subset task to 3 most important features
task$select(head(names(filter$scores), 3))
task$feature_names
```
