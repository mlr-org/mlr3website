---
sidebar: false
toc: false
---

{{< include _setup.qmd >}}

```{r}
#| include: false

requireNamespace("mlr3spatiotempcv")
requireNamespace("mlr3verse")
```

# Resamplings

Resamplings split the observations multiple times into two sets: training and test.
The former is used to fit the model, the latter is used to evaluate the predictions.
The `r ref("Resampling")` objects provide an abstraction for this procedure while respecting stratification as well as grouping/blocking if this is required by the `r ref("Task")`.

If only a single split is required (i.e., a holdout split), the `r ref("partition()")` function provides a single split into training and test set.


```{r}
#| echo: false
#| column: page

content = as.data.table(mlr3::mlr_resamplings)[, .(key, label, params, iters)]

reactable(content, columns = list(
  key = colDef(
    cell = function(value) {
      mlr3book::ref(sprintf("%s_%s", "mlr_resamplings", value), text = value, format = "htmltools")
    }
  ),
  label = colDef(name = "Label"),
  params = colDef(name = "Parameters", cell = function(value) {
    if (length(value)) {
      tags$ul(map(value, function(x) tags$li(class = "object-table__list", x)))
    }
  }),
  iters = colDef(name = "Default Iterations")
  ),
  searchable = TRUE,
  pagination = FALSE,
  highlight = TRUE
)
```

## Example Usage

Fit a `r ref("mlr_learners_classif.ranger", text = "Random Forest")` on the `r ref("mlr_tasks_breast_cancer", text = "Wisconsin Breast Cancer Data Set")` using a `r ref("mlr_resamplings_cv", text = "3-fold cross validation")`.

```{r echo=TRUE}
library("mlr3verse")

# retrieve the task
task = tsk("breast_cancer")

# retrieve a learner
learner = lrn("classif.ranger")

# retrieve resampling strategy
resampling = rsmp("cv", folds = 3)

# perform resampling
rr = resample(task, learner, resampling)
rr
```
