---
sidebar: false
toc: false
---

# Feature Selection Wrapper

{{< include _setup.qmd >}}

```{r}
#| include: false

library(mlr3fselect)

lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")
```

Feature selection wrappers can be found in the `r ref_pkg("mlr3fselect")` packages.
The goal is to find the best subset of features with respect to a `r ref("Measure", text = "performance measure")` in an iterative fashion.

```{r}
#| echo: false
#| column: page

content = as.data.table(mlr_fselectors)[, .(key, label, packages, properties)]
content[, properties := map(properties, function(x) setdiff(x, "dependencies"))]
content[, packages := map(packages, function(value) setdiff(value, c("bbotk", "mlr3fselect")))]

ref_cell = function(value) {
  if (!length(value)) return(NULL)
  mlr3book::ref(sprintf("%s_%s", "mlr_fselectors", value), text = value, format = "htmltools")
}

reactable(content, columns = list(
    key = colDef(name = "Key", cell = ref_cell),
    label = colDef(name = "Label"),
    packages = colDef(name = "Packages", cell = package_list_cell),
    properties = colDef(name = "Properties", cell = list_cell)
  ),
  searchable = TRUE,
  pagination = FALSE,
  highlight = TRUE
)
```

## Example Usage

Run a `r ref("mlr_fselectors_sequential", text = "sequential feature selection")` on the `r ref("mlr_tasks_pima", text = "Pima Indian Diabetes")` data set.

```{r, echo = TRUE}
library(mlr3verse)

# retrieve task
task = tsk("pima")

# load learner
learner = lrn("classif.rpart")

# feature selection on the pima indians diabetes data set
instance = fselect(
  method = fs("sequential"),
  task = task,
  learner = learner,
  resampling = rsmp("holdout"),
  measure = msr("classif.ce")
)

# best performing feature subset
instance$result

# subset the task and fit the final model
task$select(instance$result_feature_set)
learner$train(task)

print(learner)
```
