---
title: "Spatial data in mlr3"
description: |
  Train with spatial data and predict maps.
author:
  - name: Marc Becker
    orcid: 0000-0002-8115-0400
    url: https://github.com/be-marc
date: 2023-01-23
---

{{< include ../_setup.qmd >}}

```{r 2023-01-23-mlr3spatial-001}
#| include: false

lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")
set.seed(0)
future::plan("multisession")
```

# Scope

Working with spatial data in R requires a lot of data wrangling e.g. reading from different file formats, converting between spatial formats, creating tables from point layers, engineering new features and predicting spatial raster images.
The `r ref_pkg("mlr3spatial")` package is a bridge between spatial data and the [mlr3 ecosystem](https://mlr-org.com/ecosystem.html).
The package simplifies the work steps: Load the training data, create a spatial task, train a learner with it, and predict the final raster image (see flowchart).
In this article, we will perform a land cover classification for the city of Leipzig, Germany, as an example of the capabilities of the package.
```{mermaid}
%%{ init: { 'flowchart': { 'curve': 'bump' } } }%%

flowchart LR
    subgraph files[Files]
    vector[Vector]
    raster[Raster]
    end
    subgraph load[Load Data]
    sf
    terra
    end
    vector --> sf
    raster --> terra
    subgraph train_model[Train Model]
    task[Task]
    learner[Learner]
    end
    terra --> prediction_raster
    task --> learner
    sf --> task
    subgraph predict[Spatial Prediction]
    prediction_raster[Raster Image]
    end
    learner --> prediction_raster


```

# Land Cover Classification

The package relies on `r ref_pkg("terra")` for processing raster data and `r ref_pkg("sf")` for vector data.
These widely used packages read all common raster and vector formats.
Additionally, the `r ref_pkg("stars")` and `r ref_pkg("raster")` packages are supported.

```{r 2023-01-23-mlr3spatial-002}
#| message: false

library(mlr3verse)
library(mlr3spatial)
library(terra, exclude = "resample")
library(sf)
```

We will work with example data from the package.
It includes a Sentinal-2 scene of the city of Leipzig which consists of 7 bands with a 10 or 20m spatial resolution and an NDVI band.
We load the TIFF raster file and use `r ref("terra::rast()")` to create a `r ref("terra::SpatRaster")`.

```{r 2023-01-23-mlr3spatial-003}
leipzig_raster = rast(system.file("extdata", "leipzig_raster.tif", package = "mlr3spatial"))
leipzig_raster
```

The training data is a GeoPackage point layer with land cover labels and the spectral features.
We load the file and create a simple feature point layer (`r ref("sf::sf")`).

```{r 2023-01-23-mlr3spatial-004}
leipzig_vector = read_sf(system.file("extdata", "leipzig_points.gpkg", package = "mlr3spatial"), stringsAsFactors = TRUE)
leipzig_vector
```

We plot both layers to get an overview of the data.
The training points are located in the districts of Lindenau and Zentrum West.

```{r 2023-01-23-mlr3spatial-005}
#| code-fold: true
#| fig-width: 8
#| fig-height: 8
library(ggplot2)
library(tidyterra, exclude = "filter")

ggplot() +
  geom_spatraster_rgb(data = leipzig_raster, r = 3, g = 2, b = 1, max_col_value = 5451) +
  geom_spatvector(data = leipzig_vector, aes(color = land_cover)) +
  scale_color_viridis_d(name = "Land cover", labels = c("Forest", "Pastures", "Urban", "Water")) +
  theme_minimal()
```

To create a spatial task from the point layer, call `r ref("as_task_classif_st()")`.
The spatial classification task additionally stores the coordinates of the training points.

```{r 2023-01-23-mlr3spatial-006}
task = as_task_classif_st(leipzig_vector, target = "land_cover")
task
```

Now we can train a model with the task.
We use a simple decision tree learner from the `r ref_pkg("rpart")` package.

```{r 2023-01-23-mlr3spatial-007}
learner = lrn("classif.rpart")
learner$train(task)
```

As a last step, we predict the whole raster image.

```{r 2023-01-23-mlr3spatial-008}
# predict land cover map
land_cover = predict_spatial(leipzig_raster, learner)
```

```{r 2023-01-23-mlr3spatial-009}
#| code-fold: true
#| fig-width: 8
#| fig-height: 8

ggplot() +
  geom_spatraster(data = land_cover) +
  scale_fill_viridis_d(name = "Land cover", labels = c("Forest", "Pastures", "Urban", "Water")) +
  theme_minimal()
```

## Conclusion

Working with spatial data in R is very easy with the `r ref_pkg("mlr3spatial")` package.
Quickly train a model with a point layer and predict a raster image.
In the next article, we will show you how to predict large survey areas fast and without memory issues.
