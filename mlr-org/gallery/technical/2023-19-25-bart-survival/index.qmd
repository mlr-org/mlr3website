---
title: "Survival modeling in mlr3 using Bayesian Additive Regression Trees (BART)"
description: |
  Demonstrate use of survival BART on the lung dataset via mlr3proba and distr6.
author:
  - name: John Zobolas
    orcid: 0000-0002-3609-8674
    url: https://github.com/bblodfon
date: 2023-10-25
bibliography: ../../bibliography.bib
---

{{< include ../../_setup.qmd >}}

## Intro

Here are some interesting reads regarding BART:

- The first BART paper [@Chipman2010].
- The first implementation of BART for survival data [@Bonato2011].
This includes fully parametric AFT and Weibull models and the semi-parametric CoxPH regression model.
- The first non-parametric implementation of BART for survival data [@Sparapani2016]
- `BART` R package tutorial [@Sparapani2021]

We incorporated the survival `BART` model in `mlr3extralearners` and in this tutorial we will demonstrate how we can use packages like `mlr3`, `mlr3proba` and `distr6` to more easily manipulate the output predictions to assess model convergence, validate our model (via several survival metrics), as well as perform model interpretation via PDPs (Partial Dependence Plots).

## Libraries

```{r}
#| output: false
library(mlr3extralearners)
library(mlr3pipelines)
library(mlr3proba)
library(distr6)
library(BART) # 2.9.4
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
```

## Data

We will use the Lung Cancer Dataset.
We convert the `time` variable from days to months to ease the computational burden:
```{r}
task_lung = tsk('lung')

d = task_lung$data()
# in case we want to select specific columns to keep
# d = d[ ,colnames(d) %in% c("time", "status", "age", "sex", "ph.karno"), with = FALSE]
d$time = ceiling(d$time/30.44)
task_lung = as_task_surv(d, time = 'time', event = 'status', id = 'lung')
task_lung$label = "Lung Cancer"
```

:::{.callout-note}
1. The original `BART` implementation supports categorical features (factors).
This results in different importance scores per each dummy level which doesn't work well with `mlr3`.
So features of type `factor` or `character` are not allowed and we leave it to the user to encode them as they please.
2. The original `BART` implementation supports features with missing values.
This is totally fine with `mlr3` as well!
In this example, we impute the features to show good ML practice.
:::

In our lung dataset, we encode the `sex` feature and perform model-based imputation with the `rpart` regression learner:
```{r}
po_encode = po('encode', method = 'treatment')
po_impute = po('imputelearner', lrn('regr.rpart'))
pre = po_encode %>>% po_impute
task = pre$train(task_lung)[[1]]
task
```

No missing values in our data:
```{r}
task$missings()
```

We partition the data to train and test sets:
```{r}
set.seed(42)
part = partition(task, ratio = 0.9)
```

## Train and Test

We train the `BART` model and predict on the test set:
```{r}
# default `ndpost` value: 1000. We reduce it to 50 to speed up calculations in this tutorial
learner = lrn("surv.bart", nskip = 250, ndpost = 50, keepevery = 10, mc.cores = 10)
learner$train(task, row_ids = part$train)
p = learner$predict(task, row_ids = part$test)
p
```

See more details about `BART`'s parameters on the online [documentation](https://mlr3extralearners.mlr-org.com/reference/mlr_learners_surv.bart.html).

### distr

What kind of object is the predicted `distr`?
```{r}
p$distr
```

:::{.callout-tip}
## Arrdist dimensions:

1. Patients (observations)
2. Time points (months)
3. Number of posterior draws
:::

Actually the `$distr` is an active [R6](https://r6.r-lib.org/index.html) field - this means that some computation is required to create it.
What the prediction object actually stores internally is a 3d survival array (can be used directly with no performance overhead):
```{r}
dim(p$data$distr)
```

This is a more easy-to-understand and manipulate form of the full posterior survival matrix prediction from the `BART` package ([@Sparapani2021], pages 34-35).

:::{.callout-warning}
Though we have optimized with C++ code the way the `Arrdist` object is constructed, calling the `$distr` field can be computationally taxing if the product of the sizes of the 3 dimensions above **exceeds ~1 million**.
In our case, $23 \times 31 \times 50 = 35650$ so the conversion to an `Arrdist` via `$distr` will certainly not create performance issues.
:::

An example using the internal prediction data: get all the posterior probabilities of the 3rd patient in the test set, at 12 months (1 year):
```{r}
p$data$distr[3, 12, ]
```

Working with the `$distr` interface and `Arrdist` objects is very efficient as we will see later for predicting survival estimates.

:::{.callout-tip}
In survival analysis, $S(t) = 1 - F(t)$, where $S(t)$ the survival function and $F(t)$ the cumulative distribution function (cdf).
The latter can be interpreted as `risk` or probability of death up to time $t$.

We can verify the above from the prediction object:
```{r}
surv_array = 1 - distr6::gprm(p$distr, "cdf") # 3d array
testthat::expect_equal(p$data$distr, surv_array)
```
:::

### crank

`crank` is the **expected mortality** [@Sonabend2022] which is the sum of the predicted cumulative hazard function (as is done in random survival forest models).
Higher values denote larger risk.
To calculate `crank`, we need a survival matrix.
So we have to choose which 3rd dimension we should use from the predicted survival array.
This is what the `which.curve` parameter of the `learner` does:

```{r}
learner$param_set$get_values()$which.curve
```

The default value ($0.5$ quantile) is the **median survival probability**.
It could be any other quantile (e.g. $0.25$).
Other possible values for `which.curve` are `mean` or a number denoting the exact posterior draw to extract (e.g. the last one, `which.curve = 50`).

## Feature importance

Default score is the **observed count of each feature** in the trees (so the higher the score, the more important the feature):
```{r}
learner$param_set$values$importance
learner$importance()
```

## MCMC Diagnostics

`BART` uses internally MCMC (Markov Chain Monte Carlo) to sample from the posterior survival distribution.
We need to check that MCMC has converged, meaning that the chains have reached a stationary distribution that approximates the true posterior survival distribution (otherwise the predictions may be inaccurate, misleading and unreliable).

We use Geweke's convergence diagnostic test as it is implemented in the `BART` R package.
We choose 10 random patients from the train set to evaluate the MCMC convergence.
```{r}
#| label: diag-mcmc
#| fig-cap: "Geweke plot for MCMC diagnostics. Z-scores for the difference in the mean survival prediction between the first 10% and last 50% part of a Markov chain. The predictions are taken from 10 random patients in the train set. Red lines indicate the a = 0.05 critical line. Only a few z-scores exceed the 95% limits so we conclude that convergence has been attained."
#| fig-align: center

# predictions on the train set
p_train = learner$predict(task, row_ids = part$train)

# choose 10 patients from the train set randomly and make a list
ids = as.list(sample(length(part$train), 10))

z_list = lapply(ids, function(id) {
  # matrix with columns => time points and rows => posterior draws
  post_surv = 1 - t(distr6::gprm(p_train$distr[id], "cdf")[1,,])
  BART::gewekediag(post_surv)$z # get the z-scores
})

# plot the z scores vs time for all patients
dplyr::bind_rows(z_list) %>%
  tidyr::pivot_longer(cols = everything()) %>%
  mutate(name = as.numeric(name)) %>%
  ggplot(aes(x = name, y = value)) +
  geom_point() +
  labs(x = "Time (months)", y = "Z-scores") +
  # add critical values for a = 0.05
  geom_hline(yintercept = 1.96, linetype = 'dashed', color = "red") +
  geom_hline(yintercept = -1.96, linetype = 'dashed', color = "red") +
  theme_bw(base_size = 14)
```

## Performance (test set)

We will use the following survival metrics:

1. Integrated Brier Score (requires a survival distribution prediction - `distr`)
2. Right-Censored Log loss (requires a survival distribution prediction - `distr`)
3. Uno's C-index (requires a continuous ranking score prediction - `crank`)

For the first two measures we will use the ERV (**Explained Residual Variation**) version, which standardizes the scores against a Kaplan-Meier (KM) baseline [@Sonabend2022a].
This means that values close to $0$ represent performance similar to a KM model, negative values denote worse performance than KM and $1$ is the absolute best possible score.
```{r}
measures = list(
  msr("surv.graf", ERV = TRUE),
  msr("surv.rcll", ERV = TRUE),
  msr("surv.cindex", weight_meth = "G2", id = "surv.cindex.uno")
)

for (measure in measures) {
  print(p$score(measure, task = task, train_set = part$train))
}
```

:::{.callout-note}
All metrics use by default the **median survival distribution** from the 3d array, no matter what is the `which.curve` argument during the learner's construction.
:::

## Resampling

Performing resampling with the `BART` learner is very easy using `mlr3`.

We first stratify the data by `status`, so that in each resampling the proportion of censored vs un-censored patients remains the same:
```{r}
task$col_roles$stratum = 'status'
task$strata
```

```{r}
#| cache: true
rr = resample(task, learner, resampling = rsmp("cv", folds = 5), store_backends = TRUE)
```

No errors or warnings:
```{r}
rr$errors
rr$warnings
```

Performance in each fold:
```{r}
rr$score(measures)
```

Mean cross-validation performance:
```{r}
rr$aggregate(measures)
```

## Uncertainty Quantification in Survival Prediction

We will choose two patients from the test set and plot their survival prediction posterior estimates.

Let's choose the patients with the worst and the best survival time:
```{r}
death_times = p$truth[,1]
sort(death_times)

worst_indx = which(death_times == min(death_times))[1] # died first
best_indx  = which(death_times == max(death_times))[1] # died last

patient_ids = c(worst_indx, best_indx)
patient_ids # which patient IDs
death_times = death_times[patient_ids]
death_times # 1st is worst, 2nd is best
```

Subset `Arrdist` to only the above 2 patients:
```{r}
arrd = p$distr[patient_ids]
arrd
```

We choose time points (in months) for the survival estimates:
```{r}
months = seq(1, 36) # 1 month - 3 years
```

We use the `$distr` interface and the `$survival` property to get survival probabilities from an `Arrdist` object as well as the **quantile credible intervals** (CIs).
The median survival probabilities can be extracted as follows:
```{r}
med = arrd$survival(months) # 'med' for median

colnames(med) = paste0(patient_ids, "_med")
med = as_tibble(med) %>% add_column(month = months)
head(med)
```

We can briefly verify model's predictions: 1st patient survival probabilities on any month are lower (worst) compared to the 2nd patient.

Note that subsetting an `Arrdist` (3d array) creates a `Matdist` (2d matrix), for example we can explicitly get the median survival probabilities:
```{r}
matd_median = arrd[, 0.5] # median
head(matd_median$survival(months)) # same as with `arrd`
```

Using the `mean` posterior survival probabilities or the ones from the last posterior draw is also possible and can be done as follows:
```{r}
matd_mean = arrd[, "mean"] # mean (if needed)
head(matd_mean$survival(months))
matd_50draw = arrd[, 50] # the 50th posterior draw
head(matd_50draw$survival(months))
```

To get the CIs we will subset the `Arrdist` using a quantile number (0-1), which extracts a `Matdist` based on the cdf.
The survival function is 1 - cdf, so low and upper bounds are reversed:
```{r}
low  = arrd[, 0.975]$survival(months) # 2.5% bound
high = arrd[, 0.025]$survival(months) # 97.5% bound
colnames(low)  = paste0(patient_ids, "_low")
colnames(high) = paste0(patient_ids, "_high")
low  = as_tibble(low)
high = as_tibble(high)
```

The median posterior survival probabilities for the two patient of interest and the corresponding CI bounds in a tidy format are:
```{r}
surv_tbl =
  bind_cols(low, med, high) %>%
  pivot_longer(cols = !month, values_to = "surv",
    names_to = c("patient_id", ".value"), names_sep = "_") %>%
  relocate(patient_id)
surv_tbl
```

We draw survival curves with the uncertainty for the survival probability quantified:
```{r}
#| label: surv-with-uq
#| fig-cap: "Uncertainty quantification for the survival prediction of two patients in the test set using 95% credible intervals. The two vertical lines correspond to the reported time of death (in months) for the two patients."
#| fig-align: center
my_colors = c("#E41A1C", "#4DAF4A")
names(my_colors) = patient_ids

surv_tbl %>%
  ggplot(aes(x = month, y = med)) +
  geom_step(aes(color = patient_id), linewidth = 1) +
  xlab('Time (Months)') +
  ylab('Survival Probability') +
  geom_ribbon(aes(ymin = low, ymax = high, fill = patient_id),
    alpha = 0.3, show.legend = F) +
  geom_vline(xintercept = death_times[1], linetype = 'dashed', color = my_colors[1]) +
  geom_vline(xintercept = death_times[2], linetype = 'dashed', color = my_colors[2]) +
  theme_bw(base_size = 14) +
  scale_color_manual(values = my_colors) +
  scale_fill_manual(values = my_colors) +
  guides(color = guide_legend(title = "Patient ID"))
```

## Partial Dependence Plot

We will use a Partial Dependence Plot (PDP) [@Friedman2001] to visualize how much different are males vs females in terms of their average survival predictions across time.

:::{.callout-note}
PDPs assume that features are independent.
In our case we need to check that `sex` doesn't correlate with any of the other features used for training the `BART` learner.
Since `sex` is a categorical feature, we fit a linear model using as target variable every other feature in the data ($lm(feature \sim sex)$) and conduct an ANOVA (ANalysis Of VAriance) to get the variance explained or $R^2$.
The square root of that value is the correlation measure we want.
:::

```{r}
# code from https://christophm.github.io/interpretable-ml-book/ale.html
mycor = function(cnames, data) {
  x.num = data[, cnames[1], with = FALSE][[1]]
  x.cat = data[, cnames[2], with = FALSE][[1]]
  # R^2 = Cor(X, Y)^2 in simple linear regression
  sqrt(summary(lm(x.num ~ x.cat))$r.squared)
}

cnames = c("sex")
combs = expand.grid(y = setdiff(colnames(d), "sex"), x = cnames)
combs$cor = apply(combs, 1, mycor, data = task$data()) # use the train set
combs
```

`sex` doesn't correlate strongly with any other feature, so we can compute the PDP:
```{r}
# create two datasets: one with males and one with females
# all other features remain the same (use train data, 205 patients)
d = task$data(rows = part$train) # `rows = part$test` to use the test set

d$sex = 1
task_males = as_task_surv(d, time = 'time', event = 'status', id = 'lung-males')
d$sex = 0
task_females = as_task_surv(d, time = 'time', event = 'status', id = 'lung-females')

# make predictions
p_males   = learner$predict(task_males)
p_females = learner$predict(task_females)

# take the median posterior survival probability
surv_males   = p_males$distr$survival(months) # patients x times
surv_females = p_females$distr$survival(months) # patients x times

# tidy up data: average and quantiles across patients
data_males =
  apply(surv_males, 1, function(row) {
    tibble(
      low = quantile(row, probs = 0.025),
      avg = mean(row),
      high = quantile(row, probs = 0.975)
    )
  }) %>%
  bind_rows() %>%
  add_column(sex = 'male', month = months, .before = 1)

data_females =
  apply(surv_females, 1, function(row) {
    tibble(
      low = quantile(row, probs = 0.025),
      avg = mean(row),
      high = quantile(row, probs = 0.975)
    )
  }) %>%
  bind_rows() %>%
  add_column(sex = 'female', month = months, .before = 1)

pdp_tbl = bind_rows(data_males, data_females)
pdp_tbl
```

```{r}
#| label: surv-pdp
#| fig-cap: "Friedman’s partial dependence function with 95% prediction intervals: males vs females. Females show on average larger survival estimates compared to men, across all time points. Overlapping shaded area represents men and women that have similar survival characteristics."
#| fig-align: center

my_colors = c("#E41A1C", "#4DAF4A")
names(my_colors) = c('male', 'female')

pdp_tbl %>%
  ggplot(aes(x = month, y = avg)) +
  geom_step(aes(color = sex), linewidth = 1) +
  xlab('Time (Months)') +
  ylab('Survival Probability') +
  geom_ribbon(aes(ymin = low, ymax = high, fill = sex), alpha = 0.2, show.legend = F) +
  theme_bw(base_size = 14) +
  scale_color_manual(values = my_colors) +
  scale_fill_manual(values = my_colors)
```

## References
