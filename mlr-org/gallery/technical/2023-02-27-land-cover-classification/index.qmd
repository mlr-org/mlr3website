---
title: "Spatial Data in the mlr3 Ecosystem"
description: |
  Run a land cover classification of the city of Leipzig.
author:
  - name: Marc Becker
    orcid: 0000-0002-8115-0400
    url: https://github.com/be-marc
date: 2023-02-27
---

{{< include ../../_setup.qmd >}}

```{r 2023-01-23-mlr3spatial-001}
#| include: false

lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")
set.seed(0)
```

# Scope

Working with spatial data in R requires a lot of data wrangling e.g. reading from different file formats, converting between spatial formats, creating tables from point layers, and predicting spatial raster images.
The goal of `r ref_pkg("mlr3spatial")` is to simplify these workflows within the [mlr3 ecosystem](https://mlr-org.com/ecosystem.html).
As a practical example, we will perform a [land cover classification](https://en.wikipedia.org/wiki/Land_cover_maps) for the city of Leipzig, Germany.
@fig-flowchart illustrates the typical workflow for this type of task: Load the training data, create a spatial task, train a learner with it, and predict the final raster image.

```{mermaid}
%%| label: fig-flowchart
%%| fig-cap: "Spatial prediction workflow in mlr3spatial."
%%{ init: { 'flowchart': { 'curve': 'bump' } } }%%

flowchart LR
    subgraph files[Files]
    vector[Vector]
    raster[Raster]
    end
    subgraph load[Load Data]
    sf
    terra
    end
    vector --> sf
    raster --> terra
    subgraph train_model[Train Model]
    task[Task]
    learner[Learner]
    end
    terra --> prediction_raster
    task --> learner
    sf --> task
    subgraph predict[Spatial Prediction]
    prediction_raster[Raster Image]
    end
    learner --> prediction_raster
```

We assume that you are familiar with the [mlr3 ecosystem](https://mlr-org.com/ecosystem.html) and know the basic concepts of [remote sensing](https://en.wikipedia.org/wiki/Remote_sensing).
If not, we recommend reading the [mlr3book](https://mlr3book.mlr-org.com/) first.
If you are interested in spatial resampling, check out the book chapter on [spatial analysis](https://mlr3book.mlr-org.com/special.html#spatiotemporal).

# Land Cover Classification

[Land cover](https://en.wikipedia.org/wiki/Land_cover) is the physical material or vegetation that covers the surface of the earth, including both natural and human-made features.
Understanding land cover patterns and changes over time is critical for addressing global environmental challenges, such as climate change, land degradation, and loss of biodiversity.
Land cover classification is the process of assigning land cover classes to pixels in a raster image.
With mlr3spatial, we can easily perform a land cover classification within the mlr3 ecosystem.

Before we can start the land cover classification, we need to load the necessary packages.
The `r ref_pkg("mlr3spatial")` package relies on `r ref_pkg("terra")` for processing raster data and `r ref_pkg("sf")` for vector data.
These widely used packages read all common raster and vector formats.
Additionally, the `r ref_pkg("stars")` and `r ref_pkg("raster")` packages are supported.

```{r 2023-01-23-mlr3spatial-002}
#| message: false

library(mlr3verse)
library(mlr3spatial)
library(terra, exclude = "resample")
library(sf)
```

We will work with a Sentinel-2 scene of the city of Leipzig which consists of 7 bands with a 10 or 20m spatial resolution and an [NDVI](https://de.wikipedia.org/wiki/Normalized_Difference_Vegetation_Index) band.
The data is included in the `r ref_pkg("mlr3spatial")` package.
We use the `r ref("terra::rast()")` to load the TIFF raster file.

```{r 2023-01-23-mlr3spatial-003}
leipzig_raster = rast(system.file("extdata", "leipzig_raster.tif", package = "mlr3spatial"))
leipzig_raster
```

The training data is a GeoPackage point layer with land cover labels and spectral features.
We load the file and create a `r ref("sf::sf", "simple feature point layer")`.

```{r 2023-01-23-mlr3spatial-004}
leipzig_vector = read_sf(system.file("extdata", "leipzig_points.gpkg", package = "mlr3spatial"), stringsAsFactors = TRUE)
leipzig_vector
```

We plot both layers to get an overview of the data.
The training points are located in the districts of Lindenau and Zentrum West.

```{r 2023-01-23-mlr3spatial-005}
#| code-fold: true
#| fig-width: 8
#| fig-height: 8
library(ggplot2)
library(tidyterra, exclude = "filter")

ggplot() +
  geom_spatraster_rgb(data = leipzig_raster, r = 3, g = 2, b = 1, max_col_value = 5451) +
  geom_spatvector(data = leipzig_vector, aes(color = land_cover)) +
  scale_color_viridis_d(name = "Land cover", labels = c("Forest", "Pastures", "Urban", "Water")) +
  theme_minimal()
```

The `r ref("as_task_classif_st()")` function directly creates a spatial task from the point layer.
This makes it unnecessary to transform the point layer to a `data.frame` with coordinates.
Spatial tasks additionally store the coordinates of the training points.
The coordinates are useful when estimating the performance of the model with [spatial resampling](https://mlr3book.mlr-org.com/special.html#spatiotemp-cv).

```{r 2023-01-23-mlr3spatial-006}
task = as_task_classif_st(leipzig_vector, target = "land_cover")
task
```

Now we can train a model with the task.
We use a simple decision tree learner from the `r ref_pkg("rpart")` package.
The `"classif_st"` task is a specialization of the `"classif"` task and therefore works with all `"classif"` learners.

```{r 2023-01-23-mlr3spatial-007}
learner = lrn("classif.rpart")
learner$train(task)
```

To get a complete land cover classification of Leipzig, we have to predict on each pixel and return a raster image with these predictions.
The `$predict()` method of the learner only works for tabular data.
To predict a raster image, we use the `r ref("predict_spatial()")` function.

```{r 2023-01-23-mlr3spatial-008}
# predict land cover map
land_cover = predict_spatial(leipzig_raster, learner)
```

```{r 2023-01-23-mlr3spatial-009}
#| code-fold: true
#| fig-width: 8
#| fig-height: 8

ggplot() +
  geom_spatraster(data = land_cover) +
  scale_fill_viridis_d(name = "Land cover", labels = c("Forest", "Pastures", "Urban", "Water")) +
  theme_minimal()
```

# Conclusion

Working with spatial data in R is very easy with the `r ref_pkg("mlr3spatial")` package.
You can quickly train a model with a point layer and predict a raster image.
The `r ref_pkg("mlr3spatial")` package is still in development and we are looking forward to your feedback and contributions.
