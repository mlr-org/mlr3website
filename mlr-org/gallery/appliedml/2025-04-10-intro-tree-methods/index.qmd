---
title: Tree Methods
categories:
  - tree methods
author:
  - name: Giuseppe Casalicchio
  - name: Essential Data Science Training GmbH
    url: https://www.essentialds.de
description: |
  Use, plot and benchmark classification tree and random forest on german credit set.
date: 04-14-2025
params:
  showsolution: false
---

{{< include ../../_setup.qmd >}}


```{r, echo=FALSE}
show.solution = params$showsolution
if (show.solution) future::plan("sequential")
```

```{r, include=FALSE}
set.seed(123)
requireNamespace("kknn")
requireNamespace("mlr3learners")
library(kknn)
library(mlr3learners)
```

# Goal

The goal for this exercise is to familiarize yourself with two very important machine learning methods, the decision tree and random forest. After this exercise, you should be able to train these models and extract important information to understand the model internals.


# Exercises

## Fit a decision tree

Use `task = tsk("german_credit")` to create the classification task for the `german_credit` data and create a decision tree learner (e.g., a CART learner).
Train the decision tree on the `german_credit` classification task.
Look at the output of the trained decision tree (you have to access the raw model object).

<details>
<summary>**Hint 1:**</summary>

The learner we are focusing on here is a decision tree implemented in [`rpart`](https://cran.r-project.org/web/packages/rpart/). The corresponding `mlr3` learner key is `"classif.rpart"`. For this exercise, we use the learner with the default hyperparameters. The raw model object can be accessed from the `$model` slot of the trained learner.
</details>

<details>
<summary>**Hint 2:**</summary>

```{r, eval=FALSE}
library(mlr3)
task = tsk(...)
lrn_rpart = lrn(...) # create the learner
lrn_rpart$train(...) # train the learner on the task
lrn_rpart$... # access the raw model object that was fitted
```

</details>

:::{.content-hidden unless-meta="params.showsolution"}

:::{.callout-note collapse="true"}

### Solution

```{r, eval=show.solution}
library(mlr3)
task = tsk("german_credit")
lrn_rpart = lrn("classif.rpart")
lrn_rpart$train(task)
lrn_rpart$model
```

:::

:::

## Visualize the tree structure

To interpret the model and to gain more information about the decision making of predictions, we decide to take a closer look at the decision tree structure by visualizing it.

<details>
<summary>**Hint 1:**</summary>

See code example in the help page `?rpart::plot.rpart` which shows how to use the `plot` and `text` function to the  `rpart` model object.
Note that different packages exist to plot the decision tree structure in a visually more appealing way:

- The `rpart.plot` function from the equally named package `rpart.plot` which is applied on the raw `rpart` model object.
- The `plot.party` function from the package `partykit` which is applied to a `rpart` model object after converting it into a `party` model object using the `as.party` function.
- The `ggparty` function from the equally named package `ggparty` which is applied after converting the `rpart` model object into a `party` model object using the `as.party` function.

</details>

<details>
<summary>**Hint 2:**</summary>

```{r, eval=FALSE}
library("rpart")
...(lrn_rpart$...)
text(lrn_rpart$...)

# Alternative using e.g. the rpart.plot package
library("rpart.plot")
...(lrn_rpart$...)
```

</details>

:::{.content-hidden unless-meta="params.showsolution"}

:::{.callout-note collapse="true"}

### Solution

The possibility of visualizing a tree makes it interpretable and helps to understand how new predictions are calculated.

```{r, eval=show.solution}
library(rpart.plot)

rpart.plot(lrn_rpart$model)
```
__Note:__ Other functions to visualize an `rpart` tree are:

- The (very) basic `rpart` plot method:
```{r, fig.width=15, fig.height=15, out.width="100%", eval = show.solution}
plot(lrn_rpart$model)
text(lrn_rpart$model, use.n = TRUE)
```
- Convert the `rpart` object to a `party` object to automatically use the respective `plot()` method:
```{r, fig.width=15, fig.height=15, out.width="100%", eval = show.solution}
library(partykit)
partytree = as.party(lrn_rpart$model)
plot(partytree)
```

- Use [`ggparty`](https://cran.r-project.org/web/packages/ggparty/vignettes/ggparty-graphic-partying.html) to create highly customizable plots:
```{r, fig.width=15, fig.height=15, out.width="100%", eval = show.solution}
library(ggparty)

ggparty(partytree) +
  geom_edge() +
  geom_edge_label() +
  geom_node_splitvar() +
  # pass list to gglist containing all ggplot components we want to plot for each
  # (default: terminal) node
  geom_node_plot(gglist = list(geom_bar(aes_string(x = NA, fill = "credit_risk"),
    position = position_fill()), xlab("Credit Risk")))

```

:::

:::

## Fit a random forest

To get a more powerful learner we decide to also fit a random forest. Therefore, fit a random forest with default hyperparameters to the `german_credit` task.

<details>
<summary>Reminder</summary>

One of the drawbacks of using trees is the instability of the predictor. Small changes in the data may lead to a very different model and therefore a high variance of the predictions. The random forest takes advantages of that and reduces the variance by applying bagging to decision trees.

</details>

<details>
<summary>**Hint 1:**</summary>

Use the `mlr3` learner `classif.ranger` which uses the [`ranger`](https://cran.r-project.org/web/packages/ranger/index.html) implementation to train a random forest.

</details>

<details>
<summary>**Hint 2:**</summary>

```{r, eval=FALSE}
library(mlr3)
library(mlr3learners)

lrn_ranger = lrn(...) # create the learner
lrn_ranger$...(...) # train the learner on the task
```

</details>

:::{.content-hidden unless-meta="params.showsolution"}

:::{.callout-note collapse="true"}

### Solution

```{r, eval=show.solution}
library(mlr3)
library(mlr3learners)

lrn_ranger = lrn("classif.ranger")
lrn_ranger$train(task)
```

:::

:::

## ROC Analysis

The bank wants to use a tree-based model to predict the credit risk. Conduct a simple benchmark to assess if a decision tree or a random forest works better for these purposes. Specifically, the bank wants that among credit applications the system predicts to be "good", it can expect at most 10% to be "bad". Simultaneously, the bank aims at correctly classifying 90% or more of all applications that are "good". Visualize the benchmark results in a way that helps answer this question. Can the bank expect the model to fulfil their requirements? Which model performs better?

<details>
<summary>**Hint 1:**</summary>
A benchmark requires three arguments: a task, a list of learners, and a resampling object.
</details>

```{r, eval = !show.solution, echo = FALSE, results='asis'}
cat("<!--")
```

### Solution

<details>
<summary>**Click me**</summary>

```{r, eval = show.solution}
tree = lrn("classif.rpart", predict_type = "prob")
forest = lrn("classif.ranger", predict_type = "prob")

lrns = list(tree, forest)

cv5 = rsmp("cv", folds = 5)
cv5$instantiate(task)

bmr = benchmark(benchmark_grid(task, lrns, cv5))

mlr3viz::autoplot(bmr, type = "prc")
```

While the random forest dominates the decision tree, neither model can fulfil the bank's requirement of a precision and recall of >90%.

</details>

```{r, eval = !show.solution, echo = FALSE, results='asis'}
cat("-->")
```

## Understand hyperparameters

Use `task = tsk("german_credit")` to create the classification task for the `german_credit` data.
In this exercise, we want to fit decision trees and random forests with different hyperparameters (which can have a significant impact on the performance). Each learner implemented in `R` (e.g. `ranger` or `rpart`) has a lot of control settings that directly influence the model fitting (the so-called hyperparameters).
Here, we will consdider the hyperparameters `mtry` for the `ranger` learner and `maxdepth` for the `rpart` learner.

Your task is to manually create a list containing multiple `rpart` and `ranger` learners with different hyperparameter values (e.g., try out increasing `maxdepth` values for `rpart`).
In the next step, we will use this list to see how the model performance changes for different hyperparameter values.


- The help page of ranger (`?ranger`) gives a detailed explanation of the hyperparameters:

  > __`mtry`:__  Number of variables to possibly split at in each node. Default is the (rounded down) square root of the number variables. Alternatively, a single argument function returning an integer, given the number of independent variables.

  NOTE: In a `ranger` learner created with `mlr3`, you have the possibility to set `mtry.ratio` instead of `mtry` which allows you to set the fraction of variables to be used instead of having to set the number of variables.

- For `rpart`, we have to dig a bit deeper. Looking at `?rpart` contains no description about the hyperparameters. To get further information we have to open `?rpart.control`:

  > __`maxdepth`:__ Set the maximum depth of any node of the final tree, with the root node counted as depth 0. Values greater than 30 rpart will give nonsense results on 32-bit machines.


<details>
<summary>**Hint 1:**</summary>
The learners we are focusing on here is a decision tree implemented in [`rpart`](https://cran.r-project.org/web/packages/rpart/) and a random forest implemented in  [`ranger`](https://cran.r-project.org/web/packages/ranger/index.html). The corresponding `mlr3` learner key is `"classif.rpart"` and `"classif.ranger"`. 
In `mlr3`, we can get an overview about all hyperparameters in the `$param_set` slot. With a `mlr3` learner it is possible to get help about the underlying method by using the `$help()` method (e.g. `?lrn_ranger$help()`):
```{r, eval=FALSE}
lrn("classif.rpart")$help()
lrn("classif.ranger")$help()
```
If you are looking for a short description of the meaning of a hyperparameter, you need to look at the help page of the corresponding package that implements the learner, e.g. `?rpart::rpart.control` and `?ranger::ranger`.
</details>

<details>
<summary>**Hint 2:**</summary>
The possible choices for the hyperparameters can also be viewed with `$param_set`. Setting the hyperparameters can be done directly in the `lrn()` call:
```{r, eval=FALSE}
# Define a list of learners for the benchmark:
lrns = list(
  lrn("classif.rpart", ...),
  lrn("classif.rpart", ...),
  lrn("classif.rpart", ...),
  lrn("classif.ranger", ...),
  lrn("classif.ranger", ...),
  lrn("classif.ranger", ...))
```
</details>

:::{.content-hidden unless-meta="params.showsolution"}

:::{.callout-note collapse="true"}

### Solution

```{r, eval=show.solution}
library(mlr3verse)
set.seed(31415L)

task = mlr3::tsk("german_credit")

lrns = list(
  lrn("classif.rpart", maxdepth = 1),
  lrn("classif.rpart", maxdepth = 5),
  lrn("classif.rpart", maxdepth = 20),
  lrn("classif.ranger", mtry.ratio = 0.2),
  lrn("classif.ranger", mtry.ratio = 0.5),
  lrn("classif.ranger", mtry.ratio = 0.8))
```

:::

:::

## Comparison of trees and random forests

Does it make a difference w.r.t. model performance if we use different hyperparameters? Use the learners from the previous exercise and compare them in a benchmark. Use 5-fold cross-validation as resampling technique and the classification error as performance measure. Visualize the results of the benchmark.

<details>
<summary>**Hint 1:**</summary>
The function to conduct the benchmark is `benchmark` and requires to define the resampling with `rsmp` and the benchmark grid with `benchmark_grid`.
</details>

<details>
<summary>**Hint 2:**</summary>
```{r, eval=FALSE}
set.seed(31415L)

lrns = list(
  lrn("classif.rpart", maxdepth = 1),
  lrn("classif.rpart", maxdepth = 5),
  lrn("classif.rpart", maxdepth = 20),
  lrn("classif.ranger", mtry.ratio = 0.2),
  lrn("classif.ranger", mtry.ratio = 0.5),
  lrn("classif.ranger", mtry.ratio = 0.8))

cv5 = rsmp(..., folds = ...)
cv5$instantiate(...)

bmr = ...(...(task, lrns, cv5))

mlr3viz::autoplot(bmr, measure = msr("classif.ce"))
```
</details>

:::{.content-hidden unless-meta="params.showsolution"}

:::{.callout-note collapse="true"}

### Solution

```{r, eval=show.solution}
set.seed(31415L)

lrns = list(
  lrn("classif.rpart", id = "rpart_md1", maxdepth = 1, predict_type = "prob"),
  lrn("classif.rpart", id = "rpart_md5", maxdepth = 5, predict_type = "prob"),
  lrn("classif.rpart", id = "rpart_md20", maxdepth = 20, predict_type = "prob"),
  lrn("classif.ranger", id = "rf_mtryr0.2", mtry.ratio = 0.2, predict_type = "prob"),
  lrn("classif.ranger", id = "rf_mtryr0.5", mtry.ratio = 0.5, predict_type = "prob"),
  lrn("classif.ranger", id = "rf_mtry0.8", mtry.ratio = 0.8, predict_type = "prob"))

cv5 = rsmp("cv", folds = 5)
cv5$instantiate(task)

bmr = benchmark(benchmark_grid(task, lrns, cv5))

mlr3viz::autoplot(bmr, measure = msr("classif.ce"))
```
Looking at the boxplots reveals that the performance of the learners highly depends on the choice of the hyperparameters.

<br>

**Follow up question:** How to properly set the hyperparameters? Answer: Hyperparameter optimization (see next use case)

:::

:::

# Summary

- We learned how to use two of the most widely used learner for building a tree with `rpart` and a random forest with `ranger`.
- Finally, we looked at different hyperparameter and how they affect the performance in a benchmark.
- The next step would be to use an algorithm to automatically search for good hyperparameter configurations.

# Further information

__Tree implementations:__ One of the longest paragraphs in the [CRAN Task View about Machine Learning and Statistical Learning](https://cran.r-project.org/web/views/MachineLearning.html) gives an overview of existing tree implementations:

  > "[...] Tree-structured models for regression, classification and survival analysis, following the ideas in the CART book, are implemented in rpart (shipped with base R) and tree. Package rpart is recommended for computing CART-like trees. A rich toolbox of partitioning algorithms is available in Weka, package RWeka provides an interface to this implementation, including the J4.8-variant of C4.5 and M5. The Cubist package fits rule-based models (similar to trees) with linear regression models in the terminal leaves, instance-based corrections and boosting. The C50 package can fit C5.0 classification trees, rule-based models, and boosted versions of these. pre can fit rule-based models for a wider range of response variable types. [...]"

