---
title: "Default Hyperparameter Configuration"
description: |
  Run the default hyperparameter configuration of learners as a baseline.
categories:
  - tuning
  - classification
author:
  - name: Marc Becker
    url: https://github.com/be-marc
date: 2023-01-31
bibliography: bibliography.bib
knitr:
  opts_chunk:
    R.options:
      datatable.print.nrows: 10
      datatable.print.class: FALSE
      datatable.print.keys: FALSE
      datatable.print.trunc.cols: TRUE
image: cover.jpg
---

{{< include ../../_setup.qmd >}}

```{r 2023-01-31-default-configuration-001}
#| include: false
lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")
set.seed(0)
```

# Scope

The predictive performance of modern machine learning algorithms is highly dependent on the choice of their hyperparameter configuration.
Options for setting hyperparameters are tuning, manual selection by the user, and using the default configuration of the algorithm.
The default configurations are chosen to work with a wide range of data sets but they usually do not achieve the best predictive performance.
When tuning a learner in mlr3, we can run the default configuration as a baseline.
Seeing how well it performs will tell us whether tuning pays off.
If the optimized configurations perform worse, we could expand the search space or try a different optimization algorithm.
Of course, it could also be that tuning on the given data set is simply not worth it.

@probst_tunability_2019 studied the tunability of machine learning algorithms.
They found that the tunability of algorithms varies widely.
Algorithms like glmnet and XGBoost are highly tunable, while algorithms like random forests work well with their default configuration.
The highly tunable algorithms should thus beat their baselines more easily with optimized hyperparameters.
In this article, we will tune the hyperparameters of a random forest and compare the performance of the default configuration with the optimized configurations.

# Example

We tune the hyperparameters of the `r ref("mlr_learners_classif.ranger", "ranger learner")` on the `r ref("mlr_tasks_spam", "spam")` data set.
The search space is taken from @bischl_hyperparameter_2021.

```{r 2023-01-31-default-configuration-002}
#| message: false

library(mlr3verse)

learner = lrn("classif.ranger",
  mtry.ratio      = to_tune(0, 1),
  replace         = to_tune(),
  sample.fraction = to_tune(1e-1, 1),
  num.trees       = to_tune(1, 2000)
)
```

When creating the tuning instance, we set `evaluate_default = TRUE` to test the default hyperparameter configuration.
The default configuration is evaluated in the first batch of the tuning run.
The other batches use the specified tuning method.
In this example, they are randomly drawn configurations.

```{r 2023-01-31-default-configuration-003}
instance = tune(
  tuner = tnr("random_search", batch_size = 5),
  task = tsk("spam"),
  learner = learner,
  resampling = rsmp ("holdout"),
  measures = msr("classif.ce"),
  term_evals = 51,
  evaluate_default = TRUE
)
```

The default configuration is recorded in the first row of the archive.
The other rows contain the results of the random search.

```{r 2023-01-31-default-configuration-004}
as.data.table(instance$archive)[, .(batch_nr, mtry.ratio, replace, sample.fraction, num.trees, classif.ce)]
```

We plot the performances of the evaluated hyperparameter configurations.
The blue line connects the best configuration of each batch.
We see that the default configuration already performs well and the optimized configurations can not beat it.

```{r 2023-01-31-default-configuration-005}
library(mlr3viz)

autoplot(instance, type = "performance")
```

# Conlcusion

The time required to test the default configuration is negligible compared to the time required to run the hyperparameter optimization.
It gives us a valuable indication of whether our tuning is properly configured.
Running the default configuration as a baseline is a good practice that should be used in every tuning run.
