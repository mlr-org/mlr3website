---
sidebar: false
toc: false
---

# Terminators

{{< include _setup.qmd >}}

```{r}
#| include: false

library(bbotk)

lgr::get_logger("mlr3")$set_threshold("warn")
lgr::get_logger("bbotk")$set_threshold("warn")
```


```{r}
#| echo: false
#| column: page

content = as.data.table(mlr_terminators)[, .(key, label, properties, unit)]

ref_cell = function(value) {
  if (!length(value)) return(NULL)
  mlr3book::ref(sprintf("%s_%s", "mlr_terminators", value), text = value, format = "htmltools")
}

reactable(content, columns = list(
    key = colDef(name = "Key", cell = ref_cell),
    label = colDef(name = "Label"),
    properties = colDef(name = "Properties", cell = list_cell),
    unit = colDef(name = "Unit")
  ),
  searchable = TRUE,
  pagination = FALSE,
  highlight = TRUE
)
```

## Example Usage

Stop tuning when a `r ref("mlr_terminators_perf_reached", text = "performance level")` is reached.

```{r}
#| echo: true
#| eval: false
library(mlr3verse)

# load terminator and set performance level
terminator = trm("perf_reached", level = 0.25)

# load tuner
tuner = tnr("random_search", batch_size = 10)

# retrieve task
task = tsk("pima")

# load learner and set search space
learner = lts(lrn("classif.rpart"))

# set instance
instance = TuningInstanceSingleCrit$new(
  task = task,
  learner = learner,
  resampling = rsmp("holdout"),
  measure = msr("classif.ce"),
  terminator = terminator
)

# hyperparameter tuning on the pima data set
tuner$optimize(instance)

# best performing hyperparameter configuration
instance$result

# fit final model on complete data set
learner$param_set$values = instance$result_learner_param_vals
learner$train(task)

print(learner)
```
