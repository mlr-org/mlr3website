{
  "hash": "f08a9e58ce4e21000a598021f3b87679",
  "result": {
    "markdown": "---\ntitle: \"Most Popular Learners in mlr\"\nauthors: [\"Jabok Richter\"]\ndate: 2017-03-30\ncategories: [\"R\", \"r-bloggers\"]\ntags: [\"learner\", \"algorithm\", \"popular\", \"machine-learning\", \"rstats\"]\ndescription: \"An attempt to asses the popularity of mlr learners\"\n\n---\n\n\n\n\nFor the development of [mlr](https://github.com/mlr-org/mlr) as well as for an \"machine learning expert\" it can be handy to know what are the most popular learners used.\nNot necessarily to see, what are the top notch performing methods but to see what is used \"out there\" in the real world.\nThanks to the nice little package [cranlogs](https://github.com/metacran/cranlogs) from [metacran](https://www.r-pkg.org/) you can at least get a slight estimate as I will show in the following...\n\nFirst we need to install the `cranlogs` package using `devtools`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"metacran/cranlogs\")\n```\n:::\n\n\nNow let's load all the packages we will need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mlr)\nlibrary(stringi)\nlibrary(cranlogs)\nlibrary(data.table)\n```\n:::\n\n\nDo obtain a neat table of all available learners in _mlr_ we can call `listLearners()`.\nThis table also contains a column with the needed packages for each learner separated with a `,`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# obtain used packages for all learners\nlrns = as.data.table(listLearners())\nall.pkgs = stri_split(lrns$package, fixed = \",\")\n```\n:::\n\n\n_Note:_ You might get some warnings here because you likely did not install all packages that _mlr_ suggests -- which is totally fine.\n\nNow we can obtain the download counts from the _rstudio cran mirror_, i.e. from the last month.\nWe use `data.table` to easily sum up the download counts of each day.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall.downloads = cran_downloads(packages = unique(unlist(all.pkgs)),\n                               when = \"last-month\")\nall.downloads = as.data.table(all.downloads)\nmonthly.downloads = all.downloads[, list(monthly = sum(count)), by = package]\n```\n:::\n\n\nAs some learners need multiple packages we will use the download count of the package with the least downloads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrn.downloads = sapply(all.pkgs, function(pkgs) {\n  monthly.downloads[package %in% pkgs, min(monthly)]\n})\n```\n:::\n\n\nLet's put these numbers in our table:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrns$downloads = lrn.downloads\nlrns = lrns[order(downloads, decreasing = TRUE),]\nlrns[, .(class, name, package, downloads)]\n```\n:::\n\n\n_Here are the first 5 rows of the table:_\n\n\n::: {.cell-output-display}\n|class              |name                             |package | downloads|\n|:------------------|:--------------------------------|:-------|---------:|\n|classif.naiveBayes |Naive Bayes                      |e1071   |    397631|\n|classif.svm        |Support Vector Machines (libsvm) |e1071   |    397631|\n|regr.svm           |Support Vector Machines (libsvm) |e1071   |    397631|\n|classif.lda        |Linear Discriminant Analysis     |MASS    |    216972|\n|classif.qda        |Quadratic Discriminant Analysis  |MASS    |    216972|\n:::\n\n\nNow let's get rid of the duplicates introduced by the distinction of the type _classif_, _regr_ and we already have our...\n\n## Nearly final table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrns.small = lrns[, .SD[1,], by = .(name, package)]\nlrns.small[, .(class, name, package, downloads)]\n```\n:::\n\n\nThe top 20 according to the _rstudio cran mirror_:\n\n\n::: {.cell-output-display}\n|class                |name                                                                 |package      | downloads|\n|:--------------------|:--------------------------------------------------------------------|:------------|---------:|\n|classif.naiveBayes   |Naive Bayes                                                          |e1071        |    397631|\n|classif.svm          |Support Vector Machines (libsvm)                                     |e1071        |    397631|\n|classif.lda          |Linear Discriminant Analysis                                         |MASS         |    216972|\n|classif.qda          |Quadratic Discriminant Analysis                                      |MASS         |    216972|\n|surv.coxph           |Cox Proportional Hazard Model                                        |survival     |    130815|\n|classif.gausspr      |Gaussian Processes                                                   |kernlab      |    125247|\n|classif.ksvm         |Support Vector Machines                                              |kernlab      |    125247|\n|classif.lssvm        |Least Squares Support Vector Machine                                 |kernlab      |    125247|\n|cluster.kkmeans      |Kernel K-Means                                                       |kernlab      |    125247|\n|regr.rvm             |Relevance Vector Machine                                             |kernlab      |    125247|\n|classif.rpart        |Decision Tree                                                        |rpart        |    125115|\n|surv.rpart           |Survival Tree                                                        |rpart        |    125115|\n|classif.multinom     |Multinomial Regression                                               |nnet         |    114415|\n|classif.nnet         |Neural Network                                                       |nnet         |    114415|\n|classif.xgboost      |eXtreme Gradient Boosting                                            |xgboost      |    113005|\n|classif.randomForest |Random Forest                                                        |randomForest |    107515|\n|classif.cvglmnet     |GLM with Lasso or Elasticnet Regularization (Cross Validated Lambda) |glmnet       |     86675|\n|classif.glmnet       |GLM with Lasso or Elasticnet Regularization                          |glmnet       |     86675|\n|surv.cvglmnet        |GLM with Regularization (Cross Validated Lambda)                     |glmnet       |     86675|\n|surv.glmnet          |GLM with Regularization                                              |glmnet       |     86675|\n:::\n\n\nAs we are just looking for the packages let's compress the table a bit further and come to our...\n\n## Final table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlrns.pgks = lrns[,list(learners = paste(class, collapse = \",\")),\n                 by = .(package, downloads)]\nlrns.pgks\n```\n:::\n\n\n_Here are the first 20 rows of the table:_\n\n\n::: {.cell-output-display}\n|package      | downloads|learners                                                                                                                                                |\n|:------------|---------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------|\n|e1071        |    397631|classif.naiveBayes,classif.svm,regr.svm                                                                                                                 |\n|MASS         |    216972|classif.lda,classif.qda                                                                                                                                 |\n|survival     |    130815|surv.coxph                                                                                                                                              |\n|kernlab      |    125247|classif.gausspr,classif.ksvm,classif.lssvm,cluster.kkmeans,regr.gausspr,regr.ksvm,regr.rvm                                                              |\n|rpart        |    125115|classif.rpart,regr.rpart,surv.rpart                                                                                                                     |\n|nnet         |    114415|classif.multinom,classif.nnet,regr.nnet                                                                                                                 |\n|xgboost      |    113005|classif.xgboost,regr.xgboost                                                                                                                            |\n|randomForest |    107515|classif.randomForest,regr.randomForest                                                                                                                  |\n|glmnet       |     86675|classif.cvglmnet,classif.glmnet,regr.cvglmnet,regr.glmnet,surv.cvglmnet,surv.glmnet                                                                     |\n|FNN          |     81646|classif.fnn,regr.fnn                                                                                                                                    |\n|ranger       |     73349|classif.ranger,regr.ranger,surv.ranger                                                                                                                  |\n|e1071,clue   |     62029|cluster.cmeans                                                                                                                                          |\n|fpc          |     52138|cluster.dbscan                                                                                                                                          |\n|klaR         |     47903|classif.rda                                                                                                                                             |\n|gbm          |     41192|classif.gbm,regr.gbm,surv.gbm                                                                                                                           |\n|class        |     37732|classif.knn,classif.lvq1                                                                                                                                |\n|GPfit        |     37650|regr.GPfit                                                                                                                                              |\n|caret,pls    |     33495|classif.plsdaCaret                                                                                                                                      |\n|pls          |     33495|regr.pcr,regr.plsr                                                                                                                                      |\n|h2o          |     32922|classif.h2o.deeplearning,classif.h2o.gbm,classif.h2o.glm,classif.h2o.randomForest,regr.h2o.deeplearning,regr.h2o.gbm,regr.h2o.glm,regr.h2o.randomForest |\n:::\n\n\nAnd of course we want to have a small visualization:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(forcats)\nlrns.pgks$learners = factor(lrns.pgks$learners, lrns.pgks$learners)\ng = ggplot(lrns.pgks[20:1], aes(x = fct_inorder(stri_sub(\n  paste0(package,\": \",learners), 0, 64)), y = downloads, fill = downloads))\ng + geom_bar(stat = \"identity\") +\n  coord_flip() +\n  xlab(\"\") +\n  scale_fill_continuous(guide=FALSE)\n## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please\n## use `guide = \"none\"` instead.\n```\n\n::: {.cell-output-display}\n![](2017-03-30-mostpopularlearnersinmlr_files/figure-html/compressTablePlot-1.png){width=672}\n:::\n:::\n\n\n## Remarks\n\nThis is not really representative of how popular each learner is, as some packages have multiple purposes (e.g. multiple learners).\nFurthermore it would be great to have access to the [trending](https://www.r-pkg.org/trending) list.\nAlso [_most stars at GitHub_](https://www.r-pkg.org/starred) gives a better view of what the developers are interested in.\nLooking for machine learning packages we see there e.g: [xgboost](https://github.com/dmlc/xgboost), [h2o](https://github.com/h2oai/h2o-3) and [tensorflow](https://github.com/rstudio/tensorflow).\n",
    "supporting": [
      "2017-03-30-mostpopularlearnersinmlr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}