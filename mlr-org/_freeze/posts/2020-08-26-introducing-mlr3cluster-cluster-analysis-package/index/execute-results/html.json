{
  "hash": "2d3d4c3573840f21d1b4bc7914b7423e",
  "result": {
    "markdown": "---\ntitle: \"Introducing mlr3cluster: Cluster Analysis Package\"\ndescription: |\n  Tired of learning to use multiple packages to access clustering algorithms?\nauthor:\n  - name: Damir Pulatov\n    url: https://github.com/damirpolat\ndate: 2020-08-26\ncategories:\n    - R\n    - CRAN\nimage: ../../images/mlr3cluster.png\n---\n\n\nTired of learning to use multiple packages to access clustering algorithms?\n\nUsing different packages makes it difficult to compare the performance of clusterers?\n\nIt would be great to have just one package that makes interfacing all things clustering easy?\n\n[mlr3cluster](https://github.com/mlr-org/mlr3cluster) to the rescue!\n\nmlr3cluster is a cluster analysis extention package within the mlr3 ecosystem.\nIt is a successsor of mlr's cluster capabilities in spirit and functionality.\n\nIn order to understand the following introduction and tutorial you need to be familiar with R6 and mlr3 basics.\nSee chapters 1-2 of the [mlr3book](https://mlr3book.mlr-org.com/) if you need a refresher.\n\n## Installation\nTo install the package, run the following code chunk:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"mlr3cluster\")\n```\n:::\n\n\n## Getting Started\n\nAssuming you know all the basics and you've installed the package, here's an example on how to perform k-means clustering on a classic [usarrests](https://stat.ethz.ch/R-manual/R-patched/library/datasets/html/USArrests.html) data set:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3)\nlibrary(mlr3cluster)\n\ntask = mlr_tasks$get(\"usarrests\")\nlearner = mlr_learners$get(\"clust.kmeans\")\nlearner$train(task)\npreds = learner$predict(task = task)\n\npreds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PredictionClust> for 50 observations:\n    row_ids partition\n          1         2\n          2         2\n          3         2\n---                  \n         48         1\n         49         1\n         50         1\n```\n:::\n:::\n\n\n## Integrated Learners\n\nWhat built-in clusterers does the package come with?\nHere is a list of integrated learners:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmlr_learners$keys(\"clust\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"clust.agnes\"        \"clust.ap\"           \"clust.cmeans\"       \"clust.cobweb\"       \"clust.dbscan\"      \n [6] \"clust.diana\"        \"clust.em\"           \"clust.fanny\"        \"clust.featureless\"  \"clust.ff\"          \n[11] \"clust.hclust\"       \"clust.kkmeans\"      \"clust.kmeans\"       \"clust.MBatchKMeans\" \"clust.meanshift\"   \n[16] \"clust.pam\"          \"clust.SimpleKMeans\" \"clust.xmeans\"      \n```\n:::\n:::\n\n\nThe library contains all the basic types of clusterers: partitional, hierarchial, density-based and fuzzy.\nBelow is a detailed list of all the learners.\n\n| ID | Learner | Package |\n| :--| :------ | :------ |\n| [clust.agnes](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.agnes.html) | Agglomerative Hierarchical Clustering |  [cluster](https://CRAN.R-project.org/package=cluster) |\n| [clust.cmeans](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.cmeans.html) | Fuzzy C-Means Clustering |  [e1071](https://CRAN.R-project.org/package=e1071) |\n| [clust.dbscan](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.dbscan.html) | Density-based Clustering | [dbscan](https://CRAN.R-project.org/package=dbscan) |\n| [clust.diana](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.diana.html) | Divisive Hierarchical Clustering | [cluster](https://CRAN.R-project.org/package=cluster) |\n| [clust.fanny](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.fanny.html) | Fuzzy Clustering | [cluster](https://CRAN.R-project.org/package=cluster) |\n| [clust.featureless](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.featureless.html) | Simple Featureless Clustering | [mlr3cluster](https://github.com/mlr-org/mlr3cluster) |\n| [clust.kmeans](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.kmeans.html) | K-Means Clustering | [stats](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/stats-package.html) |\n| [clust.pam](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.pam.html) | Clustering Around Medoids | [cluster](https://CRAN.R-project.org/package=cluster) |\n| [clust.xmeans](https://mlr3cluster.mlr-org.com/reference/mlr_learners_clust.xmeans.html) | K-Means with Automatic Determination of k | [RWeka](https://CRAN.R-project.org/package=RWeka) |\n\n\n## Integrated Measures\n\nList of integrated cluster measures:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmlr_measures$keys(\"clust\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"clust.ch\"         \"clust.db\"         \"clust.dunn\"       \"clust.silhouette\" \"clust.wss\"       \n```\n:::\n:::\n\n\nBelow is a detailed list of all the integrated learners.\n\n| ID | Measure | Package |\n| :--| :------ | :------ |\n| [clust.db](https://mlr3cluster.mlr-org.com/reference/mlr_measures_clust.db.html) | Davies-Bouldin Cluster Separation | [clusterCrit](https://CRAN.R-project.org/package=clusterCrit) |\n| [clust.dunn](https://mlr3cluster.mlr-org.com/reference/mlr_measures_clust.dunn.html) | Dunn index | [clusterCrit](https://CRAN.R-project.org/package=clusterCrit) |\n| [clust.ch](https://mlr3cluster.mlr-org.com/reference/mlr_measures_clust.ch.html) | Calinski Harabasz Pseudo F-Statistic | [clusterCrit](https://CRAN.R-project.org/package=clusterCrit) |\n| [clust.silhouette](https://mlr3cluster.mlr-org.com/reference/mlr_measures_clust.silhouette.html) | Rousseeuw's Silhouette Quality Index | [clusterCrit](https://CRAN.R-project.org/package=clusterCrit) |\n\n\n## Integrated Tasks\n\nThere is only one built-in Task in the package:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmlr_tasks$get(\"usarrests\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClust:usarrests> (50 x 4): US Arrests\n* Target: -\n* Properties: -\n* Features (4):\n  - int (2): Assault, UrbanPop\n  - dbl (2): Murder, Rape\n```\n:::\n:::\n\n\nAs you can see, the biggest difference in clustering tasks as compared to the rest of the tasks in mlr3 is the absense of the Target column.\n\n\n## Hyperparameters\n\nSetting hyperparameters for clusterers is as easy as setting parameters for any other mlr3 learner:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = mlr_tasks$get(\"usarrests\")\nlearner = mlr_learners$get(\"clust.kmeans\")\nlearner$param_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n          id    class lower upper nlevels       default value\n1:   centers ParamUty    NA    NA     Inf             2     2\n2:  iter.max ParamInt     1   Inf     Inf            10      \n3: algorithm ParamFct    NA    NA       4 Hartigan-Wong      \n4:    nstart ParamInt     1   Inf     Inf             1      \n5:     trace ParamInt     0   Inf     Inf             0      \n```\n:::\n\n```{.r .cell-code}\nlearner$param_set$values = list(centers = 3L, algorithm = \"Lloyd\", iter.max = 100L)\n```\n:::\n\n\n\n## Train and Predict\nThe \"train\" method is simply creating a model with cluster assignments for data, while the \"predict\" method's functionality varies depending on the clusterer in question.\nRead the each learner's documentation for details.\n\nFor example, the `kmeans` learner's predict method uses `clue::cl_predict` which performs cluster assignments for new data by looking at the \"closest\" neighbors of the new observations.\n\nFollowing the example from the previous section:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = mlr_tasks$get(\"usarrests\")\ntrain_set = sample(task$nrow, 0.8 * task$nrow)\ntest_set = setdiff(seq_len(task$nrow), train_set)\n\nlearner = mlr_learners$get(\"clust.kmeans\")\nlearner$train(task, row_ids = train_set)\n\npreds = learner$predict(task, row_ids = test_set)\npreds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<PredictionClust> for 10 observations:\n    row_ids partition\n         13         2\n         14         1\n         15         1\n---                  \n         42         2\n         49         1\n         50         1\n```\n:::\n:::\n\n\n## Benchmarking and Evaluation\n\nTo assess the quality of any machine learning experiment, you need to choose an evaluation metric that makes the most sense.\nLet's design an experiment that will allow you to compare the performance of three different clusteres on the same task.\nThe mlr3 library provides benchmarking functionality that lets you create such experiments.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# design an experiment by specifying task(s), learner(s), resampling method(s)\ndesign = benchmark_grid(\n  tasks = tsk(\"usarrests\"),\n  learners = list(\n    lrn(\"clust.kmeans\", centers = 3L),\n    lrn(\"clust.pam\", k = 3L),\n    lrn(\"clust.cmeans\", centers = 3L)),\n  resamplings = rsmp(\"holdout\"))\nprint(design)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              task                  learner              resampling\n1: <TaskClust[46]> <LearnerClustKMeans[38]> <ResamplingHoldout[20]>\n2: <TaskClust[46]>    <LearnerClustPAM[38]> <ResamplingHoldout[20]>\n3: <TaskClust[46]> <LearnerClustCMeans[38]> <ResamplingHoldout[20]>\n```\n:::\n\n```{.r .cell-code}\n# execute benchmark\nbmr = benchmark(design)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nINFO  [06:44:44.464] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [06:44:44.555] [mlr3] Applying learner 'clust.kmeans' on task 'usarrests' (iter 1/1)\nINFO  [06:44:44.587] [mlr3] Applying learner 'clust.pam' on task 'usarrests' (iter 1/1)\nINFO  [06:44:44.609] [mlr3] Applying learner 'clust.cmeans' on task 'usarrests' (iter 1/1)\nINFO  [06:44:44.663] [mlr3] Finished benchmark\n```\n:::\n\n```{.r .cell-code}\n# define measure\nmeasures = list(msr(\"clust.silhouette\"))\n\nbmr$aggregate(measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   nr      resample_result   task_id   learner_id resampling_id iters clust.silhouette\n1:  1 <ResampleResult[21]> usarrests clust.kmeans       holdout     1        0.4650404\n2:  2 <ResampleResult[21]> usarrests    clust.pam       holdout     1        0.4650404\n3:  3 <ResampleResult[21]> usarrests clust.cmeans       holdout     1        0.4650404\n```\n:::\n:::\n\n\n\n## Visualization\n\nHow do you visualize clustering tasks and results?\nThe `mlr3viz` package (version >= 0.40) now provides that functionality.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"mlr3viz\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3viz)\n\ntask = mlr_tasks$get(\"usarrests\")\nlearner = mlr_learners$get(\"clust.kmeans\")\nlearner$param_set$values = list(centers = 3L)\nlearner$train(task)\npreds = learner$predict(task)\n\n# Task visualization\nautoplot(task)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Pairs plot with cluster assignments\nautoplot(preds, task)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Silhouette plot with mean silhouette value as reference line\nautoplot(preds, task, type = \"sil\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Performing PCA on task data and showing cluster assignments\nautoplot(preds, task, type = \"pca\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-4.png){fig-align='center' width=672}\n:::\n:::\n\n\nKeep in mind that `mlr3viz::autoplot` also provides more options depending on the kind of plots you're interested in.\nFor example, to draw borders around clusters, provide appropriate parameters from `ggfortify::autoplot.kmeans`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(preds, task, type = \"pca\", frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nYou can also easily visualize dendrograms:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = mlr_tasks$get(\"usarrests\")\nlearner = mlr_learners$get(\"clust.agnes\")\nlearner$train(task)\n\n# Simple dendrogram\nautoplot(learner)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# More advanced options from `factoextra::fviz_dend`\n# FIXME: https://github.com/mlr-org/mlr3viz/issues/104\n# autoplot(learner,\n#   k = learner$param_set$values$k, rect_fill = TRUE,\n#   rect = TRUE, rect_border = c(\"red\", \"cyan\"))\n```\n:::\n\n\n## Further Development\nIf you have any issues with the package or would like to request a new feature, feel free to open an issue [here](https://github.com/mlr-org/mlr3cluster/issues).\n\n## Acknowledgements\nI would like to thank the following people for their help and guidance: Michel Lang, Lars Kotthoff, Martin Binder, Patrick Schratz, Bernd Bischl.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}