{
  "hash": "ac844869c36462707f1ca5d0e57ccf45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Benchmarking Solution\ncategories:\n  - benchmarking\nauthor:\n  - name: Giuseppe Casalicchio\n  - name: Essential Data Science Training GmbH\n    url: https://www.essentialds.de\ndescription: |\n  Hyperparameter tuning and benchmarking on german credit task.\ndate: \"\"\nparams:\n  showsolution: true\n  base64encode: true\nlisting: false\nsearch: false\nformat:\n  html:\n    filters:\n      - ../../b64_solution.lua\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n```{=html}\n<script>\nconst correctHash = \"15568eed3554c82a02f68f0fe4660d10c19c909c7a950aa4f2fd0fd4eaedccc3\";   // value injected by knitr\n\n/* ---------- reusable helper ---------- */\nfunction b64DecodeUtf8(b64) {\n  // 1) atob  -> binary-string   (bytes 0…255)\n  // 2) map   -> Uint8Array      (array of bytes)\n  // 3) TextDecoder('utf-8')     -> real JS string\n  const bytes = Uint8Array.from(atob(b64), c => c.charCodeAt(0));\n  return new TextDecoder('utf-8').decode(bytes);\n}\n\nasync function sha256(txt) {\n  const buf = await crypto.subtle.digest('SHA-256',\n                 new TextEncoder().encode(txt));\n  return Array.from(new Uint8Array(buf))\n              .map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nasync function unlockOne(btn) {\n  const pass = prompt(\"Password:\");\n  if (!pass) return;\n  if (await sha256(pass) !== correctHash) {\n    alert(\"Wrong password\"); return;\n  }\n\n  /* --- decode only the solution that belongs to THIS button --- */\n  const wrapper = btn.parentElement;             // .b64-wrapper\n  wrapper.querySelectorAll('.hidden-solution').forEach(div => {\n    div.innerHTML = b64DecodeUtf8(div.dataset.encoded);\n    div.classList.remove('hidden-solution');\n    div.style.display = 'block';\n  });\n\n  /* Remove the button so the user can’t click it again */\n  btn.remove();\n}\n</script>\n\n<noscript>\n<div style=\"border: 1px solid #ccc; padding: 1em; margin-top: 1em; background: #f9f9f9;\">\n    <strong>JavaScript is required to unlock solutions.</strong><br>\n    Please enable JavaScript and reload the page,<br>\n    or download the source files from\n    <a href=\"https://github.com/mlr-org/mlr3website/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n    and run the code locally.\n  </div>\n</noscript>\n```\n\n\n\n\n\n# Goal\n\nWe will go beyond resampling single learners.\nWe will learn how to compare a large number of different models using benchmarking.\nIn this exercise, we will not show you how to tune a learner. \nInstead, we will compare identical learners with different hyperparameters that are set manually.\nIn particular, we will learn how to set up benchmarking instances in `mlr3`.\n\n# German Credit Data\n\nWe create the task as for the resampling exercise:\nAgain, we make us of our work horse:\nThe German Credit Data set.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\ntask = tsk(\"german_credit\")\nset.seed(20240801)\n```\n:::\n\n\n\n\n# Exercise: Benchmark multiple learners\n\nWe are going to compare a range of different KNN models with even $k$ values from 4 to 30.\nFurthermore, we want to assess the performance of a logistic regression.\n\n## Create the learners\n\nCreate a logistic regression learner and many KNN learners.\nYou should evaluate all KNN models with even $k$ values from 4 to 30 (i.e., every second $k$ value between 4 and 30).\nSave all learners in a list.\nGive the KNN learners an appropriate `id` that reflects their $k$.\n\n<details>\n  <summary>**Show Hint 1:**</summary>\n  Create a sequence from 4 to 30, e.g., using the `seq()` function.\n  Use the `lapply` function or a for-loop to create the list of learners with even $k$ values from 4 to 30.\n  Don't forget to also include the logistic regression learner in your list (the `append` function might be helpful here to extend a created list).\n  The `lrn` function has an argument `id` that can be used to change the name of the learner (here, you should give the KNN learners an appropriate `id` that reflects their value of $k$ to be able to distinguish the learners).\n  </details>\n  \n<details>\n  <summary>**Show Hint 2:**</summary>\n  To create a list of KNN learners, you can use this template:\n  `lapply(..., function(i) lrn(\"classif.kknn\", k = i, id = paste0(\"classif.knn\", i))`\n  </details>\n\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\" base64encode='true'}\n\n```{.r .cell-code}\nlog_reg = lrn(\"classif.log_reg\")\nkval = seq(from = 4, to = 30, by = 2)\nkval\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  4  6  8 10 12 14 16 18 20 22 24 26 28 30\n```\n\n\n:::\n\n```{.r .cell-code}\nknn = lapply(kval, function(i) lrn(\"classif.kknn\", k = i, id = paste0(\"classif.knn\", i)))\nlrns = append(log_reg, knn)\n```\n:::\n\n\n\n:::\n\n:::\n\n## Create the resampling\n\nCreate a 4-fold cross-validation resampling.\nCreate a list that only contains this resampling (this is needed later for the `benchmark_grid` function).\n\n<details>\n  <summary>**Show Hint:**</summary>\n  See the previous resampling use case.\n  </details>\n\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\" base64encode='true'}\n\n```{.r .cell-code}\ncv4 = rsmp(\"cv\", folds = 4)\n```\n:::\n\n\n\n:::\n\n:::\n\n## Create a benchmarking design\n\nTo design your benchmark experiment consisting of tasks, learners and resampling technique, you can use the `benchmark_grid` function from `mlr3`.\nHere, we will use only one task and one resampling technique but multiple learners.\nUse the previously created task (german credit), learners (the list of many KNN learners and a single logistic regression learner) and resampling (4 fold CV) as input.\n\n<details>\n  <summary>**Show Hint 1:**</summary>\n  Also make sure that the task is included in a list as the arguments of the `benchmark_grid` function requires lists as input.\n  </details>\n<details>\n  <summary>**Show Hint 2:**</summary>\n  `benchmark_grid(...)`\n  </details>\n\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\" base64encode='true'}\n\n```{.r .cell-code}\ndesign = benchmark_grid(task, lrns, cv4)\n```\n:::\n\n\n\n:::\n\n:::\n\n## Run the benchmark\n\nNow you still need to run all experiments specified in the design.\nDo so by using the `benchmark` function.\nThis may take some time.\n(Still less than a minute.)\nMake sure to store the benchmark in a new object called `bmr` as you will reuse and inspect the benchmark result in the subsequent exercises.\n\n<details>\n  <summary>**Show Hint 1:**</summary>\n  </details>\n\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\" base64encode='true'}\n\n```{.r .cell-code}\nbmr = benchmark(design)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nINFO  [16:44:30.753] [mlr3] Running benchmark with 60 resampling iterations\nINFO  [16:44:30.884] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 1/4)\nINFO  [16:44:31.001] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 2/4)\nINFO  [16:44:31.107] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 3/4)\nINFO  [16:44:31.212] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 4/4)\nINFO  [16:44:31.318] [mlr3] Applying learner 'classif.knn4' on task 'german_credit' (iter 1/4)\nINFO  [16:44:31.432] [mlr3] Applying learner 'classif.knn4' on task 'german_credit' (iter 2/4)\nINFO  [16:44:31.555] [mlr3] Applying learner 'classif.knn4' on task 'german_credit' (iter 3/4)\nINFO  [16:44:31.691] [mlr3] Applying learner 'classif.knn4' on task 'german_credit' (iter 4/4)\nINFO  [16:44:31.829] [mlr3] Applying learner 'classif.knn6' on task 'german_credit' (iter 1/4)\nINFO  [16:44:31.984] [mlr3] Applying learner 'classif.knn6' on task 'german_credit' (iter 2/4)\nINFO  [16:44:32.011] [mlr3] Applying learner 'classif.knn6' on task 'german_credit' (iter 3/4)\nINFO  [16:44:32.070] [mlr3] Applying learner 'classif.knn6' on task 'german_credit' (iter 4/4)\nINFO  [16:44:32.126] [mlr3] Applying learner 'classif.knn8' on task 'german_credit' (iter 1/4)\nINFO  [16:44:32.194] [mlr3] Applying learner 'classif.knn8' on task 'german_credit' (iter 2/4)\nINFO  [16:44:32.242] [mlr3] Applying learner 'classif.knn8' on task 'german_credit' (iter 3/4)\nINFO  [16:44:32.299] [mlr3] Applying learner 'classif.knn8' on task 'german_credit' (iter 4/4)\nINFO  [16:44:32.353] [mlr3] Applying learner 'classif.knn10' on task 'german_credit' (iter 1/4)\nINFO  [16:44:32.409] [mlr3] Applying learner 'classif.knn10' on task 'german_credit' (iter 2/4)\nINFO  [16:44:32.469] [mlr3] Applying learner 'classif.knn10' on task 'german_credit' (iter 3/4)\nINFO  [16:44:32.515] [mlr3] Applying learner 'classif.knn10' on task 'german_credit' (iter 4/4)\nINFO  [16:44:32.533] [mlr3] Applying learner 'classif.knn12' on task 'german_credit' (iter 1/4)\nINFO  [16:44:32.577] [mlr3] Applying learner 'classif.knn12' on task 'german_credit' (iter 2/4)\nINFO  [16:44:32.620] [mlr3] Applying learner 'classif.knn12' on task 'german_credit' (iter 3/4)\nINFO  [16:44:32.662] [mlr3] Applying learner 'classif.knn12' on task 'german_credit' (iter 4/4)\nINFO  [16:44:32.703] [mlr3] Applying learner 'classif.knn14' on task 'german_credit' (iter 1/4)\nINFO  [16:44:32.745] [mlr3] Applying learner 'classif.knn14' on task 'german_credit' (iter 2/4)\nINFO  [16:44:32.787] [mlr3] Applying learner 'classif.knn14' on task 'german_credit' (iter 3/4)\nINFO  [16:44:32.827] [mlr3] Applying learner 'classif.knn14' on task 'german_credit' (iter 4/4)\nINFO  [16:44:32.868] [mlr3] Applying learner 'classif.knn16' on task 'german_credit' (iter 1/4)\nINFO  [16:44:32.913] [mlr3] Applying learner 'classif.knn16' on task 'german_credit' (iter 2/4)\nINFO  [16:44:32.953] [mlr3] Applying learner 'classif.knn16' on task 'german_credit' (iter 3/4)\nINFO  [16:44:32.993] [mlr3] Applying learner 'classif.knn16' on task 'german_credit' (iter 4/4)\nINFO  [16:44:33.035] [mlr3] Applying learner 'classif.knn18' on task 'german_credit' (iter 1/4)\nINFO  [16:44:33.076] [mlr3] Applying learner 'classif.knn18' on task 'german_credit' (iter 2/4)\nINFO  [16:44:33.118] [mlr3] Applying learner 'classif.knn18' on task 'german_credit' (iter 3/4)\nINFO  [16:44:33.160] [mlr3] Applying learner 'classif.knn18' on task 'german_credit' (iter 4/4)\nINFO  [16:44:33.202] [mlr3] Applying learner 'classif.knn20' on task 'german_credit' (iter 1/4)\nINFO  [16:44:33.244] [mlr3] Applying learner 'classif.knn20' on task 'german_credit' (iter 2/4)\nINFO  [16:44:33.284] [mlr3] Applying learner 'classif.knn20' on task 'german_credit' (iter 3/4)\nINFO  [16:44:33.325] [mlr3] Applying learner 'classif.knn20' on task 'german_credit' (iter 4/4)\nINFO  [16:44:33.369] [mlr3] Applying learner 'classif.knn22' on task 'german_credit' (iter 1/4)\nINFO  [16:44:33.411] [mlr3] Applying learner 'classif.knn22' on task 'german_credit' (iter 2/4)\nINFO  [16:44:33.453] [mlr3] Applying learner 'classif.knn22' on task 'german_credit' (iter 3/4)\nINFO  [16:44:33.494] [mlr3] Applying learner 'classif.knn22' on task 'german_credit' (iter 4/4)\nINFO  [16:44:33.536] [mlr3] Applying learner 'classif.knn24' on task 'german_credit' (iter 1/4)\nINFO  [16:44:33.578] [mlr3] Applying learner 'classif.knn24' on task 'german_credit' (iter 2/4)\nINFO  [16:44:33.619] [mlr3] Applying learner 'classif.knn24' on task 'german_credit' (iter 3/4)\nINFO  [16:44:33.661] [mlr3] Applying learner 'classif.knn24' on task 'german_credit' (iter 4/4)\nINFO  [16:44:33.703] [mlr3] Applying learner 'classif.knn26' on task 'german_credit' (iter 1/4)\nINFO  [16:44:33.745] [mlr3] Applying learner 'classif.knn26' on task 'german_credit' (iter 2/4)\nINFO  [16:44:33.787] [mlr3] Applying learner 'classif.knn26' on task 'german_credit' (iter 3/4)\nINFO  [16:44:33.831] [mlr3] Applying learner 'classif.knn26' on task 'german_credit' (iter 4/4)\nINFO  [16:44:33.873] [mlr3] Applying learner 'classif.knn28' on task 'german_credit' (iter 1/4)\nINFO  [16:44:33.915] [mlr3] Applying learner 'classif.knn28' on task 'german_credit' (iter 2/4)\nINFO  [16:44:33.957] [mlr3] Applying learner 'classif.knn28' on task 'german_credit' (iter 3/4)\nINFO  [16:44:34.000] [mlr3] Applying learner 'classif.knn28' on task 'german_credit' (iter 4/4)\nINFO  [16:44:34.042] [mlr3] Applying learner 'classif.knn30' on task 'german_credit' (iter 1/4)\nINFO  [16:44:34.084] [mlr3] Applying learner 'classif.knn30' on task 'german_credit' (iter 2/4)\nINFO  [16:44:34.126] [mlr3] Applying learner 'classif.knn30' on task 'german_credit' (iter 3/4)\nINFO  [16:44:34.168] [mlr3] Applying learner 'classif.knn30' on task 'german_credit' (iter 4/4)\nINFO  [16:44:34.209] [mlr3] Finished benchmark\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n## Evaluate the benchmark\n\nChoose two appropriate metrics to evaluate the different learners performance on the task.\nCompute these metrics and also visualize at least one of them using the `autoplot` function.\n\n<details>\n  <summary>**Show Hint 1:**</summary>\n  The previously stored benchmark object has a method `$aggregate(...)` just like the objects created with the `resample` function from the previous use case.\n  </details>\n<details>\n  <summary>**Show Hint 2:**</summary>\n  `autoplot(..., measure = msr(...))`\n  </details>\n\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\" base64encode='true'}\n\n```{.r .cell-code}\nres = bmr$aggregate(measures = c(msr(\"classif.fp\"), msr(\"classif.acc\")))\nhead(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      nr       task_id      learner_id resampling_id iters classif.fp classif.acc\n   <int>        <char>          <char>        <char> <int>      <num>       <num>\n1:     1 german_credit classif.log_reg            cv     4      38.25       0.755\n2:     2 german_credit    classif.knn4            cv     4      46.75       0.673\n3:     3 german_credit    classif.knn6            cv     4      47.25       0.709\n4:     4 german_credit    classif.knn8            cv     4      48.00       0.716\n5:     5 german_credit   classif.knn10            cv     4      48.25       0.729\n6:     6 german_credit   classif.knn12            cv     4      49.75       0.732\nHidden columns: resample_result\n```\n\n\n:::\n\n```{.r .cell-code}\nautoplot(bmr, measure = msr(\"classif.acc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n:::\n\n:::\n\n## Interpret the results\n\nInterpret the plot.\nWhich $k$ seems to work well given the task?\nWould you prefer a logistic regression over a KNN learner?\n\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n$k$ around 22 seems to perform best (in terms of accuracy). \nA too small $k$ underfits, a large one overfits.\nNot knowing the true $k$, a logistic regression seems preferable.\nIf $k$ is too small, the average performance of the logistic regression is much better.\nIf $k$ is too large, the variance of the performance is much higher compared to the logistic regression.\nHowever, a KNN an optimal $k$ has a consistently high accuracy.\n\n:::\n\n:::\n\n# Extra: Parallelize your efforts\n\nBenchmarking is **embarassingly** parallel.\nThat means it is very easy to run the experiments of the benchmarking on different machines or cores.\nIn many cases (not all!), this can significantly speed up computation time.\nWe recommend to do this using the `future::plan` function when paralellizing `mlr3` benchmarks.\n\n<details>\n  <summary>**Show Hint 1:**</summary>\n  You need to use the `plan` function twice.\n  Once to set up a `multisession`, then go back to `parallel`.\n  </details>\n<details>\n  <summary>**Show Hint 2:**</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(future)\nplan(multisession)\n# your code                     \nplan(sequential)\n```\n:::\n\n\n  </details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load the packages\nlibrary(mlr3)\nlibrary(mlr3learners)\nlibrary(kknn)\nlibrary(future)\nlibrary(future.apply)\n\n# parallel plan\nplan(multisession)\nset.seed(100) # it is good practice to set a seed before \nbmr_par = benchmark(design)                     \nplan(sequential)\n```\n:::\n\n\n\n:::\n\n:::\n\n# Summary\n\nWe learnt how to set benchmark in `mlr3`.\nWhile we only looked at a single task and a single resampling, the procedure easily applies to more complex benchmarks with many tasks.\nAdditionally, we learnt how to understand benchmark results.\nLast but not least, you may have parallelized your benchmark if you still had some time left.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}