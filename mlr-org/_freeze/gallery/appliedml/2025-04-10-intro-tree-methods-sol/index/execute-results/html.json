{
  "hash": "e4b820508a24ef6a3c17d3def99faed8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Tree Methods Solution\ncategories:\n  - tree methods\nauthor:\n  - name: Giuseppe Casalicchio\n  - name: Essential Data Science Training GmbH\n    url: https://www.essentialds.de\ndescription: |\n  Use, plot and benchmark classification tree and random forest on german credit set.\ndate: \"\"\nparams:\n  showsolution: true\nlisting: false\nsearch: false\n---\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n# Goal\n\nThe goal for this exercise is to familiarize yourself with two very important machine learning methods, the decision tree and random forest. After this exercise, you should be able to train these models and extract important information to understand the model internals.\n\n\n# Exercises\n\n## Fit a decision tree\n\nUse `task = tsk(\"german_credit\")` to create the classification task for the `german_credit` data and create a decision tree learner (e.g., a CART learner).\nTrain the decision tree on the `german_credit` classification task.\nLook at the output of the trained decision tree (you have to access the raw model object).\n\n<details>\n<summary>**Hint 1:**</summary>\n\nThe learner we are focusing on here is a decision tree implemented in [`rpart`](https://cran.r-project.org/web/packages/rpart/). The corresponding `mlr3` learner key is `\"classif.rpart\"`. For this exercise, we use the learner with the default hyperparameters. The raw model object can be accessed from the `$model` slot of the trained learner.\n</details>\n\n<details>\n<summary>**Hint 2:**</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3)\ntask = tsk(...)\nlrn_rpart = lrn(...) # create the learner\nlrn_rpart$train(...) # train the learner on the task\nlrn_rpart$... # access the raw model object that was fitted\n```\n:::\n\n\n</details>\n\n:::{.content-hidden unless-meta=\"params.showsolution\"}\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3)\ntask = tsk(\"german_credit\")\nlrn_rpart = lrn(\"classif.rpart\")\nlrn_rpart$train(task)\nlrn_rpart$model\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nn= 1000 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n  1) root 1000 300 good (0.7000000 0.3000000)  \n    2) status=0<= ... < 200 DM,... >= 200 DM / salary for at least 1 year 457  60 good (0.8687090 0.1312910) *\n    3) status=no checking account,... < 0 DM 543 240 good (0.5580110 0.4419890)  \n      6) duration< 22.5 306 106 good (0.6535948 0.3464052)  \n       12) credit_history=no credits taken/all credits paid back duly,existing credits paid back duly till now,all credits at this bank paid back duly 278  85 good (0.6942446 0.3057554)  \n         24) amount< 7491.5 271  79 good (0.7084871 0.2915129)  \n           48) purpose=others,car (new),car (used),furniture/equipment,domestic appliances,vacation,retraining,business 256  69 good (0.7304688 0.2695312)  \n             96) duration< 11.5 73   9 good (0.8767123 0.1232877) *\n             97) duration>=11.5 183  60 good (0.6721311 0.3278689)  \n              194) amount>=1387.5 118  29 good (0.7542373 0.2457627) *\n              195) amount< 1387.5 65  31 good (0.5230769 0.4769231)  \n                390) property=unknown / no property,car or other 45  14 good (0.6888889 0.3111111) *\n                391) property=building soc. savings agr. / life insurance,real estate 20   3 bad (0.1500000 0.8500000) *\n           49) purpose=radio/television,repairs 15   5 bad (0.3333333 0.6666667) *\n         25) amount>=7491.5 7   1 bad (0.1428571 0.8571429) *\n       13) credit_history=delay in paying off in the past,critical account/other credits elsewhere 28   7 bad (0.2500000 0.7500000) *\n      7) duration>=22.5 237 103 bad (0.4345992 0.5654008)  \n       14) savings=500 <= ... < 1000 DM,... >= 1000 DM 41  12 good (0.7073171 0.2926829) *\n       15) savings=unknown/no savings account,... < 100 DM,100 <= ... < 500 DM 196  74 bad (0.3775510 0.6224490)  \n         30) duration< 47.5 160  69 bad (0.4312500 0.5687500)  \n           60) purpose=car (new) 23   6 good (0.7391304 0.2608696) *\n           61) purpose=others,car (used),furniture/equipment,domestic appliances,repairs,retraining,business 137  52 bad (0.3795620 0.6204380) *\n         31) duration>=47.5 36   5 bad (0.1388889 0.8611111) *\n```\n\n\n:::\n:::\n\n\n:::\n\n:::\n\n## Visualize the tree structure\n\nTo interpret the model and to gain more information about the decision making of predictions, we decide to take a closer look at the decision tree structure by visualizing it.\n\n<details>\n<summary>**Hint 1:**</summary>\n\nSee code example in the help page `?rpart::plot.rpart` which shows how to use the `plot` and `text` function to the  `rpart` model object.\nNote that different packages exist to plot the decision tree structure in a visually more appealing way:\n\n- The `rpart.plot` function from the equally named package `rpart.plot` which is applied on the raw `rpart` model object.\n- The `plot.party` function from the package `partykit` which is applied to a `rpart` model object after converting it into a `party` model object using the `as.party` function.\n- The `ggparty` function from the equally named package `ggparty` which is applied after converting the `rpart` model object into a `party` model object using the `as.party` function.\n\n</details>\n\n<details>\n<summary>**Hint 2:**</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(\"rpart\")\n...(lrn_rpart$...)\ntext(lrn_rpart$...)\n\n# Alternative using e.g. the rpart.plot package\nlibrary(\"rpart.plot\")\n...(lrn_rpart$...)\n```\n:::\n\n\n</details>\n\n:::{.content-hidden unless-meta=\"params.showsolution\"}\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\nThe possibility of visualizing a tree makes it interpretable and helps to understand how new predictions are calculated.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLade nötiges Paket: rpart\n```\n\n\n:::\n\n```{.r .cell-code}\nrpart.plot(lrn_rpart$model)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n:::\n\n__Note:__ Other functions to visualize an `rpart` tree are:\n\n- The (very) basic `rpart` plot method:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(lrn_rpart$model)\ntext(lrn_rpart$model, use.n = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=100%}\n:::\n:::\n\n- Convert the `rpart` object to a `party` object to automatically use the respective `plot()` method:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(partykit)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLade nötiges Paket: grid\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLade nötiges Paket: libcoin\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLade nötiges Paket: mvtnorm\n```\n\n\n:::\n\n```{.r .cell-code}\npartytree = as.party(lrn_rpart$model)\nplot(partytree)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n- Use [`ggparty`](https://cran.r-project.org/web/packages/ggparty/vignettes/ggparty-graphic-partying.html) to create highly customizable plots:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggparty)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLade nötiges Paket: ggplot2\n```\n\n\n:::\n\n```{.r .cell-code}\nggparty(partytree) +\n  geom_edge() +\n  geom_edge_label() +\n  geom_node_splitvar() +\n  # pass list to gglist containing all ggplot components we want to plot for each\n  # (default: terminal) node\n  geom_node_plot(gglist = list(geom_bar(aes_string(x = NA, fill = \"credit_risk\"),\n    position = position_fill()), xlab(\"Credit Risk\")))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n:::\n\n## Fit a random forest\n\nTo get a more powerful learner we decide to also fit a random forest. Therefore, fit a random forest with default hyperparameters to the `german_credit` task.\n\n<details>\n<summary>Reminder</summary>\n\nOne of the drawbacks of using trees is the instability of the predictor. Small changes in the data may lead to a very different model and therefore a high variance of the predictions. The random forest takes advantages of that and reduces the variance by applying bagging to decision trees.\n\n</details>\n\n<details>\n<summary>**Hint 1:**</summary>\n\nUse the `mlr3` learner `classif.ranger` which uses the [`ranger`](https://cran.r-project.org/web/packages/ranger/index.html) implementation to train a random forest.\n\n</details>\n\n<details>\n<summary>**Hint 2:**</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3)\nlibrary(mlr3learners)\n\nlrn_ranger = lrn(...) # create the learner\nlrn_ranger$...(...) # train the learner on the task\n```\n:::\n\n\n</details>\n\n:::{.content-hidden unless-meta=\"params.showsolution\"}\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3)\nlibrary(mlr3learners)\n\nlrn_ranger = lrn(\"classif.ranger\")\nlrn_ranger$train(task)\n```\n:::\n\n\n:::\n\n:::\n\n## ROC Analysis\n\nThe bank wants to use a tree-based model to predict the credit risk. Conduct a simple benchmark to assess if a decision tree or a random forest works better for these purposes. Specifically, the bank wants that among credit applications the system predicts to be \"good\", it can expect at most 10% to be \"bad\". Simultaneously, the bank aims at correctly classifying 90% or more of all applications that are \"good\". Visualize the benchmark results in a way that helps answer this question. Can the bank expect the model to fulfil their requirements? Which model performs better?\n\n<details>\n<summary>**Hint 1:**</summary>\nA benchmark requires three arguments: a task, a list of learners, and a resampling object.\n</details>\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n### Solution\n\n<details>\n<summary>**Click me**</summary>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntree = lrn(\"classif.rpart\", predict_type = \"prob\")\nforest = lrn(\"classif.ranger\", predict_type = \"prob\")\n\nlrns = list(tree, forest)\n\ncv5 = rsmp(\"cv\", folds = 5)\ncv5$instantiate(task)\n\nbmr = benchmark(benchmark_grid(task, lrns, cv5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nINFO  [17:35:13.865] [mlr3] Running benchmark with 10 resampling iterations\nINFO  [17:35:15.499] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 1/5)\nINFO  [17:35:16.588] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 2/5)\nINFO  [17:35:17.518] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 3/5)\nINFO  [17:35:18.466] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 4/5)\nINFO  [17:35:19.449] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 5/5)\nINFO  [17:35:20.385] [mlr3] Applying learner 'classif.ranger' on task 'german_credit' (iter 1/5)\nINFO  [17:35:21.443] [mlr3] Applying learner 'classif.ranger' on task 'german_credit' (iter 2/5)\nINFO  [17:35:22.642] [mlr3] Applying learner 'classif.ranger' on task 'german_credit' (iter 3/5)\nINFO  [17:35:23.358] [mlr3] Applying learner 'classif.ranger' on task 'german_credit' (iter 4/5)\nINFO  [17:35:24.146] [mlr3] Applying learner 'classif.ranger' on task 'german_credit' (iter 5/5)\nINFO  [17:35:26.155] [mlr3] Finished benchmark\n```\n\n\n:::\n\n```{.r .cell-code}\nmlr3viz::autoplot(bmr, type = \"prc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nWhile the random forest dominates the decision tree, neither model can fulfil the bank's requirement of a precision and recall of >90%.\n\n</details>\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Understand hyperparameters\n\nUse `task = tsk(\"german_credit\")` to create the classification task for the `german_credit` data.\nIn this exercise, we want to fit decision trees and random forests with different hyperparameters (which can have a significant impact on the performance). Each learner implemented in `R` (e.g. `ranger` or `rpart`) has a lot of control settings that directly influence the model fitting (the so-called hyperparameters).\nHere, we will consdider the hyperparameters `mtry` for the `ranger` learner and `maxdepth` for the `rpart` learner.\n\nYour task is to manually create a list containing multiple `rpart` and `ranger` learners with different hyperparameter values (e.g., try out increasing `maxdepth` values for `rpart`).\nIn the next step, we will use this list to see how the model performance changes for different hyperparameter values.\n\n\n- The help page of ranger (`?ranger`) gives a detailed explanation of the hyperparameters:\n\n  > __`mtry`:__  Number of variables to possibly split at in each node. Default is the (rounded down) square root of the number variables. Alternatively, a single argument function returning an integer, given the number of independent variables.\n\n  NOTE: In a `ranger` learner created with `mlr3`, you have the possibility to set `mtry.ratio` instead of `mtry` which allows you to set the fraction of variables to be used instead of having to set the number of variables.\n\n- For `rpart`, we have to dig a bit deeper. Looking at `?rpart` contains no description about the hyperparameters. To get further information we have to open `?rpart.control`:\n\n  > __`maxdepth`:__ Set the maximum depth of any node of the final tree, with the root node counted as depth 0. Values greater than 30 rpart will give nonsense results on 32-bit machines.\n\n\n<details>\n<summary>**Hint 1:**</summary>\nThe learners we are focusing on here is a decision tree implemented in [`rpart`](https://cran.r-project.org/web/packages/rpart/) and a random forest implemented in  [`ranger`](https://cran.r-project.org/web/packages/ranger/index.html). The corresponding `mlr3` learner key is `\"classif.rpart\"` and `\"classif.ranger\"`. \nIn `mlr3`, we can get an overview about all hyperparameters in the `$param_set` slot. With a `mlr3` learner it is possible to get help about the underlying method by using the `$help()` method (e.g. `?lrn_ranger$help()`):\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlrn(\"classif.rpart\")$help()\nlrn(\"classif.ranger\")$help()\n```\n:::\n\nIf you are looking for a short description of the meaning of a hyperparameter, you need to look at the help page of the corresponding package that implements the learner, e.g. `?rpart::rpart.control` and `?ranger::ranger`.\n</details>\n\n<details>\n<summary>**Hint 2:**</summary>\nThe possible choices for the hyperparameters can also be viewed with `$param_set`. Setting the hyperparameters can be done directly in the `lrn()` call:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define a list of learners for the benchmark:\nlrns = list(\n  lrn(\"classif.rpart\", ...),\n  lrn(\"classif.rpart\", ...),\n  lrn(\"classif.rpart\", ...),\n  lrn(\"classif.ranger\", ...),\n  lrn(\"classif.ranger\", ...),\n  lrn(\"classif.ranger\", ...))\n```\n:::\n\n</details>\n\n:::{.content-hidden unless-meta=\"params.showsolution\"}\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\nset.seed(31415L)\n\ntask = mlr3::tsk(\"german_credit\")\n\nlrns = list(\n  lrn(\"classif.rpart\", maxdepth = 1),\n  lrn(\"classif.rpart\", maxdepth = 5),\n  lrn(\"classif.rpart\", maxdepth = 20),\n  lrn(\"classif.ranger\", mtry.ratio = 0.2),\n  lrn(\"classif.ranger\", mtry.ratio = 0.5),\n  lrn(\"classif.ranger\", mtry.ratio = 0.8))\n```\n:::\n\n\n:::\n\n:::\n\n## Comparison of trees and random forests\n\nDoes it make a difference w.r.t. model performance if we use different hyperparameters? Use the learners from the previous exercise and compare them in a benchmark. Use 5-fold cross-validation as resampling technique and the classification error as performance measure. Visualize the results of the benchmark.\n\n<details>\n<summary>**Hint 1:**</summary>\nThe function to conduct the benchmark is `benchmark` and requires to define the resampling with `rsmp` and the benchmark grid with `benchmark_grid`.\n</details>\n\n<details>\n<summary>**Hint 2:**</summary>\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(31415L)\n\nlrns = list(\n  lrn(\"classif.rpart\", maxdepth = 1),\n  lrn(\"classif.rpart\", maxdepth = 5),\n  lrn(\"classif.rpart\", maxdepth = 20),\n  lrn(\"classif.ranger\", mtry.ratio = 0.2),\n  lrn(\"classif.ranger\", mtry.ratio = 0.5),\n  lrn(\"classif.ranger\", mtry.ratio = 0.8))\n\ncv5 = rsmp(..., folds = ...)\ncv5$instantiate(...)\n\nbmr = ...(...(task, lrns, cv5))\n\nmlr3viz::autoplot(bmr, measure = msr(\"classif.ce\"))\n```\n:::\n\n</details>\n\n:::{.content-hidden unless-meta=\"params.showsolution\"}\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(31415L)\n\nlrns = list(\n  lrn(\"classif.rpart\", id = \"rpart_md1\", maxdepth = 1, predict_type = \"prob\"),\n  lrn(\"classif.rpart\", id = \"rpart_md5\", maxdepth = 5, predict_type = \"prob\"),\n  lrn(\"classif.rpart\", id = \"rpart_md20\", maxdepth = 20, predict_type = \"prob\"),\n  lrn(\"classif.ranger\", id = \"rf_mtryr0.2\", mtry.ratio = 0.2, predict_type = \"prob\"),\n  lrn(\"classif.ranger\", id = \"rf_mtryr0.5\", mtry.ratio = 0.5, predict_type = \"prob\"),\n  lrn(\"classif.ranger\", id = \"rf_mtry0.8\", mtry.ratio = 0.8, predict_type = \"prob\"))\n\ncv5 = rsmp(\"cv\", folds = 5)\ncv5$instantiate(task)\n\nbmr = benchmark(benchmark_grid(task, lrns, cv5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nINFO  [17:35:29.685] [mlr3] Running benchmark with 30 resampling iterations\nINFO  [17:35:32.941] [mlr3] Applying learner 'rpart_md1' on task 'german_credit' (iter 1/5)\nINFO  [17:35:35.818] [mlr3] Applying learner 'rpart_md1' on task 'german_credit' (iter 2/5)\nINFO  [17:35:39.934] [mlr3] Applying learner 'rpart_md1' on task 'german_credit' (iter 3/5)\nINFO  [17:35:45.009] [mlr3] Applying learner 'rpart_md1' on task 'german_credit' (iter 4/5)\nINFO  [17:35:48.478] [mlr3] Applying learner 'rpart_md1' on task 'german_credit' (iter 5/5)\nINFO  [17:35:51.389] [mlr3] Applying learner 'rpart_md5' on task 'german_credit' (iter 1/5)\nINFO  [17:35:54.292] [mlr3] Applying learner 'rpart_md5' on task 'german_credit' (iter 2/5)\nINFO  [17:35:57.543] [mlr3] Applying learner 'rpart_md5' on task 'german_credit' (iter 3/5)\nINFO  [17:35:59.531] [mlr3] Applying learner 'rpart_md5' on task 'german_credit' (iter 4/5)\nINFO  [17:36:01.948] [mlr3] Applying learner 'rpart_md5' on task 'german_credit' (iter 5/5)\nINFO  [17:36:04.017] [mlr3] Applying learner 'rpart_md20' on task 'german_credit' (iter 1/5)\nINFO  [17:36:05.814] [mlr3] Applying learner 'rpart_md20' on task 'german_credit' (iter 2/5)\nINFO  [17:36:07.957] [mlr3] Applying learner 'rpart_md20' on task 'german_credit' (iter 3/5)\nINFO  [17:36:10.801] [mlr3] Applying learner 'rpart_md20' on task 'german_credit' (iter 4/5)\nINFO  [17:36:14.901] [mlr3] Applying learner 'rpart_md20' on task 'german_credit' (iter 5/5)\nINFO  [17:36:17.332] [mlr3] Applying learner 'rf_mtryr0.2' on task 'german_credit' (iter 1/5)\nINFO  [17:36:19.748] [mlr3] Applying learner 'rf_mtryr0.2' on task 'german_credit' (iter 2/5)\nINFO  [17:36:22.066] [mlr3] Applying learner 'rf_mtryr0.2' on task 'german_credit' (iter 3/5)\nINFO  [17:36:24.766] [mlr3] Applying learner 'rf_mtryr0.2' on task 'german_credit' (iter 4/5)\nINFO  [17:36:28.518] [mlr3] Applying learner 'rf_mtryr0.2' on task 'german_credit' (iter 5/5)\nINFO  [17:36:32.731] [mlr3] Applying learner 'rf_mtryr0.5' on task 'german_credit' (iter 1/5)\nINFO  [17:36:35.523] [mlr3] Applying learner 'rf_mtryr0.5' on task 'german_credit' (iter 2/5)\nINFO  [17:36:38.604] [mlr3] Applying learner 'rf_mtryr0.5' on task 'german_credit' (iter 3/5)\nINFO  [17:36:40.946] [mlr3] Applying learner 'rf_mtryr0.5' on task 'german_credit' (iter 4/5)\nINFO  [17:36:43.626] [mlr3] Applying learner 'rf_mtryr0.5' on task 'german_credit' (iter 5/5)\nINFO  [17:36:45.381] [mlr3] Applying learner 'rf_mtry0.8' on task 'german_credit' (iter 1/5)\nINFO  [17:36:47.171] [mlr3] Applying learner 'rf_mtry0.8' on task 'german_credit' (iter 2/5)\nINFO  [17:36:49.114] [mlr3] Applying learner 'rf_mtry0.8' on task 'german_credit' (iter 3/5)\nINFO  [17:36:51.011] [mlr3] Applying learner 'rf_mtry0.8' on task 'german_credit' (iter 4/5)\nINFO  [17:36:52.743] [mlr3] Applying learner 'rf_mtry0.8' on task 'german_credit' (iter 5/5)\nINFO  [17:36:53.592] [mlr3] Finished benchmark\n```\n\n\n:::\n\n```{.r .cell-code}\nmlr3viz::autoplot(bmr, measure = msr(\"classif.ce\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=672}\n:::\n:::\n\nLooking at the boxplots reveals that the performance of the learners highly depends on the choice of the hyperparameters.\n\n<br>\n\n**Follow up question:** How to properly set the hyperparameters? Answer: Hyperparameter optimization (see next use case)\n\n:::\n\n:::\n\n# Summary\n\n- We learned how to use two of the most widely used learner for building a tree with `rpart` and a random forest with `ranger`.\n- Finally, we looked at different hyperparameter and how they affect the performance in a benchmark.\n- The next step would be to use an algorithm to automatically search for good hyperparameter configurations.\n\n# Further information\n\n__Tree implementations:__ One of the longest paragraphs in the [CRAN Task View about Machine Learning and Statistical Learning](https://cran.r-project.org/web/views/MachineLearning.html) gives an overview of existing tree implementations:\n\n  > \"[...] Tree-structured models for regression, classification and survival analysis, following the ideas in the CART book, are implemented in rpart (shipped with base R) and tree. Package rpart is recommended for computing CART-like trees. A rich toolbox of partitioning algorithms is available in Weka, package RWeka provides an interface to this implementation, including the J4.8-variant of C4.5 and M5. The Cubist package fits rule-based models (similar to trees) with linear regression models in the terminal leaves, instance-based corrections and boosting. The C50 package can fit C5.0 classification trees, rule-based models, and boosted versions of these. pre can fit rule-based models for a wider range of response variable types. [...]\"\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}