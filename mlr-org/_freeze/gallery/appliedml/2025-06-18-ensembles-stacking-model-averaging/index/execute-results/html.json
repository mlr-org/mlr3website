{
  "hash": "63ccddd6abe1e28f9e6ba03066a8fa78",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Model Averaging\ngroup: Ensembles Stacking\ncategories:\n  - ensembles stacking\nauthor:\n  - name: Giuseppe Casalicchio\n  - name: Essential Data Science Training GmbH\n    url: https://www.essentialds.de\ndescription: |\n  Learn how to do ensembling and model averaging with `mlr3pipelines` and optimizing weights with `bbotk`.\ndate: \"\"\nparams:\n  showsolution: true\n  base64encode: true\nlisting: false\nsearch: false\nformat:\n  html:\n    filters:\n      - ../../b64_solution.lua\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n```{=html}\n<script>\nconst correctHash = \"ed033956021b7f9da58bde3cce21f3bd3fa5c5b5e37f2d6105d1238fb4df4680\";   // value injected by knitr\n\n/* ---------- reusable helper ---------- */\nfunction b64DecodeUtf8(b64) {\n  // 1) atob  -> binary-string   (bytes 0…255)\n  // 2) map   -> Uint8Array      (array of bytes)\n  // 3) TextDecoder('utf-8')     -> real JS string\n  const bytes = Uint8Array.from(atob(b64), c => c.charCodeAt(0));\n  return new TextDecoder('utf-8').decode(bytes);\n}\n\nasync function sha256(txt) {\n  const buf = await crypto.subtle.digest('SHA-256',\n                 new TextEncoder().encode(txt));\n  return Array.from(new Uint8Array(buf))\n              .map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nasync function unlockOne(btn) {\n  const pass = prompt(\"Password:\");\n  if (!pass) return;\n  if (await sha256(pass) !== correctHash) {\n    alert(\"Wrong password\"); return;\n  }\n\n  /* --- decode only the solution that belongs to THIS button --- */\n  const wrapper = btn.parentElement;             // .b64-wrapper\n  wrapper.querySelectorAll('.hidden-solution').forEach(div => {\n    div.innerHTML = b64DecodeUtf8(div.dataset.encoded);\n    div.classList.remove('hidden-solution');\n    div.style.display = 'block';\n  });\n\n  /* Remove the button so the user can’t click it again */\n  btn.remove();\n}\n</script>\n\n<noscript>\n<div style=\"border: 1px solid #ccc; padding: 1em; margin-top: 1em; background: #f9f9f9;\">\n    <strong>JavaScript is required to unlock solutions.</strong><br>\n    Please enable JavaScript and reload the page,<br>\n    or download the source files from\n    <a href=\"https://github.com/mlr-org/mlr3website/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n    and run the code locally.\n  </div>\n</noscript>\n```\n\n\n\n\n\n# Goal\n\nLearn how to do ensembling and model averaging with `mlr3pipelines` and optimizing weights with `bbotk`.\n\n# German Credit Data\n\n## Description\n\n- Data from 1973 to 1975 from a large regional bank in southern Germany classifying credits described by a set of attributes to good or bad credit risks.\n- Stratified sample of 1000 credits (300 bad ones and 700 good ones).\n- Customers with good credit risks perfectly complied with the conditions of the contract while customers with bad credit risks did not comply with the contract as required.\n- Available in `tsk(\"german_credit\")`.\n\n## Data Dictionary\n\nn = 1,000 observations of credits\n\n- `credit_risk`: Has the credit contract been complied with (good) or not (bad)?\n- `age`: Age of debtor in years\n- `amount`: Credit amount in DM\n- `credit_history`: History of compliance with previous or concurrent credit contracts\n- `duration`: Credit duration in months\n- `employment_duration`: Duration of debtor's employment with current employer\n- `foreign_worker`: Whether the debtor is a foreign worker\n- `housing`: Type of housing the debtor lives in\n- `installment_rate`: Credit installments as a percentage of debtor's disposable income\n- `job`: Quality of debtor's job\n- `number_credits`: Number of credits including the current one the debtor has (or had) at this bank\n- `other_debtors`: Whether there is another debtor or a guarantor for the credit\n- `other_installment_plans`: Installment plans from providers other than the credit-giving bank\n- `people_liable`: Number of persons who financially depend on the debtor\n- `personal_status_sex`: Combined information on sex and marital status\n- `present_residence`: Length of time (in years) the debtor lives in the present residence\n- `property`: The debtor's most valuable property\n- `purpose`: Purpose for which the credit is needed\n- `savings`: Debtor's saving\n- `status`: Status of the debtor's checking account with the bank\n- `telephone`: Whether there is a telephone landline registered on the debtor's name\n\n# Prerequisites\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3)\nlibrary(mlr3learners)\nlibrary(mlr3pipelines)\nlibrary(rpart.plot)\nlibrary(mlr3viz)\nlibrary(bbotk)\nlibrary(mlr3misc)\n\ntask = tsk(\"german_credit\")\n\nset.seed(2409)\n```\n:::\n\n\n\n# 1 Build a \"Random Forest\" From Scratch\n\n## 1.1 Create three Bagged Trees\n\n### 1.1.1 Create a Pipeline for Tree Fitting\n\nCreate a pipeline training a desicion tree with maximum depth of 3. Use 10-fold CV. Create subsamples of data, using the subsample `PipeOp`. This simulates Random Forest for later. Each tree sees a slightly different sample, similar to bagging.\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nresampling = rsmp(\"cv\", folds  = 10L)$instantiate(task)\npl = po(\"subsample\") %>>% po(\"learner\", learner = lrn(\"classif.rpart\", maxdepth = 3L))\npl$train(task)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$classif.rpart.output\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\npl$plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n:::\n\n:::\n\n### 1.1.2 Create three Bagged Trees\n\nUse the pipeline in 1.1.1 to create three bagged trees. Plot the graph learner representing your ensemble.\nPlot each of the 3 decision trees of the ensemble after training on all data.\n\n<details>\n  <summary>**Hint 1:**</summary>\n  You can `greplicate` (creates disjoint graph union of copies of a graph) this part three times to create an actual graph and combine the output of the decision trees via the classifavg `PipeOp`.\n  To plot the trees, the `rpart.plot` package is helpful.\n  If you are unsure how the different parts fit together, maybe plot the intermediate graphs you construct via `graph$plot()`.\n</details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Greplicate: The pipeline is reproduced 3x, to build a simple bagging structure\ngr = ppl(\"greplicate\", graph = pl, n = 3L)\ngr = gr %>>% po(\"classifavg\")  # average class prediction\n\n# Use as learner object\ngrl = as_learner(gr)\ngrl$id = \"bagged_trees\"\n\n# Train\ngrl$train(task)\n\n# Visualize pipeline\ngrl$plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Visualize three trees in pipeline\nrpart.plot(grl$state$model$classif.rpart_1$model)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nrpart.plot(grl$state$model$classif.rpart_2$model)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nrpart.plot(grl$state$model$classif.rpart_3$model)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-4.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n:::\n\n:::\n\n### 1.1.3 Comparision to Single Decision Tree and Random Forest\n\nCompare this to a single decision tree with a maximum depth of 3 trained on all data.\nWhat is missing to actually mimic a Random Forest?\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt = lrn(\"classif.rpart\", maxdepth = 3L)\ndt$id = \"tree\"\ndt$train(task)\nrpart.plot(dt$state$model)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nAlthough each of the 3 trees sees different data during training, the first split is the same as if we had trained on all data.\nIn an actual Random Forest, feature variables are randomly selected as potential splitting candidates which makes trees more heterogeneous.\n\n:::\n\n:::\n\n\n## 1.2 Reset Maximum Depth and compare to Random Forest\n\nReset the maximum depth hyperparameter values for each tree of your ensemble and the decision tree.\nProceed to benchmark the ensemble of three trees against the decision tree and an actual ranger Random Forest with 3, 10 and 100 trees.\nUse 10-fold CV to evaluate the ROC AUC of the models.\nAs a follow up question, would it make sense to change the weights used by the classifavg `PipeOp` to combine the predictions?\n\n<details>\n  <summary>**Hint 1:**</summary>\n  Prior lectures should be helpful where you already benchmarked different learners.\n</details>\n\n<details>\n  <summary>**Hint 2:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt$param_set$set_values(.values = list(maxdepth = NULL))\ngrl$...\n...\n\nranger3 = lrn(\"classif.ranger\", ...)\nranger3$id = \"rf_3\"\nranger10 = lrn(\"classif.ranger\", ...)\nranger10$id = \"rf_10\"\nranger100 = lrn(\"classif.ranger\", ...)\nranger100$id = \"rf_100\"\n\ngrl$predict_type = \"prob\"\n...\n\nbg = benchmark_grid(...)\nb = benchmark(...)\nautoplot(..., measure = ...)\n```\n:::\n\n\n</details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt$param_set$set_values(.values = list(maxdepth = NULL))\ngrl$param_set$set_values(.values = list(classif.rpart_1.maxdepth = NULL, classif.rpart_2.maxdepth = NULL, classif.rpart_3.maxdepth = NULL))\n\nranger3 = lrn(\"classif.ranger\", num.trees = 3L)\nranger3$id = \"rf_3\"\nranger10 = lrn(\"classif.ranger\", num.trees = 10L)\nranger10$id = \"rf_10\"\nranger100 = lrn(\"classif.ranger\", num.trees = 100L)\nranger100$id = \"rf_100\"\n\ngrl$predict_type = \"prob\"\ndt$predict_type = \"prob\"\nranger3$predict_type = \"prob\"\nranger10$predict_type = \"prob\"\nranger100$predict_type = \"prob\"\n\nbg = benchmark_grid(task, list(grl, dt, ranger3, ranger10, ranger100), resampling)\nb = benchmark(bg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nINFO  [10:07:30.111] [mlr3] Running benchmark with 50 resampling iterations\nINFO  [10:07:30.331] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 1/10)\nINFO  [10:07:30.545] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 2/10)\nINFO  [10:07:30.755] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 3/10)\nINFO  [10:07:30.960] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 4/10)\nINFO  [10:07:31.175] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 5/10)\nINFO  [10:07:31.382] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 6/10)\nINFO  [10:07:31.595] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 7/10)\nINFO  [10:07:31.806] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 8/10)\nINFO  [10:07:32.014] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 9/10)\nINFO  [10:07:32.228] [mlr3] Applying learner 'bagged_trees' on task 'german_credit' (iter 10/10)\nINFO  [10:07:32.333] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 1/10)\nINFO  [10:07:32.450] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 2/10)\nINFO  [10:07:32.555] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 3/10)\nINFO  [10:07:32.659] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 4/10)\nINFO  [10:07:32.765] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 5/10)\nINFO  [10:07:32.872] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 6/10)\nINFO  [10:07:32.974] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 7/10)\nINFO  [10:07:33.078] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 8/10)\nINFO  [10:07:33.181] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 9/10)\nINFO  [10:07:33.286] [mlr3] Applying learner 'tree' on task 'german_credit' (iter 10/10)\nINFO  [10:07:33.383] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 1/10)\nINFO  [10:07:33.491] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 2/10)\nINFO  [10:07:33.600] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 3/10)\nINFO  [10:07:33.712] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 4/10)\nINFO  [10:07:33.825] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 5/10)\nINFO  [10:07:33.942] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 6/10)\nINFO  [10:07:34.059] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 7/10)\nINFO  [10:07:34.168] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 8/10)\nINFO  [10:07:34.279] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 9/10)\nINFO  [10:07:34.394] [mlr3] Applying learner 'rf_3' on task 'german_credit' (iter 10/10)\nINFO  [10:07:34.507] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 1/10)\nINFO  [10:07:34.618] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 2/10)\nINFO  [10:07:34.725] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 3/10)\nINFO  [10:07:34.831] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 4/10)\nINFO  [10:07:34.933] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 5/10)\nINFO  [10:07:35.036] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 6/10)\nINFO  [10:07:35.145] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 7/10)\nINFO  [10:07:35.249] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 8/10)\nINFO  [10:07:35.350] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 9/10)\nINFO  [10:07:35.453] [mlr3] Applying learner 'rf_10' on task 'german_credit' (iter 10/10)\nINFO  [10:07:35.557] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 1/10)\nINFO  [10:07:35.666] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 2/10)\nINFO  [10:07:35.770] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 3/10)\nINFO  [10:07:35.895] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 4/10)\nINFO  [10:07:36.000] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 5/10)\nINFO  [10:07:36.089] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 6/10)\nINFO  [10:07:36.197] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 7/10)\nINFO  [10:07:36.302] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 8/10)\nINFO  [10:07:36.413] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 9/10)\nINFO  [10:07:36.526] [mlr3] Applying learner 'rf_100' on task 'german_credit' (iter 10/10)\nINFO  [10:07:36.568] [mlr3] Finished benchmark\n```\n\n\n:::\n\n```{.r .cell-code}\nautoplot(b, measure = msr(\"classif.auc\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nEnsemble of 3 trees maybe slightly better than a single tree.\\\\\nReal random forests with many trees much better.\\\\\nIf you have the time, maybe set the number of our tree ensemble higher and see how that compares.\n\n:::\n\n:::\n\n# 2 Model Averaging\n\n## 2.1 Ensemble Benchmark\n\nUse the classifavg `PipeOP` to combine the predictions of a decision tree, a k-NN (with k = 7) and a logistic regression.\nBenchmark the ensemble against each learner and a featureless learner.\nUse 10-fold CV evaluate the ROC AUC of the models.\nBy default classifavg uses equal weights to combine the predictions of the models.\n\n<details>\n  <summary>**Hint 1:**</summary>\n  If you are not familiar with a k-NN learner, you may catch up here: https://slds-lmu.github.io/i2ml/chapters/05_knn/\n  You can largely reuse parts of the graph learner you previously constructed (excluding the subsampling part).\n  To manually set a weight vector as a hyperparameter of the graph learner, inspect its `$param_set` and make use of the `$set_values()` function.\n</details>\n\n<details>\n  <summary>**Hint 2:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt = lrn(...)\ndt$predict_type = \"prob\"\nkknn = lrn(...)\nkknn$predict_type = \"prob\"\nlog_reg = lrn(...)\nlog_reg$predict_type = \"prob\"\nfeatureless = lrn(...)\nfeatureless$predict_type = \"prob\"\n\ngr = gunion() %>>% po(...)\ngrl = as_learner(gr)\n\nbg = benchmark_grid(...)\nb = benchmark(...)\nb$aggregate(...)\n```\n:::\n\n\n</details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndt = lrn(\"classif.rpart\")\ndt$predict_type = \"prob\"\nkknn = lrn(\"classif.kknn\", k = 7L)\nkknn$predict_type = \"prob\"\nlog_reg = lrn(\"classif.log_reg\")\nlog_reg$predict_type = \"prob\"\nfeatureless = lrn(\"classif.featureless\")\nfeatureless$predict_type = \"prob\"\n\ngr = gunion(list(dt, kknn, log_reg)) %>>% po(\"classifavg\")\ngrl = as_learner(gr)\n\nbg = benchmark_grid(task, list(grl, dt, kknn, log_reg, featureless), resampling)\nb = benchmark(bg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nINFO  [10:07:36.888] [mlr3] Running benchmark with 50 resampling iterations\nINFO  [10:07:36.975] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 1/10)\nINFO  [10:07:37.073] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 2/10)\nINFO  [10:07:37.173] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 3/10)\nINFO  [10:07:37.263] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 4/10)\nINFO  [10:07:37.353] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 5/10)\nINFO  [10:07:37.444] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 6/10)\nINFO  [10:07:37.535] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 7/10)\nINFO  [10:07:37.635] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 8/10)\nINFO  [10:07:37.778] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 9/10)\nINFO  [10:07:37.911] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 10/10)\nINFO  [10:07:38.016] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 1/10)\nINFO  [10:07:38.122] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 2/10)\nINFO  [10:07:38.225] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 3/10)\nINFO  [10:07:38.333] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 4/10)\nINFO  [10:07:38.450] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 5/10)\nINFO  [10:07:38.553] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 6/10)\nINFO  [10:07:38.654] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 7/10)\nINFO  [10:07:38.814] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 8/10)\nINFO  [10:07:38.861] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 9/10)\nINFO  [10:07:38.968] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 10/10)\nINFO  [10:07:39.082] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 1/10)\nINFO  [10:07:39.183] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 2/10)\nINFO  [10:07:39.283] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 3/10)\nINFO  [10:07:39.385] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 4/10)\nINFO  [10:07:39.485] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 5/10)\nINFO  [10:07:39.594] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 6/10)\nINFO  [10:07:39.715] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 7/10)\nINFO  [10:07:39.822] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 8/10)\nINFO  [10:07:39.920] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 9/10)\nINFO  [10:07:40.021] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 10/10)\nINFO  [10:07:40.122] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 1/10)\nINFO  [10:07:40.231] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 2/10)\nINFO  [10:07:40.345] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 3/10)\nINFO  [10:07:40.446] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 4/10)\nINFO  [10:07:40.547] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 5/10)\nINFO  [10:07:40.649] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 6/10)\nINFO  [10:07:40.749] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 7/10)\nINFO  [10:07:40.856] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 8/10)\nINFO  [10:07:40.968] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 9/10)\nINFO  [10:07:41.069] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 10/10)\nINFO  [10:07:41.172] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 1/10)\nINFO  [10:07:41.275] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 2/10)\nINFO  [10:07:41.376] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 3/10)\nINFO  [10:07:41.480] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 4/10)\nINFO  [10:07:41.592] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 5/10)\nINFO  [10:07:41.693] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 6/10)\nINFO  [10:07:41.794] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 7/10)\nINFO  [10:07:41.905] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 8/10)\nINFO  [10:07:42.009] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 9/10)\nINFO  [10:07:42.123] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 10/10)\nINFO  [10:07:42.129] [mlr3] Finished benchmark\n```\n\n\n:::\n\n```{.r .cell-code}\nb$aggregate(msr(\"classif.auc\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      nr       task_id                                            learner_id resampling_id iters classif.auc\n   <int>        <char>                                                <char>        <char> <int>       <num>\n1:     1 german_credit classif.rpart.classif.kknn.classif.log_reg.classifavg            cv    10   0.7873239\n2:     2 german_credit                                         classif.rpart            cv    10   0.7167840\n3:     3 german_credit                                          classif.kknn            cv    10   0.7251241\n4:     4 german_credit                                       classif.log_reg            cv    10   0.7808014\n5:     5 german_credit                                   classif.featureless            cv    10   0.5000000\nHidden columns: resample_result\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n## 2.2 Better weighting scheme\n\nCan you manually find a weighting scheme that results in better performance than equal weights?\n\n<details>\n  <summary>**Hint 1:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrl_weights_adjusted = grl$clone(deep = TRUE)\ngrl_weights_adjusted$param_set$set_values(...)\ngrl_weights_adjusted$id = paste0(grl_weights_adjusted$id, \".weights_adjusted\")\n\nbg = benchmark_grid(...)\nb = benchmark(...)\nb$aggregate(...)\n```\n:::\n\n\n</details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrl_weights_adjusted = grl$clone(deep = TRUE)\ngrl_weights_adjusted$param_set$set_values(.values = list(classifavg.weights = c(0.3, 0.1, 0.6)))\ngrl_weights_adjusted$id = paste0(grl_weights_adjusted$id, \".weights_adjusted\")\n\nbg = benchmark_grid(task, list(grl, grl_weights_adjusted, dt, kknn, log_reg, featureless), resampling)\nb = benchmark(bg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nINFO  [10:07:42.184] [mlr3] Running benchmark with 60 resampling iterations\nINFO  [10:07:42.273] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 1/10)\nINFO  [10:07:42.365] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 2/10)\nINFO  [10:07:42.460] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 3/10)\nINFO  [10:07:42.558] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 4/10)\nINFO  [10:07:42.658] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 5/10)\nINFO  [10:07:42.754] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 6/10)\nINFO  [10:07:42.847] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 7/10)\nINFO  [10:07:42.942] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 8/10)\nINFO  [10:07:43.034] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 9/10)\nINFO  [10:07:43.128] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg' on task 'german_credit' (iter 10/10)\nINFO  [10:07:43.244] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 1/10)\nINFO  [10:07:43.350] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 2/10)\nINFO  [10:07:43.456] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 3/10)\nINFO  [10:07:43.561] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 4/10)\nINFO  [10:07:43.666] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 5/10)\nINFO  [10:07:43.777] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 6/10)\nINFO  [10:07:43.892] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 7/10)\nINFO  [10:07:43.996] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 8/10)\nINFO  [10:07:44.103] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 9/10)\nINFO  [10:07:44.222] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted' on task 'german_credit' (iter 10/10)\nINFO  [10:07:44.331] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 1/10)\nINFO  [10:07:44.446] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 2/10)\nINFO  [10:07:44.551] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 3/10)\nINFO  [10:07:44.652] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 4/10)\nINFO  [10:07:44.755] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 5/10)\nINFO  [10:07:44.857] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 6/10)\nINFO  [10:07:44.967] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 7/10)\nINFO  [10:07:45.077] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 8/10)\nINFO  [10:07:45.186] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 9/10)\nINFO  [10:07:45.289] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 10/10)\nINFO  [10:07:45.396] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 1/10)\nINFO  [10:07:45.504] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 2/10)\nINFO  [10:07:45.617] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 3/10)\nINFO  [10:07:45.720] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 4/10)\nINFO  [10:07:45.821] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 5/10)\nINFO  [10:07:45.924] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 6/10)\nINFO  [10:07:46.029] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 7/10)\nINFO  [10:07:46.145] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 8/10)\nINFO  [10:07:46.249] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 9/10)\nINFO  [10:07:46.349] [mlr3] Applying learner 'classif.kknn' on task 'german_credit' (iter 10/10)\nINFO  [10:07:46.451] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 1/10)\nINFO  [10:07:46.554] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 2/10)\nINFO  [10:07:46.667] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 3/10)\nINFO  [10:07:46.771] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 4/10)\nINFO  [10:07:46.873] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 5/10)\nINFO  [10:07:46.975] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 6/10)\nINFO  [10:07:47.077] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 7/10)\nINFO  [10:07:47.190] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 8/10)\nINFO  [10:07:47.303] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 9/10)\nINFO  [10:07:47.405] [mlr3] Applying learner 'classif.log_reg' on task 'german_credit' (iter 10/10)\nINFO  [10:07:47.508] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 1/10)\nINFO  [10:07:47.611] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 2/10)\nINFO  [10:07:47.732] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 3/10)\nINFO  [10:07:47.842] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 4/10)\nINFO  [10:07:47.947] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 5/10)\nINFO  [10:07:48.050] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 6/10)\nINFO  [10:07:48.153] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 7/10)\nINFO  [10:07:48.255] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 8/10)\nINFO  [10:07:48.363] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 9/10)\nINFO  [10:07:48.481] [mlr3] Applying learner 'classif.featureless' on task 'german_credit' (iter 10/10)\nINFO  [10:07:48.489] [mlr3] Finished benchmark\n```\n\n\n:::\n\n```{.r .cell-code}\nb$aggregate(msr(\"classif.auc\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      nr       task_id                                                             learner_id resampling_id iters\n   <int>        <char>                                                                 <char>        <char> <int>\n1:     1 german_credit                  classif.rpart.classif.kknn.classif.log_reg.classifavg            cv    10\n2:     2 german_credit classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_adjusted            cv    10\n3:     3 german_credit                                                          classif.rpart            cv    10\n4:     4 german_credit                                                           classif.kknn            cv    10\n5:     5 german_credit                                                        classif.log_reg            cv    10\n6:     6 german_credit                                                    classif.featureless            cv    10\n   classif.auc\n         <num>\n1:   0.7873239\n2:   0.7930589\n3:   0.7167840\n4:   0.7251241\n5:   0.7808014\n6:   0.5000000\nHidden columns: resample_result\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n\n# 3 Optimizing Weights\n\nBuilding upon the previous exercise, we now want to numerically optimize the weights of the ensemble via `bbotk`.\nTo do so, we will have to construct an `OptimInstanceSingleCrit` in which we pass a domain, a search space, a codomain and the actual objective function that is optimized.\nFirst, we will implement a naive solution, by changing the weighting scheme in the objective function and evaluating the ensemble based on a resampling.\nNote that when we are optimizing three weights (one for each model), this is in essence a constrained optimization problem with only two degrees of freedom:\nGiven the first weight and the second weight and the constraint that all three weights must sum to 1, we can always calculate the third weight.\nWe will ignore this in the following and simply optimize each weight on a scale from 0 to 1 and will normalize all weights to sum to 1 within the objective.\n\nTo construct the `OptimInstanceSingleCrit` do the following:\n\n## 3.1 Objective Function\n\ncreate the `objective_function` (a standard R function) accepting `xs` (a list) as input:\n  - `xs` will be the weights in the form of a list\n  - extract the weights and use them within the ensemble (e.g., clone the graph learner from the previous exercise and set the `classifavg.weights`)\n  - use `resample` on  this weighted ensemble\n  - extract the ROC AUC and return it in a list\n\n<details>\n  <summary>**Hint 1:**</summary>\n  If you are not yet familiar with the `bbotk` package, a good starting point is: https://mlr3book.mlr-org.com/chapters/chapter5/advanced_tuning_methods_and_black_box_optimization.html#sec-black-box-optimization and \n  https://cran.r-project.org/web/packages/bbotk/vignettes/bbotk.html\n</details>\n\n<details>\n  <summary>**Hint 2:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrl_weights_optimized = grl$clone(deep = TRUE)\ngrl_weights_optimized$id = paste0(grl_weights_optimized$id, \".weights_optimized_naive\")\n\nobjective_function = function(xs) {\n  weights = unlist(xs)\n  weights = ...  # sum to 1 normalization\n  grl_weights_optimized$param_set$set_values(...)\n  rr = resample(...)\n  # returning the normalized weights as the second element in the list allows us to also store them in the archive\n  list(classif.auc = ..., weights = list(weights))\n```\n:::\n\n\n</details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrl_weights_optimized = grl$clone(deep = TRUE)\ngrl_weights_optimized$id = paste0(grl_weights_optimized$id, \".weights_optimized_naive\")\n\nobjective_function = function(xs) {\n  weights = unlist(xs)\n  weights = weights / sum(weights)  # sum to 1 normalization\n  grl_weights_optimized$param_set$set_values(.values = list(classifavg.weights = weights))\n  rr = resample(task, grl_weights_optimized, resampling)\n  # returning the normalized weights as the second element in the list allows us to also store them in the archive\n  list(classif.auc = rr$aggregate(msr(\"classif.auc\")), weights = list(weights))\n}\n```\n:::\n\n\n\n:::\n\n:::\n\n  \n## 3.2 Domain\n\ncreate the `domain` (the space we optimize over):\n  - we optimize over the three numeric weight parameters with values from 0 to 1 (have a look at `?p_dbl`) \n  \n<details>\n  <summary>**Hint 2:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndomain = ps(w_dt = ..., w_kknn = ..., w_log_reg = ...)\n```\n:::\n\n\n</details>\n  \n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndomain = ps(w_dt = p_dbl(0, 1), w_kknn = p_dbl(0, 1), w_log_reg = p_dbl(0, 1))\n```\n:::\n\n\n\n:::\n\n:::\n\n  \n## 3.3 Codomain\n\ncreate the codomain (describing the output space):\n  - we maximize the numeric ROC AUC value\n  - to make sure that we maximize instead of minimize (the `bbotk` default) set `tags = \"maximize\"`of this `p_dbl`\n  \n<details>\n  <summary>**Hint 2:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncodomain = ps(classif.auc = ...) # make sure to specify `tags = \"maximize\"`\n```\n:::\n\n\n</details>\n  \n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncodomain = ps(classif.auc = p_dbl(0.5, 1, tags = \"maximize\"))\n```\n:::\n\n\n\n:::\n\n:::\n  \n## 3.4 Collect everything\n\ncollect everything in an `OptimInstanceSingleCrit`\n \nUse random search as an optimizer and terminate after 10 function evaluations.\nWhy is our approach (i.e., how we constructed the objective function) ineffective?\n\n<details>\n  <summary>**Hint 2:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nobjective = ObjectiveRFun$new(\n  fun = ...,\n  domain = ...,\n  codomain = ...,\n  id = \"optimize_grl_weights_random\"\n)\n\ninstance = OptimInstanceSingleCrit$new(\n  objective = ...\n  terminator = trm(...)\n)\n\noptimizer = opt(...)\noptimizer$optimize(instance)\n```\n:::\n\n\n</details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nobjective = ObjectiveRFun$new(\n  fun = objective_function,\n  domain = domain,\n  codomain = codomain,\n  id = \"optimize_grl_weights_random\"\n)\n\ninstance = OptimInstanceSingleCrit$new(\n  objective = objective,\n  terminator = trm(\"evals\", n_evals = 10L)\n)\n\noptimizer = opt(\"random_search\")\noptimizer$optimize(instance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nINFO  [10:07:48.573] [bbotk] Starting to optimize 3 parameter(s) with '<OptimizerBatchRandomSearch>' and '<TerminatorEvals> [n_evals=10, k=0]'\nINFO  [10:07:48.588] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:48.701] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:48.788] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:48.875] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:48.963] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:49.059] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:49.162] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:49.252] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:49.340] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:49.429] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:49.526] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:49.615] [bbotk] Result of batch 1:\nINFO  [10:07:49.616] [bbotk]       w_dt    w_kknn w_log_reg classif.auc                       weights\nINFO  [10:07:49.616] [bbotk]  0.9676822 0.6021888  0.817521   0.7878119 0.4053303,0.2522371,0.3424327\nINFO  [10:07:49.619] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:49.714] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:49.807] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:49.909] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:49.997] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:50.084] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:50.173] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:50.267] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:50.360] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:50.457] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:50.546] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:50.634] [bbotk] Result of batch 2:\nINFO  [10:07:50.638] [bbotk]       w_dt   w_kknn  w_log_reg classif.auc                          weights\nINFO  [10:07:50.638] [bbotk]  0.7309947 0.732453 0.09553942   0.7666255 0.46889080,0.46982619,0.06128301\nINFO  [10:07:50.642] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:50.740] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:50.827] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:50.914] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:51.010] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:51.102] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:51.200] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:51.288] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:51.378] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:51.471] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:51.568] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:51.712] [bbotk] Result of batch 3:\nINFO  [10:07:51.712] [bbotk]        w_dt    w_kknn w_log_reg classif.auc                          weights\nINFO  [10:07:51.712] [bbotk]  0.02492932 0.4731491 0.3852529   0.7769659 0.02822194,0.53564171,0.43613636\nINFO  [10:07:51.716] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:51.815] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:51.913] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:52.002] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:52.090] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:52.178] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:52.272] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:52.373] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:52.463] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:52.552] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:52.642] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:52.723] [bbotk] Result of batch 4:\nINFO  [10:07:52.724] [bbotk]       w_dt   w_kknn w_log_reg classif.auc                       weights\nINFO  [10:07:52.724] [bbotk]  0.5364418 0.150984 0.1540817   0.7776001 0.6374771,0.1794209,0.1831020\nINFO  [10:07:52.727] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:52.821] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:52.911] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:53.005] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:53.102] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:53.191] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:53.281] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:53.376] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:53.472] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:53.566] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:53.655] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:53.745] [bbotk] Result of batch 5:\nINFO  [10:07:53.746] [bbotk]       w_dt    w_kknn w_log_reg classif.auc                       weights\nINFO  [10:07:53.746] [bbotk]  0.9951525 0.4051085 0.8315867   0.7883401 0.4458873,0.1815126,0.3726001\nINFO  [10:07:53.750] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:53.846] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:53.934] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:54.025] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:54.120] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:54.218] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:54.305] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:54.395] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:54.489] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:54.642] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:54.734] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:54.822] [bbotk] Result of batch 6:\nINFO  [10:07:54.823] [bbotk]       w_dt     w_kknn w_log_reg classif.auc                          weights\nINFO  [10:07:54.823] [bbotk]  0.3502183 0.03127641 0.7966631   0.7893751 0.29725922,0.02654688,0.67619390\nINFO  [10:07:54.829] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:54.925] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:55.011] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:55.101] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:55.196] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:55.296] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:55.384] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:55.473] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:55.579] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:55.684] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:55.780] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:55.869] [bbotk] Result of batch 7:\nINFO  [10:07:55.869] [bbotk]       w_dt    w_kknn  w_log_reg classif.auc                             weights\nINFO  [10:07:55.869] [bbotk]  0.9533896 0.9899181 0.01652102   0.7607099 0.486465778,0.505104394,0.008429827\nINFO  [10:07:55.873] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:55.991] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:56.082] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:56.181] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:56.269] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:56.356] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:56.461] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:56.559] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:56.659] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:56.748] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:56.837] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:56.931] [bbotk] Result of batch 8:\nINFO  [10:07:56.932] [bbotk]       w_dt     w_kknn w_log_reg classif.auc                          weights\nINFO  [10:07:56.932] [bbotk]  0.3876275 0.04194772  0.640114    0.789301 0.36237396,0.03921486,0.59841118\nINFO  [10:07:56.935] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:57.031] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:57.119] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:57.212] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:57.314] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:57.406] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:57.499] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:57.589] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:57.677] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:57.784] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:57.877] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:57.967] [bbotk] Result of batch 9:\nINFO  [10:07:57.967] [bbotk]       w_dt   w_kknn w_log_reg classif.auc                          weights\nINFO  [10:07:57.967] [bbotk]  0.7956371 0.158019 0.7656597   0.7888997 0.46276382,0.09190806,0.44532812\nINFO  [10:07:57.971] [bbotk] Evaluating 1 configuration(s)\nINFO  [10:07:58.083] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 1/10)\nINFO  [10:07:58.175] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 2/10)\nINFO  [10:07:58.273] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 3/10)\nINFO  [10:07:58.361] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 4/10)\nINFO  [10:07:58.450] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 5/10)\nINFO  [10:07:58.559] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 6/10)\nINFO  [10:07:58.652] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 7/10)\nINFO  [10:07:58.750] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 8/10)\nINFO  [10:07:58.839] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 9/10)\nINFO  [10:07:58.927] [mlr3] Applying learner 'classif.rpart.classif.kknn.classif.log_reg.classifavg.weights_optimized_naive' on task 'german_credit' (iter 10/10)\nINFO  [10:07:59.022] [bbotk] Result of batch 10:\nINFO  [10:07:59.022] [bbotk]       w_dt    w_kknn  w_log_reg classif.auc                          weights\nINFO  [10:07:59.022] [bbotk]  0.1364544 0.9705437 0.05015308   0.7447349 0.11792268,0.83873546,0.04334186\nINFO  [10:07:59.031] [bbotk] Finished optimizing after 10 evaluation(s)\nINFO  [10:07:59.031] [bbotk] Result:\nINFO  [10:07:59.032] [bbotk]       w_dt     w_kknn w_log_reg  x_domain classif.auc\nINFO  [10:07:59.032] [bbotk]      <num>      <num>     <num>    <list>       <num>\nINFO  [10:07:59.032] [bbotk]  0.3502183 0.03127641 0.7966631 <list[3]>   0.7893751\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        w_dt     w_kknn w_log_reg  x_domain classif.auc\n       <num>      <num>     <num>    <list>       <num>\n1: 0.3502183 0.03127641 0.7966631 <list[3]>   0.7893751\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance$result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        w_dt     w_kknn w_log_reg  x_domain classif.auc\n       <num>      <num>     <num>    <list>       <num>\n1: 0.3502183 0.03127641 0.7966631 <list[3]>   0.7893751\n```\n\n\n:::\n:::\n\n\n\nThis approach is inefficient because we use resampling in the objective function.\nThere is no need to always retrain and evaluate the learners because we only weight predictions differently and average them.\n\n:::\n\n:::\n\n# 4 Optimizing Weights Efficiently\nIn the previous exercise, we optimized the weights of our ensemble - but very inefficiently.\nIn this exercise we want to do better.\nRewrite the objective function to directly operate on the cross-validated predictions and combine the predicted probabilities directly as in model averaging.\nConstruct an `OptimInstanceSingleCrit` and optimize it via CMA-ES and terminate after 100 function evaluations.\n\nNote that you can reuse most logic from the previous exercise and the only interesting part is how to rewrite the objective function.\n\n<details>\n  <summary>**Hint 1:**</summary>\n  Store resampling results of each learner externally and use these results in the objective function.\n  For each fold weight the probability predictions and average them.\n  Then construct a new `PredictionClassif` which allows you to calculate the ROC AUC for each fold.\n  Finally, return the average ROC AUC over the folds.\n</details>\n\n<details>\n  <summary>**Hint 2:**</summary>\n \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nk = resampling$param_set$get_values()[[\"folds\"]]\n\ndt_pred = resample(...)\nkknn_pred = resample(...)\nlog_reg_pred = resample(...)\n\nobjective_function = function(xs) {\n  weights = unlist(xs)\n  weights = ... # sum to 1 normalization\n  aucs = map_dbl(seq_len(k), function(fold) {\n    dt_p = dt_pred$...\n    kknn_p = kknn_pred$...\n    log_reg_p = log_reg_pred$...\n    row_ids = dt_p$row_ids\n    stopifnot(all(row_ids == kknn_p$row_ids) && all(row_ids == log_reg_p$row_ids))\n    truth = dt_p$truth\n    weighted_probs = Reduce(\"+\", list(...))\n    weighted_response = ...\n    weighted_p = PredictionClassif$new(row_ids = row_ids, truth = truth, response = weighted_response, prob = weighted_probs)\n    weighted_p$score(...)\n  })\n  list(classif.auc = ..., weights = list(weights))\n}\n\ndomain = ps(...)\ncodomain = ps(...)\n\nobjective = ObjectiveRFun$new(\n  fun = objective_function,\n  domain = domain,\n  codomain = codomain,\n  id = \"optimize_grl_weights_cmaes\"\n)\n\ninstance = OptimInstanceSingleCrit$new(\n  objective = ...,\n  terminator = ...\n)\n\noptimizer = opt(...)\noptimizer$optimize(instance)\n```\n:::\n\n\n</details>\n\n:::{.callout-note collapse=\"true\"}\n\n### Solution\n\n:::{.b64-solution}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nk = resampling$param_set$get_values()[[\"folds\"]]\n\ndt_pred = resample(task, dt, resampling)\nkknn_pred = resample(task, kknn, resampling)\nlog_reg_pred = resample(task, log_reg, resampling)\n\nobjective_function = function(xs) {\n  weights = unlist(xs)\n  weights = weights / sum(weights)  # sum to 1 normalization\n  aucs = map_dbl(seq_len(k), function(fold) {\n    dt_p = dt_pred$predictions()[[fold]]\n    kknn_p = kknn_pred$predictions()[[fold]]\n    log_reg_p = log_reg_pred$predictions()[[fold]]\n    row_ids = dt_p$row_ids\n    stopifnot(all(row_ids == kknn_p$row_ids) && all(row_ids == log_reg_p$row_ids))\n    truth = dt_p$truth\n    weighted_probs = Reduce(\"+\", list(dt_p$prob * weights[1L], kknn_p$prob * weights[2L], log_reg_p$prob * weights[3L]))\n    weighted_response = colnames(weighted_probs)[apply(weighted_probs, MARGIN = 1L, FUN = which.max)]\n    weighted_p = PredictionClassif$new(row_ids = row_ids, truth = truth, response = weighted_response, prob = weighted_probs)\n    weighted_p$score(msr(\"classif.auc\"))\n  })\n  list(classif.auc = mean(aucs), weights = list(weights))\n}\n\ndomain = ps(w_dt = p_dbl(0, 1), w_kknn = p_dbl(0, 1), w_log_reg = p_dbl(0, 1))\ncodomain = ps(classif.auc = p_dbl(0.5, 1, tags = \"maximize\"))\n\nobjective = ObjectiveRFun$new(\n  fun = objective_function,\n  domain = domain,\n  codomain = codomain,\n  id = \"optimize_grl_weights_cmaes\"\n)\n\ninstance = OptimInstanceSingleCrit$new(\n  objective = objective,\n  terminator = trm(\"evals\", n_evals = 100L)\n)\n\noptimizer = opt(\"cmaes\")\noptimizer$optimize(instance)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance$result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        w_dt    w_kknn w_log_reg  x_domain classif.auc\n       <num>     <num>     <num>    <list>       <num>\n1: 0.4233903 0.1448298 0.7651782 <list[3]>   0.7937049\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n# Summary\n\nWe built a bagged ensemble of trees from scratch and compared its performance to a single tree and actual random forests with different numbers of trees.\nWe then performed model averaging of a decision tree, a k-NN and a logistic regression.\nChoosing weights manually is cumbersome so we optimized them both in a straightforward but inefficient and a slightly more demanding but efficient way.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}