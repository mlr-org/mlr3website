{
  "hash": "97921fee95772176eb89fe9a266dbff9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spatial Data in the mlr3 Ecosystem\"\ndescription: |\n  Run a land cover classification of the city of Leipzig.\nauthor:\n  - name: Marc Becker\n    orcid: 0000-0002-8115-0400\n    url: https://github.com/be-marc\ndate: 2023-02-27\nimage: cover.png\n---\n\n\n\n\n\n\n\n\n# Scope\n\nWorking with spatial data in R requires a lot of data wrangling e.g. reading from different file formats, converting between spatial formats, creating tables from point layers, and predicting spatial raster images.\nThe goal of [mlr3spatial](https://mlr3spatial.mlr-org.com) is to simplify these workflows within the [mlr3 ecosystem](https://mlr-org.com/ecosystem.html).\nAs a practical example, we will perform a [land cover classification](https://en.wikipedia.org/wiki/Land_cover_maps) for the city of Leipzig, Germany.\n@fig-flowchart illustrates the typical workflow for this type of task: Load the training data, create a spatial task, train a learner with it, and predict the final raster image.\n\n\n\n\n```{mermaid}\n%%| label: fig-flowchart\n%%| fig-cap: \"Spatial prediction workflow in mlr3spatial.\"\n%%{ init: { 'flowchart': { 'curve': 'bump' } } }%%\n\nflowchart LR\n    subgraph files[Files]\n    vector[Vector]\n    raster[Raster]\n    end\n    subgraph load[Load Data]\n    sf\n    terra\n    end\n    vector --> sf\n    raster --> terra\n    subgraph train_model[Train Model]\n    task[Task]\n    learner[Learner]\n    end\n    terra --> prediction_raster\n    task --> learner\n    sf --> task\n    subgraph predict[Spatial Prediction]\n    prediction_raster[Raster Image]\n    end\n    learner --> prediction_raster\n```\n\n\n\n\nWe assume that you are familiar with the [mlr3 ecosystem](https://mlr-org.com/ecosystem.html) and know the basic concepts of [remote sensing](https://en.wikipedia.org/wiki/Remote_sensing).\nIf not, we recommend reading the [mlr3book](https://mlr3book.mlr-org.com/) first.\nIf you are interested in spatial resampling, check out the book chapter on [spatial analysis](https://mlr3book.mlr-org.com/special.html#spatiotemporal).\n\n# Land Cover Classification\n\n[Land cover](https://en.wikipedia.org/wiki/Land_cover) is the physical material or vegetation that covers the surface of the earth, including both natural and human-made features.\nUnderstanding land cover patterns and changes over time is critical for addressing global environmental challenges, such as climate change, land degradation, and loss of biodiversity.\nLand cover classification is the process of assigning land cover classes to pixels in a raster image.\nWith mlr3spatial, we can easily perform a land cover classification within the mlr3 ecosystem.\n\nBefore we can start the land cover classification, we need to load the necessary packages.\nThe [mlr3spatial](https://mlr3spatial.mlr-org.com) package relies on [terra](https://cran.r-project.org/package=terra) for processing raster data and [sf](https://cran.r-project.org/package=sf) for vector data.\nThese widely used packages read all common raster and vector formats.\nAdditionally, the [stars](https://cran.r-project.org/package=stars) and [raster](https://cran.r-project.org/package=raster) packages are supported.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3)\nlibrary(mlr3spatial)\nlibrary(terra, exclude = \"resample\")\nlibrary(sf)\n```\n:::\n\n\n\n\nWe will work with a Sentinel-2 scene of the city of Leipzig which consists of 7 bands with a 10 or 20m spatial resolution and an [NDVI](https://de.wikipedia.org/wiki/Normalized_Difference_Vegetation_Index) band.\nThe data is included in the [mlr3spatial](https://mlr3spatial.mlr-org.com) package.\nWe use the [`terra::rast()`](https://www.rdocumentation.org/packages/terra/topics/rast) to load the TIFF raster file.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nleipzig_raster = rast(system.file(\"extdata\", \"leipzig_raster.tif\", package = \"mlr3spatial\"))\nleipzig_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 206, 154, 8  (nrow, ncol, nlyr)\nresolution  : 10, 10  (x, y)\nextent      : 731810, 733350, 5692030, 5694090  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 32N (EPSG:32632) \nsource      : leipzig_raster.tif \nnames       :  b02,  b03,  b04,  b06,  b07,  b08, ... \nmin values  :  846,  645,  366,  375,  401,  374, ... \nmax values  : 4705, 4880, 5451, 4330, 5162, 5749, ... \n```\n\n\n:::\n:::\n\n\n\n\nThe training data is a GeoPackage point layer with land cover labels and spectral features.\nWe load the file and create a [`simple feature point layer`](https://www.rdocumentation.org/packages/sf/topics/sf).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nleipzig_vector = read_sf(system.file(\"extdata\", \"leipzig_points.gpkg\", package = \"mlr3spatial\"), stringsAsFactors = TRUE)\nleipzig_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 97 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 731930.5 ymin: 5692136 xmax: 733220.3 ymax: 5693968\nProjected CRS: WGS 84 / UTM zone 32N\n# A tibble: 97 × 10\n     b02   b03   b04   b06   b07   b08   b11    ndvi land_cover               geom\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl> <fct>             <POINT [m]>\n 1   903   772   426  2998  4240  4029  1816  0.809  forest     (732480.1 5693957)\n 2  1270  1256  1081  1998  2493  2957  2073  0.465  urban      (732217.4 5692769)\n 3  1033   996   777  2117  2748  2799  1595  0.565  urban      (732737.2 5692469)\n 4   962   773   500   465   505   396   153 -0.116  water      (733169.3 5692777)\n 5  1576  1527  1626  1715  1745  1768  1980  0.0418 urban      (732202.2 5692644)\n 6  1125  1185   920  3058  3818  3758  2682  0.607  pasture      (732153 5693059)\n 7   880   746   424  2502  3500  3397  1469  0.778  forest     (731937.9 5693722)\n 8  1332  1251  1385  1663  1799  1640  1910  0.0843 urban      (732416.2 5692324)\n 9   940   741   475   452   515   400   139 -0.0857 water      (732933.7 5693344)\n10   902   802   454  2764  3821  3666  1567  0.780  forest     (732411.3 5693352)\n# ℹ 87 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWe plot both layers to get an overview of the data.\nThe training points are located in the districts of Lindenau and Zentrum West.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggplot2)\nlibrary(tidyterra, exclude = \"filter\")\n\nggplot() +\n  geom_spatraster_rgb(data = leipzig_raster, r = 3, g = 2, b = 1, max_col_value = 5451) +\n  geom_spatvector(data = leipzig_vector, aes(color = land_cover)) +\n  scale_color_viridis_d(name = \"Land cover\", labels = c(\"Forest\", \"Pastures\", \"Urban\", \"Water\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2023-01-23-mlr3spatial-005-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n\nThe [`as_task_classif_st()`](https://mlr3spatiotempcv.mlr-org.com/reference/as_task_classif_st.html) function directly creates a spatial task from the point layer.\nThis makes it unnecessary to transform the point layer to a `data.frame` with coordinates.\nSpatial tasks additionally store the coordinates of the training points.\nThe coordinates are useful when estimating the performance of the model with [spatial resampling](https://mlr3book.mlr-org.com/special.html#spatiotemp-cv).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = as_task_classif_st(leipzig_vector, target = \"land_cover\")\ntask\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<TaskClassifST:leipzig_vector> (97 x 9)\n* Target: land_cover\n* Properties: multiclass\n* Features (8):\n  - dbl (8): b02, b03, b04, b06, b07, b08, b11, ndvi\n* Coordinates:\n           X       Y\n       <num>   <num>\n 1: 732480.1 5693957\n 2: 732217.4 5692769\n 3: 732737.2 5692469\n 4: 733169.3 5692777\n 5: 732202.2 5692644\n---                 \n93: 733018.7 5692342\n94: 732551.4 5692887\n95: 732520.4 5692589\n96: 732542.2 5692204\n97: 732437.8 5692300\n```\n\n\n:::\n:::\n\n\n\n\nNow we can train a model with the task.\nWe use a simple decision tree learner from the [rpart](https://cran.r-project.org/package=rpart) package.\nThe `\"classif_st\"` task is a specialization of the `\"classif\"` task and therefore works with all `\"classif\"` learners.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner = lrn(\"classif.rpart\")\nlearner$train(task)\n```\n:::\n\n\n\n\nTo get a complete land cover classification of Leipzig, we have to predict on each pixel and return a raster image with these predictions.\nThe `$predict()` method of the learner only works for tabular data.\nTo predict a raster image, we use the [`predict_spatial()`](https://mlr3spatial.mlr-org.com/reference/predict_spatial.html) function.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# predict land cover map\nland_cover = predict_spatial(leipzig_raster, learner)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in warn_deprecated(\"DataBackend$data_formats\"): DataBackend$data_formats is deprecated and will be removed in\nthe future.\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot() +\n  geom_spatraster(data = land_cover) +\n  scale_fill_viridis_d(name = \"Land cover\", labels = c(\"Forest\", \"Pastures\", \"Urban\", \"Water\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2023-01-23-mlr3spatial-009-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n\n# Conclusion\n\nWorking with spatial data in R is very easy with the [mlr3spatial](https://mlr3spatial.mlr-org.com) package.\nYou can quickly train a model with a point layer and predict a raster image.\nThe [mlr3spatial](https://mlr3spatial.mlr-org.com) package is still in development and we are looking forward to your feedback and contributions.\n\n\n# Session Information\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsessioninfo::session_info(info = \"packages\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n═ Session info ═══════════════════════════════════════════════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n ! package        * version    date (UTC) lib source\n   backports        1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n   checkmate        2.3.2      2024-07-29 [1] CRAN (R 4.4.1)\n P class            7.3-22     2023-05-03 [?] CRAN (R 4.4.0)\n   classInt         0.4-10     2023-09-05 [1] CRAN (R 4.4.1)\n   cli              3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n P codetools        0.2-20     2024-03-31 [?] CRAN (R 4.4.0)\n   colorspace       2.1-1      2024-07-26 [1] CRAN (R 4.4.1)\n   crayon           1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n   data.table     * 1.16.2     2024-10-10 [1] CRAN (R 4.4.1)\n   DBI              1.2.3      2024-06-02 [1] CRAN (R 4.4.1)\n   digest           0.6.37     2024-08-19 [1] CRAN (R 4.4.1)\n   dplyr            1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n   e1071            1.7-14     2023-12-06 [1] CRAN (R 4.4.1)\n   evaluate         0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n   fansi            1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n   farver           2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n   fastmap          1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n   future           1.34.0     2024-07-29 [1] CRAN (R 4.4.1)\n   generics         0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n   ggplot2        * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n   globals          0.16.3     2024-03-08 [1] CRAN (R 4.4.1)\n   glue             1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n   gtable           0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n   htmltools        0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n   htmlwidgets      1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n   jsonlite         1.8.9      2024-09-20 [1] CRAN (R 4.4.1)\n P KernSmooth       2.23-24    2024-05-17 [?] CRAN (R 4.4.0)\n   knitr            1.48       2024-07-07 [1] CRAN (R 4.4.1)\n   lgr              0.4.4      2022-09-05 [1] CRAN (R 4.4.1)\n   lifecycle        1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n   listenv          0.9.1      2024-01-29 [1] CRAN (R 4.4.1)\n   magrittr         2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n   mlr3           * 0.21.0     2024-09-24 [1] CRAN (R 4.4.1)\n   mlr3misc         0.15.1     2024-06-24 [1] CRAN (R 4.4.1)\n   mlr3spatial    * 0.5.0      2024-03-09 [1] CRAN (R 4.4.1)\n   mlr3website    * 0.0.0.9000 2024-10-18 [1] Github (mlr-org/mlr3website@20d1ddf)\n   munsell          0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n   palmerpenguins   0.1.1      2022-08-15 [1] CRAN (R 4.4.1)\n   paradox          1.0.1      2024-07-09 [1] CRAN (R 4.4.1)\n   parallelly       1.38.0     2024-07-27 [1] CRAN (R 4.4.1)\n   pillar           1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n   pkgconfig        2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n   proxy            0.4-27     2022-06-09 [1] CRAN (R 4.4.1)\n   purrr            1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n   R6               2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n   Rcpp             1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n   renv             1.0.3      2023-09-19 [1] CRAN (R 4.4.1)\n   rlang            1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n   rmarkdown        2.28       2024-08-17 [1] CRAN (R 4.4.1)\n P rpart            4.1.23     2023-12-05 [?] CRAN (R 4.4.0)\n   scales           1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n   sessioninfo      1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n   sf             * 1.0-18     2024-10-11 [1] CRAN (R 4.4.1)\n   stringi          1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n   terra          * 1.7-83     2024-10-14 [1] CRAN (R 4.4.1)\n   tibble           3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n   tidyr            1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n   tidyselect       1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n   tidyterra      * 0.6.1      2024-06-08 [1] CRAN (R 4.4.1)\n   units            0.8-5      2023-11-28 [1] CRAN (R 4.4.1)\n   utf8             1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n   uuid             1.2-1      2024-07-29 [1] CRAN (R 4.4.1)\n   vctrs            0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n   viridisLite      0.4.2      2023-05-02 [1] CRAN (R 4.4.1)\n   withr            3.0.1      2024-07-31 [1] CRAN (R 4.4.1)\n   xfun             0.48       2024-10-03 [1] CRAN (R 4.4.1)\n   yaml             2.3.10     2024-07-26 [1] CRAN (R 4.4.1)\n\n [1] /home/marc/repositories/mlr3website/mlr-org/renv/library/R-4.4/x86_64-pc-linux-gnu\n [2] /home/marc/.cache/R/renv/sandbox/R-4.4/x86_64-pc-linux-gnu/9a444a72\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}