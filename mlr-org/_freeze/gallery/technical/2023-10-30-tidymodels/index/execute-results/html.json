{
  "hash": "0b2034938f71bfda726350419540856e",
  "result": {
    "markdown": "---\ntitle: \"Runtime Comparison of tidymodels and mlr3\"\ndescription: |\n  Benchmark the runtime of tidymodels and mlr3.\nauthor:\n  - name: Marc Becker\n    orcid: 0000-0002-8115-0400\n    url: https://github.com/be-marc\ndate: 2023-10-30\nbibliography: ../../bibliography.bib\n---\n\n\n\n\n\n\n# Scope\n\nIn this benchmark we compare the runtime of `mlr3` and `tidymodels` when training, resampling and tuning.\nWe use [`ranger::ranger()`](https://www.rdocumentation.org/packages/ranger/topics/ranger) and [`rpart::rpart`](https://www.rdocumentation.org/packages/rpart/topics/rpart) on the `sonar` task.\nThe runtimes are measured with `microbenchmark`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(microbenchmark)\n```\n:::\n\n\n# Benchmark\n\n## Train the Models\n\nWe load the learners.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# tidymodels\ntm_mod = decision_tree() %>%\n  set_engine(\"rpart\", xval = 0L) %>%\n  set_mode(\"classification\")\n\n# mlr3\nlearner = lrn(\"classif.rpart\", xval = 0L)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# tidymodels\ntm_mod = rand_forest(trees = 1000L) %>%\n  set_engine(\"ranger\", num.threads = 1L, seed = 1) %>%\n  set_mode(\"classification\")\n\n# mlr3\nlearner = lrn(\"classif.ranger\",\n  num.trees = 1000L,\n  num.threads = 1L,\n  seed = 1,\n  verbose = FALSE,\n  predict_type = \"prob\")\n```\n:::\n\n\n:::\n\nWe train the learner with `tidymodels`, `mlr3` and the base R call.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# tidymodels train\n\n\n# mlr3 train\nlearner$train(task)\n```\n:::\n\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n             expr      min   median      max\n       mlr3_train 21.47243 23.16795 35.55369\n tidymodels_train 16.68685 18.38326 29.87779\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n             expr      min   median      max\n       mlr3_train 244.2904 363.8350 406.8022\n tidymodels_train 238.4338 366.5259 420.5144\n```\n:::\n:::\n\n\n:::\n\n## Resample Sequential\n\nWe run the resample function of `tidymodels` and `mlr3` with different resampling strategies.\nThe resampling splits for a 3-, 6- and 9-fold cross-validation are generated before the benchmark.\nIn addition, we run a repeated 3-fold cross-validation with 100 repetitions.\nBoth packages use the same resampling splits.\nSince `tidymodels` always performs a resample and score, we do the same with mlr3.\nBoth runs save the predictions.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# tidymodels resample\ncontrol = control_grid(save_pred = TRUE)\nmetrics = metric_set(accuracy)\n\nfit_resamples(tidymodels_workflow, folds_3, metrics = metrics, control = control)\n\n# mlr3 resample\nmeasure = msr(\"classif.acc\")\n\nrr = resample(task, learner, resampling)\nrr$score(measure)\n```\n:::\n\n\nRepeating the benchmark 100 times yields the following results.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n              expr        min     median        max\n          mlr3_cv3   179.6617   190.3690   608.3326\n    tidymodels_cv3   218.7474   232.0851   267.1237\n          mlr3_cv6   324.7283   348.2096   431.0568\n    tidymodels_cv6   373.3162   399.2981   495.4284\n          mlr3_cv9   473.6089   504.2811   903.1638\n    tidymodels_cv9   535.8008   557.6928   968.1748\n       mlr3_rcv100 14821.8478 15488.0928 16888.7096\n tidymodels_rcv100 15547.2848 16255.7384 17764.2942\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n              expr         min     median        max\n          mlr3_cv3    898.7274   1162.813   1382.425\n    tidymodels_cv3    869.7233   1107.821   1292.860\n          mlr3_cv6   2199.8260   2470.947   3256.864\n    tidymodels_cv6   1774.0132   2426.048   2606.698\n          mlr3_cv9   3134.2671   3815.983   4748.945\n    tidymodels_cv9   2939.5973   3760.549   4436.223\n       mlr3_rcv100  97487.7742 104382.331 111232.547\n tidymodels_rcv100 100644.3394 103628.853 106700.246\n```\n:::\n:::\n\n\n:::\n\n\n::: {.cell .column-page layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Runtime in milliseconds for rpart (left) and ranger (right) depending on the number of folds.](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Resample Parallel\n\nWe compare the parallelization of the resample functions.\nWe use the same resampling strategies as before.\nThe `mlr3` package uses the `future` package for parallelization.\nFor `tidymodels` we use the `doParallel` and `doFuture` packages.\n\nThe results for `mlr3` with `future`.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n        expr       min    median       max\n    mlr3_cv3  777.9049  851.2314  1300.644\n    mlr3_cv6  856.6636  959.1379  6588.252\n    mlr3_cv9  944.9112 1051.9982  1582.367\n mlr3_rcv100 8174.2055 9238.8455 10931.011\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n        expr       min    median       max\n    mlr3_cv3  1007.910  1147.114  1897.360\n    mlr3_cv6  1375.025  1607.946  2379.802\n    mlr3_cv9  1767.464  2101.927  4994.489\n mlr3_rcv100 36338.081 40050.440 43626.123\n```\n:::\n:::\n\n\n:::\n\nThe results for `tidymodels` with `doFuture`.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n              expr      min   median       max\n    tidymodels_cv3 2714.961 2851.832  3762.519\n    tidymodels_cv6 2698.370 2848.314 14305.213\n    tidymodels_cv9 2827.346 2999.000  3967.432\n tidymodels_rcv100 8602.963 9043.772  9812.981\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n              expr       min    median       max\n    tidymodels_cv3  2945.569  3107.024  3968.017\n    tidymodels_cv6  3207.292  3434.900  4353.211\n    tidymodels_cv9  3650.166  3971.868 15215.262\n tidymodels_rcv100 32339.755 34201.874 35858.731\n```\n:::\n:::\n\n\n:::\n\nThe result for `tidymodels` with `doParallel`.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n              expr        min     median       max\n    tidymodels_cv3   642.0129   712.6431  1495.017\n    tidymodels_cv6   746.2441   850.6417  1671.984\n    tidymodels_cv9   762.6390  1076.2330  1818.601\n tidymodels_rcv100 13461.1542 14349.2723 25677.642\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n              expr        min    median       max\n    tidymodels_cv3   882.8194  1023.850  1720.740\n    tidymodels_cv6  1307.3080  1486.240  1934.276\n    tidymodels_cv9  1754.0735  2005.535  2974.978\n tidymodels_rcv100 40875.1338 41321.730 52888.400\n```\n:::\n:::\n\n\n:::\n\n\n::: {.cell .column-page layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Runtime in milliseconds depending on the number of folds.](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![Runtime in milliseconds depending on the number of folds.](index_files/figure-html/unnamed-chunk-17-2.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![Runtime in milliseconds depending on the number of folds.](index_files/figure-html/unnamed-chunk-17-3.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![Runtime in milliseconds depending on the number of folds.](index_files/figure-html/unnamed-chunk-17-4.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Tune Seuqential\n\nWe load the learners and define the design.\nWe evaluate 200 points.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#|\ntm_mod = decision_tree(cost_complexity = tune()) %>%\n  set_engine(\"rpart\", xval = 0) %>%\n  set_mode(\"classification\")\n\nlearner = lrn(\"classif.rpart\", xval = 0, cp = to_tune())\n\ntm_design = data.table(cost_complexity = seq(0.1, 0.2, length.out = 200))\nmlr3_design = data.table(cp = seq(0.1, 0.2, length.out = 200))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_mod = rand_forest(trees = tune()) %>%\n  set_engine(\"ranger\", num.threads = 1L, seed = 1) %>%\n  set_mode(\"classification\")\n\nlearner = lrn(\"classif.ranger\",\n  num.trees = to_tune(1, 10000),\n  num.threads = 1L,\n  seed = 1,\n  verbose = FALSE,\n  predict_type = \"prob\")\n\ntm_design = data.table(trees = seq(1000, 1199))\nmlr3_design = data.table(num.trees = seq(1000, 1199))\n```\n:::\n\n\n:::\n\nWe compare the tune functions of `tidymodels` and `mlr3`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(data.table)\n\n# tidymodels tune\ntune::tune_grid(tm_wf, resamples = resamples, grid = design, metrics = metrics)\n\n# mlr3 tune\ntuner = tnr(\"design_points\", design = design, batch_size = nrow(design))\nmlr3tuning::tune(tuner = tuner, task = task,  learner = learner,  resampling = resampling, measures = measure, store_benchmark_result = FALSE)\n```\n:::\n\n\nRepeating the benchmark 100 times yields the following results.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n                 expr      min   median      max\n       mlr3_200_point 25099.48 26302.04 27211.69\n tidymodels_200_point 34730.54 36111.21 37378.70\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n                 expr      min   median      max\n       mlr3_200_point 196007.5 211733.5 224656.6\n tidymodels_200_point 214160.7 223420.9 227516.4\n```\n:::\n:::\n\n\n:::\n\n\n\n::: {.cell .column-page layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Runtime in milliseconds depending on framework.](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![Runtime in milliseconds depending on framework.](index_files/figure-html/unnamed-chunk-23-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Tune Parallel\n\nNow we enable parallelization and run the same benchmarks.\nThe parallelization runs on 3 cores.\nWe use the largest possible chunk size for `mlr3`.\nThe `tidymodels` package uses the same chunk size but sets it internally.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptions(\"mlr3.exec_chunk_size\" = 200)\n```\n:::\n\n\nThe results for `mlr3` with `future`.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n           expr      min   median     max\n mlr3_200_point 10686.04 11339.76 12533.9\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n           expr      min  median      max\n mlr3_200_point 66380.55 69485.6 75962.96\n```\n:::\n:::\n\n\n:::\n\nThe results for `tidymodels` with `doFuture`.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n                 expr      min   median      max\n tidymodels_200_point 14810.94 15330.97 25412.05\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n                 expr     min   median      max\n tidymodels_200_point 68445.9 70275.58 81811.65\n```\n:::\n:::\n\n\n:::\n\nThe result for `tidymodels` with `doParallel`.\n\n:::{layout-ncol=\"2\" .column-body-outset}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n                 expr      min   median      max\n tidymodels_200_point 13361.71 14030.36 25300.53\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n                 expr      min   median      max\n tidymodels_200_point 66182.32 67337.75 80110.91\n```\n:::\n:::\n\n\n:::\n\n\n\n::: {.cell .column-page layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nres_4 = setNames(map(list(bm_rpart$bm_4_1, bm_rpart$bm_4_2, bm_rpart$bm_4_3), as.data.table), c(\"mlr3_future\", \"tidymodels_future\", \"tidymodels_parallel\"))\nres_4 = rbindlist(res_4, idcol = \"framework\")\nres_4[, framework := factor(framework)]\nres_4 = res_4[, list(time = median(time)), by = c(\"expr\", \"framework\")]\nres_4[, time := time / 1e+6]\n\nres_3_4 = rbindlist(list(\n  sequential = res_3,\n  parallel = res_4),\n  use.names = TRUE, idcol = \"mode\")\n\nggplot(res_3_4,\n  aes(x = framework, y = time, fill = mode)) +\n  geom_col() +\n  xlab(\"Framework\") +\n  ylab(\"Runtime (ms)\") +\n  labs(fill = \"Mode\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90))\n```\n\n::: {.cell-output-display}\n![Runtime in milliseconds depending on framework.](index_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nres_4 = setNames(map(list(bm_ranger$bm_4_1, bm_ranger$bm_4_2, bm_ranger$bm_4_3), as.data.table), c(\"mlr3_future\", \"tidymodels_future\", \"tidymodels_parallel\"))\nres_4 = rbindlist(res_4, idcol = \"framework\")\nres_4[, framework := factor(framework)]\nres_4 = res_4[, list(time = median(time)), by = c(\"expr\", \"framework\")]\nres_4[, time := time / 1e+6]\n\nres_3_4 = rbindlist(list(\n  sequential = res_3,\n  parallel = res_4),\n  use.names = TRUE, idcol = \"mode\")\n\nggplot(res_3_4,\n  aes(x = framework, y = time, fill = mode)) +\n  geom_col() +\n  xlab(\"Framework\") +\n  ylab(\"Runtime (ms)\") +\n  labs(fill = \"Mode\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90))\n```\n\n::: {.cell-output-display}\n![Runtime in milliseconds depending on framework.](index_files/figure-html/unnamed-chunk-31-2.png){fig-align='center' width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}