{
  "hash": "501729f75f1cf3a8bd04d6bf8e89f7b8",
  "result": {
    "markdown": "---\ntitle: \"Spatial Data in mlr3\"\ndescription: |\n  Train with spatial data and predict maps.\nauthor:\n  - name: Marc Becker\n    orcid: 0000-0002-8115-0400\n    url: https://github.com/be-marc\ndate: 2023-01-23\n---\n\n\n\n\n\n\n# Scope\n\nWorking with spatial data in R requires a lot of data wrangling e.g. reading from different file formats, converting between spatial formats, creating tables from point layers, engineering new features and predicting spatial raster images.\nThe [mlr3spatial](https://mlr3spatial.mlr-org.com) package is a bridge between spatial data and the [mlr3 ecosystem](https://mlr-org.com/ecosystem.html).\nThe package simplifies the work steps: Load the training data, create a spatial task, train a learner with it, and predict the final raster image (see flowchart).\nIn this article, we will perform a land cover classification for the city of Leipzig, Germany, as an example of the capabilities of the package.\n\n```{mermaid}\n%%{ init: { 'flowchart': { 'curve': 'bump' } } }%%\n\nflowchart LR\n    subgraph files[Files]\n    vector[Vector]\n    raster[Raster]\n    end\n    subgraph load[Load Data]\n    sf\n    terra\n    end\n    vector --> sf\n    raster --> terra\n    subgraph train_model[Train Model]\n    task[Task]\n    learner[Learner]\n    end\n    terra --> prediction_raster\n    task --> learner\n    sf --> task\n    subgraph predict[Spatial Prediction]\n    prediction_raster[Raster Image]\n    end\n    learner --> prediction_raster\n\n```\n\n\n# Land Cover Classification\n\nThe package relies on [terra](https://cran.r-project.org/package=terra) for processing raster data and [sf](https://cran.r-project.org/package=sf) for vector data.\nThese widely used packages read all common raster and vector formats.\nAdditionally, the [stars](https://cran.r-project.org/package=stars) and [raster](https://cran.r-project.org/package=raster) packages are supported.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\nlibrary(mlr3spatial)\nlibrary(terra, exclude = \"resample\")\nlibrary(sf)\n```\n:::\n\n\nWe will work with example data from the package.\nIt includes a Sentinal-2 scene of the city of Leipzig which consists of 7 bands with a 10 or 20m spatial resolution and an NDVI band.\nWe load the TIFF raster file and use [`terra::rast()`](https://www.rdocumentation.org/packages/terra/topics/rast) to create a [`terra::SpatRaster`](https://www.rdocumentation.org/packages/terra/topics/SpatRaster).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nleipzig_raster = rast(system.file(\"extdata\", \"leipzig_raster.tif\", package = \"mlr3spatial\"))\nleipzig_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 206, 154, 8  (nrow, ncol, nlyr)\nresolution  : 10, 10  (x, y)\nextent      : 731810, 733350, 5692030, 5694090  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 32N (EPSG:32632) \nsource      : leipzig_raster.tif \nnames       :  b02,  b03,  b04,  b06,  b07,  b08, ... \nmin values  :  846,  645,  366,  375,  401,  374, ... \nmax values  : 4705, 4880, 5451, 4330, 5162, 5749, ... \n```\n:::\n:::\n\n\nThe training data is a GeoPackage point layer with land cover labels and the spectral features.\nWe load the file and create a simple feature point layer ([`sf::sf`](https://www.rdocumentation.org/packages/sf/topics/sf)).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nleipzig_vector = read_sf(system.file(\"extdata\", \"leipzig_points.gpkg\", package = \"mlr3spatial\"), stringsAsFactors = TRUE)\nleipzig_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 97 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 731930.5 ymin: 5692136 xmax: 733220.3 ymax: 5693968\nProjected CRS: WGS 84 / UTM zone 32N\n# A tibble: 97 × 10\n     b02   b03   b04   b06   b07   b08   b11    ndvi land_cover               geom\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl> <fct>             <POINT [m]>\n 1   903   772   426  2998  4240  4029  1816  0.809  forest     (732480.1 5693957)\n 2  1270  1256  1081  1998  2493  2957  2073  0.465  urban      (732217.4 5692769)\n 3  1033   996   777  2117  2748  2799  1595  0.565  urban      (732737.2 5692469)\n 4   962   773   500   465   505   396   153 -0.116  water      (733169.3 5692777)\n 5  1576  1527  1626  1715  1745  1768  1980  0.0418 urban      (732202.2 5692644)\n 6  1125  1185   920  3058  3818  3758  2682  0.607  pasture      (732153 5693059)\n 7   880   746   424  2502  3500  3397  1469  0.778  forest     (731937.9 5693722)\n 8  1332  1251  1385  1663  1799  1640  1910  0.0843 urban      (732416.2 5692324)\n 9   940   741   475   452   515   400   139 -0.0857 water      (732933.7 5693344)\n10   902   802   454  2764  3821  3666  1567  0.780  forest     (732411.3 5693352)\n# … with 87 more rows\n```\n:::\n:::\n\n\nWe plot both layers to get an overview of the data.\nThe training points are located in the districts of Lindenau and Zentrum West.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggplot2)\nlibrary(tidyterra, exclude = \"filter\")\n\nggplot() +\n  geom_spatraster_rgb(data = leipzig_raster, r = 3, g = 2, b = 1, max_col_value = 5451) +\n  geom_spatvector(data = leipzig_vector, aes(color = land_cover)) +\n  scale_color_viridis_d(name = \"Land cover\", labels = c(\"Forest\", \"Pastures\", \"Urban\", \"Water\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2023-01-23-mlr3spatial-005-1.png){fig-align='center' width=768}\n:::\n:::\n\n\nTo create a spatial task from the point layer, call [`as_task_classif_st()`](https://mlr3spatiotempcv.mlr-org.com/reference/as_task_classif_st.html).\nThe spatial classification task additionally stores the coordinates of the training points.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = as_task_classif_st(leipzig_vector, target = \"land_cover\")\ntask\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskClassifST:leipzig_vector> (97 x 9)\n* Target: land_cover\n* Properties: multiclass\n* Features (8):\n  - dbl (8): b02, b03, b04, b06, b07, b08, b11, ndvi\n* Coordinates:\n           X       Y\n 1: 732480.1 5693957\n 2: 732217.4 5692769\n 3: 732737.2 5692469\n 4: 733169.3 5692777\n 5: 732202.2 5692644\n---                 \n93: 733018.7 5692342\n94: 732551.4 5692887\n95: 732520.4 5692589\n96: 732542.2 5692204\n97: 732437.8 5692300\n```\n:::\n:::\n\n\nNow we can train a model with the task.\nWe use a simple decision tree learner from the [rpart](https://cran.r-project.org/package=rpart) package.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner = lrn(\"classif.rpart\")\nlearner$train(task)\n```\n:::\n\n\nAs a last step, we predict the whole raster image.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# predict land cover map\nland_cover = predict_spatial(leipzig_raster, learner)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot() +\n  geom_spatraster(data = land_cover) +\n  scale_fill_viridis_d(name = \"Land cover\", labels = c(\"Forest\", \"Pastures\", \"Urban\", \"Water\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2023-01-23-mlr3spatial-009-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n## Conclusion\n\nWorking with spatial data in R is very easy with the [mlr3spatial](https://mlr3spatial.mlr-org.com) package.\nQuickly train a model with a point layer and predict a raster image.\nIn the next article, we will show you how to predict large survey areas fast and without memory issues.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}