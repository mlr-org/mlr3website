{
  "hash": "f50bc0603b3146cc2c4956c6bcc41af2",
  "result": {
    "markdown": "---\ntitle: \"Introduction to mlr3tuningspaces\"\ndescription: |\n  Apply predefined search spaces from scientific articles.\ncategories:\n  - tuning\n  - classification\nauthor:\n  - name: Marc Becker\ndate: 07-06-2021\naliases:\n  - ../../../gallery/2021-07-06-introduction-to-mlr3tuningspaces/index.html\n---\n\n\n\n\n# Scope\n\nThe package [mlr3tuningspaces](https://mlr3tuningspaces.mlr-org.com) offers a selection of published search spaces for many popular machine learning algorithms.\nIn this post, we show how to tune a [`mlr3 learners`](https://mlr3.mlr-org.com/reference/Learner.html) with these search spaces.\n\n# Prerequisites\n\nThe packages [mlr3verse](https://mlr3verse.mlr-org.com) and [mlr3tuningspaces](https://mlr3tuningspaces.mlr-org.com) are required for this demonstration:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\nlibrary(mlr3tuningspaces)\n```\n:::\n\n\nWe initialize the random number generator with a fixed seed for reproducibility, and decrease the verbosity of the logger to keep the output clearly represented.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(7832)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\")\nlgr::get_logger(\"bbotk\")$set_threshold(\"warn\")\n```\n:::\n\n\nIn the example, we use the [`pima indian diabetes data set`](https://mlr3.mlr-org.com/reference/mlr_tasks_pima.html) which is used to predict whether or not a patient has diabetes.\nThe patients are characterized by 8 numeric features, some of them have missing values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# retrieve the task from mlr3\ntask = tsk(\"pima\")\n\n# generate a quick textual overview using the skimr package\nskimr::skim(task$data())\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |            |\n|:------------------------|:-----------|\n|Name                     |task$data() |\n|Number of rows           |768         |\n|Number of columns        |9           |\n|Key                      |NULL        |\n|_______________________  |            |\n|Column type frequency:   |            |\n|factor                   |1           |\n|numeric                  |8           |\n|________________________ |            |\n|Group variables          |None        |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts         |\n|:-------------|---------:|-------------:|:-------|--------:|:------------------|\n|diabetes      |         0|             1|FALSE   |        2|neg: 500, pos: 268 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|     sd|    p0|   p25|    p50|    p75|   p100|hist  |\n|:-------------|---------:|-------------:|------:|------:|-----:|-----:|------:|------:|------:|:-----|\n|age           |         0|          1.00|  33.24|  11.76| 21.00| 24.00|  29.00|  41.00|  81.00|▇▃▁▁▁ |\n|glucose       |         5|          0.99| 121.69|  30.54| 44.00| 99.00| 117.00| 141.00| 199.00|▁▇▇▃▂ |\n|insulin       |       374|          0.51| 155.55| 118.78| 14.00| 76.25| 125.00| 190.00| 846.00|▇▂▁▁▁ |\n|mass          |        11|          0.99|  32.46|   6.92| 18.20| 27.50|  32.30|  36.60|  67.10|▅▇▃▁▁ |\n|pedigree      |         0|          1.00|   0.47|   0.33|  0.08|  0.24|   0.37|   0.63|   2.42|▇▃▁▁▁ |\n|pregnant      |         0|          1.00|   3.85|   3.37|  0.00|  1.00|   3.00|   6.00|  17.00|▇▃▂▁▁ |\n|pressure      |        35|          0.95|  72.41|  12.38| 24.00| 64.00|  72.00|  80.00| 122.00|▁▃▇▂▁ |\n|triceps       |       227|          0.70|  29.15|  10.48|  7.00| 22.00|  29.00|  36.00|  99.00|▆▇▁▁▁ |\n:::\n:::\n\n\n# Tuning Search Space\n\nFor tuning, it is important to create a search space that defines the type and range of the hyperparameters.\nA learner stores all information about its hyperparameters in the slot `$param_set`.\nUsually, we have to chose a subset of hyperparameters we want to tune.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlrn(\"classif.rpart\")$param_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n                id    class lower upper nlevels        default value\n 1:             cp ParamDbl     0     1     Inf           0.01      \n 2:     keep_model ParamLgl    NA    NA       2          FALSE      \n 3:     maxcompete ParamInt     0   Inf     Inf              4      \n 4:       maxdepth ParamInt     1    30      30             30      \n 5:   maxsurrogate ParamInt     0   Inf     Inf              5      \n 6:      minbucket ParamInt     1   Inf     Inf <NoDefault[3]>      \n 7:       minsplit ParamInt     1   Inf     Inf             20      \n 8: surrogatestyle ParamInt     0     1       2              0      \n 9:   usesurrogate ParamInt     0     2       3              2      \n10:           xval ParamInt     0   Inf     Inf             10     0\n```\n:::\n:::\n\n\n# Package\n\nAt the heart of [mlr3tuningspaces](https://mlr3tuningspaces.mlr-org.com) is the R6 class [`TuningSpace`](https://mlr3tuningspaces.mlr-org.com/reference/TuningSpace.html).\nIt stores a list of [`TuneToken`](https://paradox.mlr-org.com/reference/to_tune.html), helper functions and additional meta information.\nThe list of [`TuneToken`](https://paradox.mlr-org.com/reference/to_tune.html) can be directly applied to the `$values` slot of a learner's [`ParamSet`](https://paradox.mlr-org.com/reference/ParamSet.html).\nThe search spaces are stored in the [`mlr_tuning_spaces`](https://mlr3tuningspaces.mlr-org.com/reference/mlr_tuning_spaces.html) dictionary.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nas.data.table(mlr_tuning_spaces)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        key                                 label         learner n_values\n 1:  classif.glmnet.default       Classification GLM with Default  classif.glmnet        2\n 2:     classif.glmnet.rbv1     Classification GLM with RandomBot  classif.glmnet        2\n 3:     classif.glmnet.rbv2     Classification GLM with RandomBot  classif.glmnet        2\n 4:    classif.kknn.default      Classification KKNN with Default    classif.kknn        3\n 5:       classif.kknn.rbv1    Classification KKNN with RandomBot    classif.kknn        1\n 6:       classif.kknn.rbv2    Classification KKNN with RandomBot    classif.kknn        1\n 7:  classif.ranger.default    Classification Ranger with Default  classif.ranger        4\n 8:     classif.ranger.rbv1  Classification Ranger with RandomBot  classif.ranger        6\n 9:     classif.ranger.rbv2  Classification Ranger with RandomBot  classif.ranger        8\n10:   classif.rpart.default     Classification Rpart with Default   classif.rpart        3\n11:      classif.rpart.rbv1   Classification Rpart with RandomBot   classif.rpart        4\n12:      classif.rpart.rbv2   Classification Rpart with RandomBot   classif.rpart        4\n13:     classif.svm.default       Classification SVM with Default     classif.svm        4\n14:        classif.svm.rbv1     Classification SVM with RandomBot     classif.svm        4\n15:        classif.svm.rbv2     Classification SVM with RandomBot     classif.svm        5\n16: classif.xgboost.default   Classification XGBoost with Default classif.xgboost        8\n17:    classif.xgboost.rbv1 Classification XGBoost with RandomBot classif.xgboost       10\n18:    classif.xgboost.rbv2 Classification XGBoost with RandomBot classif.xgboost       13\n19:     regr.glmnet.default           Regression GLM with Default     regr.glmnet        2\n20:        regr.glmnet.rbv1         Regression GLM with RandomBot     regr.glmnet        2\n21:        regr.glmnet.rbv2         Regression GLM with RandomBot     regr.glmnet        2\n22:       regr.kknn.default          Regression KKNN with Default       regr.kknn        3\n23:          regr.kknn.rbv1        Regression KKNN with RandomBot       regr.kknn        1\n24:          regr.kknn.rbv2        Regression KKNN with RandomBot       regr.kknn        1\n25:     regr.ranger.default        Regression Ranger with Default     regr.ranger        4\n26:        regr.ranger.rbv1      Regression Ranger with RandomBot     regr.ranger        6\n27:        regr.ranger.rbv2      Regression Ranger with RandomBot     regr.ranger        7\n28:      regr.rpart.default         Regression Rpart with Default      regr.rpart        3\n29:         regr.rpart.rbv1       Regression Rpart with RandomBot      regr.rpart        4\n30:         regr.rpart.rbv2       Regression Rpart with RandomBot      regr.rpart        4\n31:        regr.svm.default           Regression SVM with Default        regr.svm        4\n32:           regr.svm.rbv1         Regression SVM with RandomBot        regr.svm        4\n33:           regr.svm.rbv2         Regression SVM with RandomBot        regr.svm        5\n34:    regr.xgboost.default       Regression XGBoost with Default    regr.xgboost        8\n35:       regr.xgboost.rbv1     Regression XGBoost with RandomBot    regr.xgboost       10\n36:       regr.xgboost.rbv2     Regression XGBoost with RandomBot    regr.xgboost       13\n                        key                                 label         learner n_values\n```\n:::\n:::\n\n\nWe can use the sugar function [`lts()`](https://mlr3tuningspaces.mlr-org.com/reference/lts.html) to retrieve a [`TuningSpace`](https://mlr3tuningspaces.mlr-org.com/reference/TuningSpace.html).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntuning_space_rpart = lts(\"classif.rpart.default\")\ntuning_space_rpart\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TuningSpace:classif.rpart.default>: Classification Rpart with Default\n          id lower upper levels logscale\n1:  minsplit 2e+00 128.0            TRUE\n2: minbucket 1e+00  64.0            TRUE\n3:        cp 1e-04   0.1            TRUE\n```\n:::\n:::\n\n\nThe `$values` slot contains the list of of [`TuneToken`](https://paradox.mlr-org.com/reference/to_tune.html).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntuning_space_rpart$values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$minsplit\nTuning over:\nrange [2, 128] (log scale)\n\n\n$minbucket\nTuning over:\nrange [1, 64] (log scale)\n\n\n$cp\nTuning over:\nrange [1e-04, 0.1] (log scale)\n```\n:::\n:::\n\n\nWe apply the search space and tune the [`learner`](https://mlr3.mlr-org.com/reference/Learner.html).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner = lrn(\"classif.rpart\")\n\nlearner$param_set$values = tuning_space_rpart$values\n\ninstance = tune(\n  tuner = tnr(\"random_search\"),\n  task = tsk(\"pima\"),\n  learner = learner,\n  resampling = rsmp (\"holdout\"),\n  measure = msr(\"classif.ce\"),\n  term_evals = 10)\n\ninstance$result\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   minsplit minbucket        cp learner_param_vals  x_domain classif.ce\n1:  3.40059  1.963618 -4.114895          <list[3]> <list[3]>  0.2539062\n```\n:::\n:::\n\n\nWe can also get the [`learner`](https://mlr3.mlr-org.com/reference/Learner.html) with search space already applied from the [`TuningSpace`](https://mlr3tuningspaces.mlr-org.com/reference/TuningSpace.html).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner = tuning_space_rpart$get_learner()\nprint(learner$param_set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n                id    class lower upper nlevels        default               value\n 1:             cp ParamDbl     0     1     Inf           0.01 <RangeTuneToken[2]>\n 2:     keep_model ParamLgl    NA    NA       2          FALSE                    \n 3:     maxcompete ParamInt     0   Inf     Inf              4                    \n 4:       maxdepth ParamInt     1    30      30             30                    \n 5:   maxsurrogate ParamInt     0   Inf     Inf              5                    \n 6:      minbucket ParamInt     1   Inf     Inf <NoDefault[3]> <RangeTuneToken[2]>\n 7:       minsplit ParamInt     1   Inf     Inf             20 <RangeTuneToken[2]>\n 8: surrogatestyle ParamInt     0     1       2              0                    \n 9:   usesurrogate ParamInt     0     2       3              2                    \n10:           xval ParamInt     0   Inf     Inf             10                   0\n```\n:::\n:::\n\n\nThis method also allows to set constant parameters.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner = tuning_space_rpart$get_learner(maxdepth = 15)\nprint(learner$param_set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n                id    class lower upper nlevels        default               value\n 1:             cp ParamDbl     0     1     Inf           0.01 <RangeTuneToken[2]>\n 2:     keep_model ParamLgl    NA    NA       2          FALSE                    \n 3:     maxcompete ParamInt     0   Inf     Inf              4                    \n 4:       maxdepth ParamInt     1    30      30             30                  15\n 5:   maxsurrogate ParamInt     0   Inf     Inf              5                    \n 6:      minbucket ParamInt     1   Inf     Inf <NoDefault[3]> <RangeTuneToken[2]>\n 7:       minsplit ParamInt     1   Inf     Inf             20 <RangeTuneToken[2]>\n 8: surrogatestyle ParamInt     0     1       2              0                    \n 9:   usesurrogate ParamInt     0     2       3              2                    \n10:           xval ParamInt     0   Inf     Inf             10                   0\n```\n:::\n:::\n\n\nThe [`lts()`](https://mlr3tuningspaces.mlr-org.com/reference/lts.html) function sets the default search space directly to a [`learner`](https://mlr3.mlr-org.com/reference/Learner.html).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner = lts(lrn(\"classif.rpart\", maxdepth = 15))\nprint(learner$param_set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n                id    class lower upper nlevels        default               value\n 1:             cp ParamDbl     0     1     Inf           0.01 <RangeTuneToken[2]>\n 2:     keep_model ParamLgl    NA    NA       2          FALSE                    \n 3:     maxcompete ParamInt     0   Inf     Inf              4                    \n 4:       maxdepth ParamInt     1    30      30             30                  15\n 5:   maxsurrogate ParamInt     0   Inf     Inf              5                    \n 6:      minbucket ParamInt     1   Inf     Inf <NoDefault[3]> <RangeTuneToken[2]>\n 7:       minsplit ParamInt     1   Inf     Inf             20 <RangeTuneToken[2]>\n 8: surrogatestyle ParamInt     0     1       2              0                    \n 9:   usesurrogate ParamInt     0     2       3              2                    \n10:           xval ParamInt     0   Inf     Inf             10                   0\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}