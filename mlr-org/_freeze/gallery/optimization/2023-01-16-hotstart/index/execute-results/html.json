{
  "hash": "ec66b6b1d219d0406da65619b03367e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hotstarting\"\ndescription: |\n  Resume the training of learners.\ncategories:\n  - tuning\n  - classification\nauthor:\n  - name: Marc Becker\n    url: https://github.com/be-marc\n  - name: Sebastian Fischer\n    url: https://github.com/sebffischer\ndate: 2023-01-16\nbibliography: bibliography.bib\nknitr:\n  opts_chunk:\n    R.options:\n      datatable.print.nrows: 6\n      datatable.print.trunc.cols: TRUE\nimage: cover.jpg\n---\n\n\n\n\n\n\n\n# Scope\n\nHotstarting a learner resumes the training from an already fitted model.\nAn example would be to train an already fit XGBoost model for an additional 500 boosting iterations.\nIn mlr3, we call this process **Hotstarting**, where a learner has access to a cache of already trained models which is called a [`mlr3::HoststartStack`](https://mlr3.mlr-org.com/reference/HoststartStack.html)\nWe distinguish between forward and backward hotstarting.\nWe start this post with backward hotstarting and then talk about the less efficient forward hotstarting.\n\n# Backward Hotstarting\n\nIn this example, we optimize the hyperparameters of a random forest and use hotstarting to reduce the runtime.\nHotstarting a random forest backwards is very simple.\nThe model remains unchanged and only a subset of the trees is used for prediction i.e. a new model is not fitted.\nFor example, a random forest is trained with 1000 trees and a specific hyperparameter configuration.\nIf another random forest with 500 trees but with the same hyperparameter configuration has to be trained, the model with 1000 trees is copied and only 500 trees are used for prediction.\n\nWe load the [`ranger learner`](https://mlr3learners.mlr-org.com/reference/mlr_learners_classif.ranger.html) and set the search space from the @bischl_hyperparameter_2021 article.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\n\nlearner = lrn(\"classif.ranger\",\n  mtry.ratio      = to_tune(0, 1),\n  replace         = to_tune(),\n  sample.fraction = to_tune(1e-1, 1),\n  num.trees       = to_tune(1, 2000)\n)\n```\n:::\n\n\n\nWe activate hotstarting with the `allow_hotstart` option.\nWhen running a grid search with hotstarting, the grid is sorted by the hot start parameter.\nThis means the models with 2000 trees are trained first.\nThe models with less than 2000 trees hot start on the 2000 trees models which allows the training to be completed immediately.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance = tune(\n  tuner = tnr(\"grid_search\", resolution = 5, batch_size = 5),\n  task = tsk(\"spam\"),\n  learner = learner,\n  resampling = rsmp(\"holdout\"),\n  measure = msr(\"classif.ce\"),\n  allow_hotstart = TRUE\n)\n```\n:::\n\n\n\nFor comparison, we perform the same tuning without hotstarting.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance_2 = tune(\n  tuner = tnr(\"grid_search\", resolution = 5, batch_size = 5),\n  task = tsk(\"spam\"),\n  learner = learner,\n  resampling = rsmp(\"holdout\"),\n  measure = msr(\"classif.ce\"),\n  allow_hotstart = FALSE\n)\n```\n:::\n\n\n\nWe plot the time of completion of each batch (see @fig-time-batch).\nEach batch includes 5 configurations.\nWe can see that tuning with hotstarting is slower at first.\nAs soon as all models are fitted with 2000 trees, the tuning runs much faster and overtakes the tuning without hotstarting.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Time of completion of each batch with and without hotstarting.](index_files/figure-html/fig-time-batch-1.png){#fig-time-batch fig-align='center' width=672}\n:::\n:::\n\n\n\n# Forward Hotstarting\n\nForward hotstarting is currently only supported by XGBoost.\nHowever, we have observed that hotstarting only provides a speed advantage for very large datasets and models with more than 5000 boosting rounds.\nThe reason is that copying the models from the main process to the workers is a major bottleneck.\nThe parallelization package [future](https://cran.r-project.org/package=future) copies the models sequentially to the workers.\nConsequently, it takes a long time until the last worker can even start.\nMoreover, copying itself consumes a lot of time, and copying the model back from the worker blocks the main process again.\nDuring the development process, we overestimated the speed benefits of hotstarting and underestimated the overhead of parallelization.\nWe can therefore only advise against using forward hotstarting during tuning.\nIt is much more efficient to use the internal early-stopping mechanism of XGBoost.\nThis eliminates the need to copy models to the worker.\nSee the [gallery post](/gallery/optimization/2022-11-04-early-stopping-with-xgboost) on early stopping for an example.\nWe might improve the efficiency of the hotstarting mechanism in the future, if there are convincing use cases.\n\n# Manual Hotstarting\n\nNevertheless, forward hotstarting can be useful without parallelization.\nIf you have an already trained model and want to add more boosting iteration to it.\nIn this example, the `learner_5000` is the already trained model.\nWe create a new learner with the same hyperparameters but double the number of boosting iteration.\nTo activate hotstarting, we create a `HotstartStack` and copy it to the `$hotstart_stack` slot of the new learner.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = tsk(\"spam\")\n\nlearner_5000 = lrn(\"classif.xgboost\", nrounds = 5000, eta = 0.1)\nlearner_5000$train(task)\n\nlearner_10000 = lrn(\"classif.xgboost\", nrounds = 10000, eta = 0.1)\nlearner_10000$hotstart_stack = HotstartStack$new(learner_5000)\nlearner_10000$train(task)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\nTraining the initial model took 59.885 seconds.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner_5000$state$train_time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 59.885\n```\n\n\n:::\n:::\n\n\n\nAdding 5000 boosting rounds took 46.837 seconds.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner_10000$state$train_time - learner_5000$state$train_time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46.837\n```\n\n\n:::\n:::\n\n\n\nTraining the model from the beginning would have taken about two minutes.\nThis means, without parallelization, we get the expected speed advantage.\n\n# Conclusion\n\nWe have seen how mlr3 enables to reduce the training time, by building on a hotstart stack of already trained learners.\nOne has to be careful, however, when using forward hotstarting during tuning because of the high parallelization overhead that arises from copying the models between the processes.\nIf a model has an internal early stopping implementation, it should usually be relied upon instead of using the mlr3 hotstarting mechanism.\nHowever, manual forward hotstarting can be helpful in some situations when we do not want to train a large model from the beginning.\n\n\n# Session Information\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsessioninfo::session_info(info = \"packages\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n═ Session info ═══════════════════════════════════════════════════════════════════════════════════════════════════════\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n ! package           * version    date (UTC) lib source\n   backports           1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n   bbotk               1.1.1      2024-10-15 [1] CRAN (R 4.4.1)\n   checkmate           2.3.2      2024-07-29 [1] CRAN (R 4.4.1)\n P class               7.3-22     2023-05-03 [?] CRAN (R 4.4.0)\n   cli                 3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n   clue                0.3-65     2023-09-23 [1] CRAN (R 4.4.1)\n P cluster             2.1.6      2023-12-01 [?] CRAN (R 4.4.0)\n P codetools           0.2-20     2024-03-31 [?] CRAN (R 4.4.0)\n   colorspace          2.1-1      2024-07-26 [1] CRAN (R 4.4.1)\n   crayon              1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n   data.table        * 1.16.2     2024-10-10 [1] CRAN (R 4.4.1)\n   DEoptimR            1.1-3      2023-10-07 [1] CRAN (R 4.4.1)\n   digest              0.6.37     2024-08-19 [1] CRAN (R 4.4.1)\n   diptest             0.77-1     2024-04-10 [1] CRAN (R 4.4.1)\n   dplyr               1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n   evaluate            1.0.1      2024-10-10 [1] CRAN (R 4.4.1)\n   fansi               1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n   farver              2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n   fastmap             1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n   flexmix             2.3-19     2023-03-16 [1] CRAN (R 4.4.1)\n   fpc                 2.2-13     2024-09-24 [1] CRAN (R 4.4.1)\n   future              1.34.0     2024-07-29 [1] CRAN (R 4.4.1)\n   generics            0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n   ggplot2           * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n   globals             0.16.3     2024-03-08 [1] CRAN (R 4.4.1)\n   glue                1.8.0      2024-09-30 [1] CRAN (R 4.4.1)\n   gtable              0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n   htmltools           0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n   htmlwidgets         1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n   jsonlite            1.8.9      2024-09-20 [1] CRAN (R 4.4.1)\n   kernlab             0.9-33     2024-08-13 [1] CRAN (R 4.4.1)\n   knitr               1.48       2024-07-07 [1] CRAN (R 4.4.1)\n   labeling            0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n P lattice             0.22-5     2023-10-24 [?] CRAN (R 4.3.3)\n   lgr                 0.4.4      2022-09-05 [1] CRAN (R 4.4.1)\n   lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n   listenv             0.9.1      2024-01-29 [1] CRAN (R 4.4.1)\n   magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n P MASS                7.3-61     2024-06-13 [?] CRAN (R 4.4.1)\n   mclust              6.1.1      2024-04-29 [1] CRAN (R 4.4.1)\n   mlr3              * 0.21.1     2024-10-18 [1] CRAN (R 4.4.1)\n   mlr3cluster         0.1.10     2024-10-03 [1] CRAN (R 4.4.1)\n   mlr3data            0.7.0      2023-06-29 [1] CRAN (R 4.4.1)\n   mlr3extralearners   0.9.0-9000 2024-10-18 [1] Github (mlr-org/mlr3extralearners@a622524)\n   mlr3filters         0.8.0      2024-04-10 [1] CRAN (R 4.4.1)\n   mlr3fselect         1.1.1.9000 2024-10-18 [1] Github (mlr-org/mlr3fselect@e917a02)\n   mlr3hyperband       0.6.0      2024-06-29 [1] CRAN (R 4.4.1)\n   mlr3learners        0.7.0      2024-06-28 [1] CRAN (R 4.4.1)\n   mlr3mbo             0.2.6      2024-10-16 [1] CRAN (R 4.4.1)\n   mlr3misc            0.15.1     2024-06-24 [1] CRAN (R 4.4.1)\n   mlr3pipelines       0.7.0      2024-09-24 [1] CRAN (R 4.4.1)\n   mlr3tuning          1.0.2      2024-10-14 [1] CRAN (R 4.4.1)\n   mlr3tuningspaces    0.5.1      2024-06-21 [1] CRAN (R 4.4.1)\n   mlr3verse         * 0.3.0      2024-06-30 [1] CRAN (R 4.4.1)\n   mlr3viz             0.9.0      2024-07-01 [1] CRAN (R 4.4.1)\n   mlr3website       * 0.0.0.9000 2024-10-18 [1] Github (mlr-org/mlr3website@20d1ddf)\n   modeltools          0.2-23     2020-03-05 [1] CRAN (R 4.4.1)\n   munsell             0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n P nnet                7.3-19     2023-05-03 [?] CRAN (R 4.3.3)\n   palmerpenguins      0.1.1      2022-08-15 [1] CRAN (R 4.4.1)\n   paradox             1.0.1      2024-07-09 [1] CRAN (R 4.4.1)\n   parallelly          1.38.0     2024-07-27 [1] CRAN (R 4.4.1)\n   pillar              1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n   pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n   prabclus            2.3-4      2024-09-24 [1] CRAN (R 4.4.1)\n   R6                  2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n   Rcpp                1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n   renv                1.0.11     2024-10-12 [1] CRAN (R 4.4.1)\n   rlang               1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n   rmarkdown           2.28       2024-08-17 [1] CRAN (R 4.4.1)\n   robustbase          0.99-4-1   2024-09-27 [1] CRAN (R 4.4.1)\n   scales              1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n   sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n   spacefillr          0.3.3      2024-05-22 [1] CRAN (R 4.4.1)\n   stringi             1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n   tibble              3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n   tidyselect          1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n   utf8                1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n   uuid                1.2-1      2024-07-29 [1] CRAN (R 4.4.1)\n   vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n   viridisLite         0.4.2      2023-05-02 [1] CRAN (R 4.4.1)\n   withr               3.0.1      2024-07-31 [1] CRAN (R 4.4.1)\n   xfun                0.48       2024-10-03 [1] CRAN (R 4.4.1)\n   yaml                2.3.10     2024-07-26 [1] CRAN (R 4.4.1)\n\n [1] /home/marc/repositories/mlr3website/mlr-org/renv/library/linux-ubuntu-noble/R-4.4/x86_64-pc-linux-gnu\n [2] /home/marc/.cache/R/renv/sandbox/linux-ubuntu-noble/R-4.4/x86_64-pc-linux-gnu/9a444a72\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}