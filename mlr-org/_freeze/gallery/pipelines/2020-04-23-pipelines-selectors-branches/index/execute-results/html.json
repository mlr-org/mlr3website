{
  "hash": "35f5728e6b6ce498510232d883289cda",
  "result": {
    "markdown": "---\ntitle: Pipelines, Selectors, Branches\ncategories:\n  - mlr3pipelines\n  - tuning\n  - classification\nauthor:\n  - name: Milan Dragicevic\n  - name: Giuseppe Casalicchio\ndate: 04-23-2020\ndescription: |\n  Build a preprocessing pipeline with branching.\naliases:\n  - ../../../gallery/2020-04-23-pipelines-selectors-branches/index.html\n---\n\n\n\n\n## Intro\n\n[mlr3pipelines](https://mlr3pipelines.mlr-org.com)  offers a very flexible way to create data preprocessing steps.\nThis is achieved by a modular approach using [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html)s.\nFor detailed overview check the [mlr3book](https://mlr3book.mlr-org.com/pipelines.html).\n\nRecommended prior readings:\n\n- [mlr3pipelines tutorial - german credit](https://mlr3gallery.mlr-org.com/posts/2020-03-11-mlr3pipelines-tutorial-german-credit/)\n- [Impute missing variables](https://mlr3gallery.mlr-org.com/posts/2020-01-30-impute-missing-levels/) .\n\nThis post covers:\n\n1. How to apply different preprocessing steps on different features\n2. How to branch different preprocessing steps, which allows to select the best performing path\n3. How to tune the whole pipeline\n\n## Prerequisites\n\nWe load the [mlr3verse](https://mlr3verse.mlr-org.com) package which pulls in the most important packages for this example.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\n```\n:::\n\n\nWe initialize the random number generator with a fixed seed for reproducibility, and decrease the verbosity of the logger to keep the output clearly represented.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(7832)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\")\nlgr::get_logger(\"bbotk\")$set_threshold(\"warn\")\n```\n:::\n\n\nThe [`Pima Indian Diabetes classification task`](https://mlr3.mlr-org.com/reference/mlr_tasks_pima.html) will be used.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask_pima = tsk(\"pima\")\nskimr::skim(task_pima$data())\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |                 |\n|:------------------------|:----------------|\n|Name                     |task_pima$data() |\n|Number of rows           |768              |\n|Number of columns        |9                |\n|Key                      |NULL             |\n|_______________________  |                 |\n|Column type frequency:   |                 |\n|factor                   |1                |\n|numeric                  |8                |\n|________________________ |                 |\n|Group variables          |None             |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts         |\n|:-------------|---------:|-------------:|:-------|--------:|:------------------|\n|diabetes      |         0|             1|FALSE   |        2|neg: 500, pos: 268 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|     sd|    p0|   p25|    p50|    p75|   p100|hist  |\n|:-------------|---------:|-------------:|------:|------:|-----:|-----:|------:|------:|------:|:-----|\n|age           |         0|          1.00|  33.24|  11.76| 21.00| 24.00|  29.00|  41.00|  81.00|▇▃▁▁▁ |\n|glucose       |         5|          0.99| 121.69|  30.54| 44.00| 99.00| 117.00| 141.00| 199.00|▁▇▇▃▂ |\n|insulin       |       374|          0.51| 155.55| 118.78| 14.00| 76.25| 125.00| 190.00| 846.00|▇▂▁▁▁ |\n|mass          |        11|          0.99|  32.46|   6.92| 18.20| 27.50|  32.30|  36.60|  67.10|▅▇▃▁▁ |\n|pedigree      |         0|          1.00|   0.47|   0.33|  0.08|  0.24|   0.37|   0.63|   2.42|▇▃▁▁▁ |\n|pregnant      |         0|          1.00|   3.85|   3.37|  0.00|  1.00|   3.00|   6.00|  17.00|▇▃▂▁▁ |\n|pressure      |        35|          0.95|  72.41|  12.38| 24.00| 64.00|  72.00|  80.00| 122.00|▁▃▇▂▁ |\n|triceps       |       227|          0.70|  29.15|  10.48|  7.00| 22.00|  29.00|  36.00|  99.00|▆▇▁▁▁ |\n:::\n:::\n\n\n## Selection of features for preprocessing steps\n\nSeveral features of the `pima` task have missing values:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask_pima$missings()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiabetes      age  glucose  insulin     mass pedigree pregnant pressure  triceps \n       0        0        5      374       11        0        0       35      227 \n```\n:::\n:::\n\n\nA common approach in such situations is to impute the missing values and to add a missing indicator column as explained in the [Impute missing variables](https://mlr3gallery.mlr-org.com/posts/2020-01-30-impute-missing-levels/) post.\nSuppose we want to use\n\n* [`PipeOpImputeHist`](https://mlr3pipelines.mlr-org.com/reference/mlr_pipeops_imputehist.html) on features \"glucose\", \"mass\" and \"pressure\" which have only few missing values and\n* [`PipeOpImputeMedian`](https://mlr3pipelines.mlr-org.com/reference/mlr_pipeops_imputemedian.html) on features \"insulin\" and \"triceps\" which have much more missing values.\n\nIn the following subsections, we show two approaches to implement this.\n\n### 1. Consider all features and apply the preprocessing step only to certain features\n\nUsing the `affect_columns` argument of a [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html) to define the variables on which a [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html) will operate with an appropriate [`Selector`](https://mlr3pipelines.mlr-org.com/reference/Selector.html) function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# imputes values based on histogram\nimputer_hist = po(\"imputehist\",\n  affect_columns = selector_name(c(\"glucose\", \"mass\", \"pressure\")))\n# imputes values using the median\nimputer_median = po(\"imputemedian\",\n  affect_columns = selector_name(c(\"insulin\", \"triceps\")))\n# adds an indicator column for each feature with missing values\nmiss_ind = po(\"missind\")\n```\n:::\n\n\nWhen [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html)s are constructed this way, they will perform the specified preprocessing step on the appropriate features and pass all the input features to the subsequent steps:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# no missings in \"glucose\", \"mass\" and \"pressure\"\nimputer_hist$train(list(task_pima))[[1]]$missings()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiabetes      age  insulin pedigree pregnant  triceps  glucose     mass pressure \n       0        0      374        0        0      227        0        0        0 \n```\n:::\n\n```{.r .cell-code}\n# no missings in \"insulin\" and \"triceps\"\nimputer_median$train(list(task_pima))[[1]]$missings()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiabetes      age  glucose     mass pedigree pregnant pressure  insulin  triceps \n       0        0        5       11        0        0       35        0        0 \n```\n:::\n:::\n\n\nWe construct a pipeline that combines `imputer_hist` and `imputer_median`.\nHere, `imputer_hist` will impute the features \"glucose\", \"mass\" and \"pressure\", and `imputer_median` will impute \"insulin\" and \"triceps\".\nIn each preprocessing step, all the input features are passed to the next step.\nIn the end, we obtain a data set without missing values:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# combine the two impuation methods\nimpute_graph = imputer_hist %>>% imputer_median\nimpute_graph$plot(html = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2020-04-23-pipelines-selectors-branches-007-1.png){fig-align='center' width=960}\n:::\n\n```{.r .cell-code}\nimpute_graph$train(task_pima)[[1]]$missings()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiabetes      age pedigree pregnant  glucose     mass pressure  insulin  triceps \n       0        0        0        0        0        0        0        0        0 \n```\n:::\n:::\n\n\nThe [`PipeOpMissInd`](https://mlr3pipelines.mlr-org.com/reference/mlr_pipeops_missind.html) operator replaces features with missing values with a missing value indicator:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmiss_ind$train(list(task_pima))[[1]]$data()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     diabetes missing_glucose missing_insulin missing_mass missing_pressure missing_triceps\n  1:      pos         present         missing      present          present         present\n  2:      neg         present         missing      present          present         present\n  3:      pos         present         missing      present          present         missing\n  4:      neg         present         present      present          present         present\n  5:      pos         present         present      present          present         present\n ---                                                                                       \n764:      neg         present         present      present          present         present\n765:      neg         present         missing      present          present         present\n766:      neg         present         present      present          present         present\n767:      pos         present         missing      present          present         missing\n768:      neg         present         missing      present          present         present\n```\n:::\n:::\n\n\nObviously, this step can not be applied to the already imputed data as there are no missing values.\nIf we want to combine the previous two imputation steps with a third step that adds missing value indicators, we would need to [`PipeOpCopy`](https://mlr3pipelines.mlr-org.com/reference/mlr_pipeops_copy.html) the data two times and supply the first copy to `impute_graph` and the second copy to `miss_ind` using [`gunion()`](https://mlr3pipelines.mlr-org.com/reference/gunion.html).\nFinally, the two outputs can be combined with [`PipeOpFeatureUnion`](https://mlr3pipelines.mlr-org.com/reference/mlr_pipeops_featureunion.html):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nimpute_missind = po(\"copy\", 2) %>>%\n  gunion(list(impute_graph, miss_ind)) %>>%\n  po(\"featureunion\")\nimpute_missind$plot(html = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2020-04-23-pipelines-selectors-branches-009-1.png){fig-align='center' width=960}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nimpute_missind$train(task_pima)[[1]]$data()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     diabetes age pedigree pregnant glucose mass pressure insulin triceps missing_glucose missing_insulin missing_mass\n  1:      pos  50    0.627        6     148 33.6       72     125      35         present         missing      present\n  2:      neg  31    0.351        1      85 26.6       66     125      29         present         missing      present\n  3:      pos  32    0.672        8     183 23.3       64     125      29         present         missing      present\n  4:      neg  21    0.167        1      89 28.1       66      94      23         present         present      present\n  5:      pos  33    2.288        0     137 43.1       40     168      35         present         present      present\n ---                                                                                                                  \n764:      neg  63    0.171       10     101 32.9       76     180      48         present         present      present\n765:      neg  27    0.340        2     122 36.8       70     125      27         present         missing      present\n766:      neg  30    0.245        5     121 26.2       72     112      23         present         present      present\n767:      pos  47    0.349        1     126 30.1       60     125      29         present         missing      present\n768:      neg  23    0.315        1      93 30.4       70     125      31         present         missing      present\n     missing_pressure missing_triceps\n  1:          present         present\n  2:          present         present\n  3:          present         missing\n  4:          present         present\n  5:          present         present\n ---                                 \n764:          present         present\n765:          present         present\n766:          present         present\n767:          present         missing\n768:          present         present\n```\n:::\n:::\n\n\n### 2. Select the features for each preprocessing step and apply the preprocessing steps to this subset\n\nWe can use the [`PipeOpSelect`](https://mlr3pipelines.mlr-org.com/reference/mlr_pipeops_select.html) to select the appropriate features and then apply the desired impute [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html) on them:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nimputer_hist_2 = po(\"select\",\n  selector = selector_name(c(\"glucose\", \"mass\", \"pressure\")),\n  id = \"slct1\") %>>% # unique id so we can combine it in a pipeline with other select PipeOps\n  po(\"imputehist\")\n\nimputer_hist_2$plot(html = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2020-04-23-pipelines-selectors-branches-011-1.png){fig-align='center' width=576}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nimputer_hist_2$train(task_pima)[[1]]$data()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     diabetes glucose mass pressure\n  1:      pos     148 33.6       72\n  2:      neg      85 26.6       66\n  3:      pos     183 23.3       64\n  4:      neg      89 28.1       66\n  5:      pos     137 43.1       40\n ---                               \n764:      neg     101 32.9       76\n765:      neg     122 36.8       70\n766:      neg     121 26.2       72\n767:      pos     126 30.1       60\n768:      neg      93 30.4       70\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nimputer_median_2 =\n  po(\"select\", selector = selector_name(c(\"insulin\", \"triceps\")), id = \"slct2\") %>>%\n  po(\"imputemedian\")\n\nimputer_median_2$train(task_pima)[[1]]$data()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     diabetes insulin triceps\n  1:      pos     125      35\n  2:      neg     125      29\n  3:      pos     125      29\n  4:      neg      94      23\n  5:      pos     168      35\n ---                         \n764:      neg     180      48\n765:      neg     125      27\n766:      neg     112      23\n767:      pos     125      29\n768:      neg     125      31\n```\n:::\n:::\n\n\nTo reproduce the result of the fist example (1.), we need to copy the data four times and apply `imputer_hist_2`, `imputer_median_2` and `miss_ind` on each of the three copies.\nThe fourth copy is required to select the features without missing values and to append it to the final result.\nWe can do this as follows:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nother_features = task_pima$feature_names[task_pima$missings()[-1] == 0]\n\nimputer_missind_2 = po(\"copy\", 4) %>>%\n  gunion(list(imputer_hist_2,\n    imputer_median_2,\n    miss_ind,\n    po(\"select\", selector = selector_name(other_features), id = \"slct3\"))) %>>%\n  po(\"featureunion\")\n\nimputer_missind_2$plot(html = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2020-04-23-pipelines-selectors-branches-014-1.png){fig-align='center' width=576}\n:::\n:::\n\n::: {.cell .column-page layout-align=\"center\"}\n\n```{.r .cell-code}\nimputer_missind_2$train(task_pima)[[1]]$data()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     diabetes glucose mass pressure insulin triceps missing_glucose missing_insulin missing_mass missing_pressure\n  1:      pos     148 33.6       72     125      35         present         missing      present          present\n  2:      neg      85 26.6       66     125      29         present         missing      present          present\n  3:      pos     183 23.3       64     125      29         present         missing      present          present\n  4:      neg      89 28.1       66      94      23         present         present      present          present\n  5:      pos     137 43.1       40     168      35         present         present      present          present\n ---                                                                                                             \n764:      neg     101 32.9       76     180      48         present         present      present          present\n765:      neg     122 36.8       70     125      27         present         missing      present          present\n766:      neg     121 26.2       72     112      23         present         present      present          present\n767:      pos     126 30.1       60     125      29         present         missing      present          present\n768:      neg      93 30.4       70     125      31         present         missing      present          present\n     missing_triceps age pedigree pregnant\n  1:         present  50    0.627        6\n  2:         present  31    0.351        1\n  3:         missing  32    0.672        8\n  4:         present  21    0.167        1\n  5:         present  33    2.288        0\n ---                                      \n764:         present  63    0.171       10\n765:         present  27    0.340        2\n766:         present  30    0.245        5\n767:         missing  47    0.349        1\n768:         present  23    0.315        1\n```\n:::\n:::\n\n\nNote that when there is one input channel, it is automatically copied as many times as needed for the downstream [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html)s.\nIn other words, the code above works also without `po(\"copy\", 4)`:\n\n\n::: {.cell .column-page layout-align=\"center\"}\n\n```{.r .cell-code}\nimputer_missind_3 = gunion(list(imputer_hist_2,\n  imputer_median_2,\n  miss_ind,\n  po(\"select\", selector = selector_name(other_features), id = \"slct3\"))) %>>%\n  po(\"featureunion\")\n\nimputer_missind_3$train(task_pima)[[1]]$data()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     diabetes glucose mass pressure insulin triceps missing_glucose missing_insulin missing_mass missing_pressure\n  1:      pos     148 33.6       72     125      35         present         missing      present          present\n  2:      neg      85 26.6       66     125      29         present         missing      present          present\n  3:      pos     183 23.3       64     125      29         present         missing      present          present\n  4:      neg      89 28.1       66      94      23         present         present      present          present\n  5:      pos     137 43.1       40     168      35         present         present      present          present\n ---                                                                                                             \n764:      neg     101 32.9       76     180      48         present         present      present          present\n765:      neg     122 36.8       70     125      27         present         missing      present          present\n766:      neg     121 26.2       72     112      23         present         present      present          present\n767:      pos     126 30.1       60     125      29         present         missing      present          present\n768:      neg      93 30.4       70     125      31         present         missing      present          present\n     missing_triceps age pedigree pregnant\n  1:         present  50    0.627        6\n  2:         present  31    0.351        1\n  3:         missing  32    0.672        8\n  4:         present  21    0.167        1\n  5:         present  33    2.288        0\n ---                                      \n764:         present  63    0.171       10\n765:         present  27    0.340        2\n766:         present  30    0.245        5\n767:         missing  47    0.349        1\n768:         present  23    0.315        1\n```\n:::\n:::\n\n\nUsually, `po(\"copy\")` is required when there are more than one input channels and multiple output channels, and their numbers do not match.\n\n## Branching\n\nWe can not know if the combination of a learner with this preprocessing graph will benefit from the imputation steps and the added missing value indicators.\nMaybe it would have been better to just use [`imputemedian`](https://mlr3pipelines.mlr-org.com/reference/mlr_pipeops_imputemedian.html) on all the variables.\nWe could investigate this assumption by adding an alternative path to the graph with the mentioned `imputemedian`.\nThis is possible using the [\"branch\"](https://mlr3pipelines.mlr-org.com/reference/branch.html) [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nimputer_median_3 = po(\"imputemedian\", id = \"simple_median\") # add the id so it does not clash with `imputer_median`\n\nbranches = c(\"impute_missind\", \"simple_median\") # names of the branches\n\ngraph_branch = po(\"branch\", branches) %>>%\n  gunion(list(impute_missind, imputer_median_3)) %>>%\n  po(\"unbranch\")\n\ngraph_branch$plot(html = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2020-04-23-pipelines-selectors-branches-017-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Tuning the pipeline\n\nTo finalize the graph, we combine it with a rpart learner:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngraph = graph_branch %>>%\n  lrn(\"classif.rpart\")\n\ngraph$plot(html = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/2020-04-23-pipelines-selectors-branches-018-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nTo define the parameters to be tuned, we first check the available ones in the graph:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nas.data.table(graph$param_set)[, .(id, class, lower, upper, nlevels)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                              id    class lower upper nlevels\n 1:             branch.selection ParamFct    NA    NA       2\n 2:    imputehist.affect_columns ParamUty    NA    NA     Inf\n 3:  imputemedian.affect_columns ParamUty    NA    NA     Inf\n 4:                missind.which ParamFct    NA    NA       2\n 5:                 missind.type ParamFct    NA    NA       4\n 6:       missind.affect_columns ParamUty    NA    NA     Inf\n 7: simple_median.affect_columns ParamUty    NA    NA     Inf\n 8:             classif.rpart.cp ParamDbl     0     1     Inf\n 9:     classif.rpart.keep_model ParamLgl    NA    NA       2\n10:     classif.rpart.maxcompete ParamInt     0   Inf     Inf\n11:       classif.rpart.maxdepth ParamInt     1    30      30\n12:   classif.rpart.maxsurrogate ParamInt     0   Inf     Inf\n13:      classif.rpart.minbucket ParamInt     1   Inf     Inf\n14:       classif.rpart.minsplit ParamInt     1   Inf     Inf\n15: classif.rpart.surrogatestyle ParamInt     0     1       2\n16:   classif.rpart.usesurrogate ParamInt     0     2       3\n17:           classif.rpart.xval ParamInt     0   Inf     Inf\n```\n:::\n:::\n\n\n\nWe decide to jointly tune the `\"branch.selection\"`, `\"classif.rpart.cp\"` and `\"classif.rpart.minbucket\"` hyperparameters:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsearch_space = ps(\n  branch.selection = p_fct(c(\"impute_missind\", \"simple_median\")),\n  classif.rpart.cp = p_dbl(0.001, 0.1),\n  classif.rpart.minbucket = p_int(1, 10))\n```\n:::\n\n\nIn order to tune the graph, it needs to be converted to a learner:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngraph_learner = as_learner(graph)\n\ncv3 = rsmp(\"cv\", folds = 3)\n\ncv3$instantiate(task_pima) # to generate folds for cross validation\n\ninstance = tune(\n  tuner = tnr(\"random_search\"),\n  task = task_pima,\n  learner = graph_learner,\n  resampling = rsmp(\"cv\", folds = 3),\n  measure = msr(\"classif.ce\"),\n  search_space = search_space,\n  term_evals = 5)\n\nas.data.table(instance$archive, unnest = NULL, exclude_columns = c(\"x_domain\", \"uhash\", \"resample_result\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   branch.selection classif.rpart.cp classif.rpart.minbucket classif.ce runtime_learners           timestamp batch_nr\n1:    simple_median       0.02172886                       2  0.2799479            2.774 2023-11-02 16:33:12        1\n2:   impute_missind       0.07525939                       1  0.2760417            2.701 2023-11-02 16:33:25        2\n3:   impute_missind       0.09207969                       3  0.2773438            1.031 2023-11-02 16:33:36        3\n4:   impute_missind       0.03984117                       6  0.2721354            2.184 2023-11-02 16:33:47        4\n5:   impute_missind       0.09872643                       7  0.2773438            2.507 2023-11-02 16:33:57        5\n   warnings errors\n1:        0      0\n2:        0      0\n3:        0      0\n4:        0      0\n5:        0      0\n```\n:::\n:::\n\n\nThe best performance in this short tuned experiment was achieved with:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance$result\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   branch.selection classif.rpart.cp classif.rpart.minbucket learner_param_vals  x_domain classif.ce\n1:   impute_missind       0.03984117                       6          <list[9]> <list[3]>  0.2721354\n```\n:::\n:::\n\n\n## Conclusion\n\nThis post shows ways on how to specify features on which preprocessing steps are to be performed. In addition it shows how to create alternative paths in the learner graph. The preprocessing steps that can be used are not limited to imputation. Check the list of available [`PipeOp`](https://mlr3pipelines.mlr-org.com/reference/PipeOp.html).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}