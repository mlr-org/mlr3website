{
  "hash": "6eea627cb4fcf99fe2d2122b5b3dbda3",
  "result": {
    "markdown": "---\ntitle: Integer Hyperparameters in Tuners for Real-valued Search Spaces\ncategories:\n  - tuning\n  - classification\nauthor:\n  - name: Marc Becker\ndescription: |\n  How to tune integer hyperparameters with tuners that can only propose real numbers.\ndate: 01-19-2021\nimage: ../../images/logo_color.png\n---\n\n\n\n\n## Introduction\n\n[`Tuner`](https://mlr3tuning.mlr-org.com/reference/Tuner.html) for real-valued search spaces are not able to tune on integer hyperparameters.\nHowever, it is possible to round the real values proposed by a [`Tuner`](https://mlr3tuning.mlr-org.com/reference/Tuner.html) to integers before passing them to the learner in the evaluation.\nWe show how to apply a parameter transformation to a [`ParamSet`](https://paradox.mlr-org.com/reference/ParamSet.html) and use this set in the tuning process.\n\nWe load the [mlr3verse](https://mlr3verse.mlr-org.com) package which pulls in the most important packages for this example.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: mlr3\n```\n:::\n:::\n\n\nWe initialize the random number generator with a fixed seed for reproducibility, and decrease the verbosity of the logger to keep the output clearly represented.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(7832)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\")\nlgr::get_logger(\"bbotk\")$set_threshold(\"warn\")\n```\n:::\n\n\n## Task and Learner\n\nIn this example, we use the k-Nearest-Neighbor classification learner.\nWe want to tune the integer-valued hyperparameter `k` which defines the numbers of neighbors.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner = lrn(\"classif.kknn\")\nprint(learner$param_set$params$k)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id    class lower upper levels default\n1:  k ParamInt     1   Inf              7\n```\n:::\n:::\n\n\n# Tuning\n\nWe choose generalized simulated annealing as tuning strategy.\nThe `param_classes` field of [`TunerGenSA`](https://mlr3tuning.mlr-org.com/reference/mlr_tuners_gensa.html) states that the tuner only supports real-valued (`ParamDbl`) hyperparameter tuning.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprint(tnr(\"gensa\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TunerGenSA>: Generalized Simulated Annealing\n* Parameters: trace.mat=FALSE, smooth=FALSE\n* Parameter classes: ParamDbl\n* Properties: single-crit\n* Packages: mlr3tuning, bbotk, GenSA\n```\n:::\n:::\n\n\nTo get integer-valued hyperparameter values for `k`, we construct a search space with a transformation function.\nThe `as.integer()` function converts any real valued number to an integer by removing the decimal places.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsearch_space = ps(\n  k = p_dbl(lower = 3, upper = 7.99, trafo = as.integer)\n)\n```\n:::\n\n\nWe start the tuning and compare the results of the search space to the results in the space of the learners hyperparameter set.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance = tune(\n  method = \"gensa\",\n  task = tsk(\"iris\"),\n  learner = learner,\n  resampling = rsmp(\"holdout\"),\n  measure = msr(\"classif.ce\"),\n  term_evals = 20,\n  search_space = search_space)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optim(theta.old, fun, gradient, control = control, method = method, : one-dimensional optimization by Nelder-Mead is unreliable:\nuse \"Brent\" or optimize() directly\n```\n:::\n:::\n\n\nThe optimal `k` is still a real number in the search space.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance$result_x_search_space\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         k\n1: 3.82686\n```\n:::\n:::\n\n\nHowever, in the learners hyperparameters space, `k` is an integer value.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstance$result_x_domain\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$k\n[1] 3\n```\n:::\n:::\n\n\nThe archive shows us that for all real-valued `k` proposed by [GenSA](https://cran.r-project.org/package=GenSA), an integer-valued `k` in the learner hyperparameter space (`x_domain_k`) was created.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nas.data.table(instance$archive)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"table-responsive\"><table class = 'table'>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> k </th>\n   <th style=\"text-align:right;\"> classif.ce </th>\n   <th style=\"text-align:right;\"> x_domain_k </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 3.826860 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.996323 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.941332 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.826860 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.826860 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.826860 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.209546 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.444174 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.018203 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.635517 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.922532 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.731189 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.874696 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.779024 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.850778 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.802942 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.838819 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.814901 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.832840 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3.820881 </td>\n   <td style=\"text-align:right;\"> 0.06 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n</tbody>\n</table></div>\n```\n:::\n:::\n\n\nInternally, [`TunerGenSA`](https://mlr3tuning.mlr-org.com/reference/mlr_tuners_gensa.html) was given the parameter types of the search space and therefore suggested real numbers for `k`.\nBefore the performance of the different `k` values was evaluated, the transformation function of the `search_space` parameter set was called and `k` was transformed to an integer value.\n\nNote that the tuner is not aware of the transformation.\nThis has two problematic consequences:\nFirst, the tuner might propose different real valued configurations that after rounding end up to be already evaluated configurations and we end up with re-evaluating the same hyperparameter configuration.\nThis is only problematic, if we only optimze integer parameters.\nSecond, the rounding introduces discontinuities which can be problematic for some tuners.\n\nWe successfully tuned a integer-valued hyperparameter with [`TunerGenSA`](https://mlr3tuning.mlr-org.com/reference/mlr_tuners_gensa.html) which is only suitable for an real-valued search space.\nThis technique is not limited to tuning problems.\n[`Optimizer`](https://bbotk.mlr-org.com/reference/Optimizer.html) in [bbotk](https://bbotk.mlr-org.com) can be also used in the same way to produce points with integer parameters.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}